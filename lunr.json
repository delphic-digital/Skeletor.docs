[
    {
        "uri": "/contribute/writing-a-plugin",
        "title": "Creating a plugin",
        "content": "\nCreating a plugin for Skeletor is easy. There is a plugin factory included in Skeletor.core,\n\nRequirements\n\nSkeletor.core\n\n Usage\n\nThe plugin factory requires a few things to be defined in your plugin prior to calling the plugin factory function.\n\nYour plugin's constructor, calling super\nA DEFAULTS static property on your plugin's constructor\nA VERSION static property on your plugin's constructor\n\nCreating your plugin\n\nLet's look at an example. In this example, we're going to create a button plugin. To do so, we will use the following code:\n\ndefine(\n\t[\n\t\t'$',\n\t\t'plugin'\n\t],\n\tfunction($, Plugin) {\n\t\tfunction Button(element, options) {\n\t\t\tButton.super.call(this, element, options, Button.DEFAULTS);\n\t\t}\n\n\t\tButton.VERSION = '0.0.1';\n\n\t\tButton.DEFAULTS = {\n\t\t\tcssClass = 'button'\n\t\t};\n\n\t\tPlugin.create('button', Button, {\n\t\t\t_init: function(element) {\n\t\t\t}\n\t\t});\n\t}\n)\n\nFirst, we declare a Button constructor, and VERSION and DEFAULTS properties. We then invoke the static Plugin.create function. Through prototypal inheritance, this function extends the Button prototype with the Plugin prototype. Additionally, it creates our Zepto plugin interface.\n\nTo create a button instance, you merely need to use:\n\n$('button /').button();\n\n The Plugin factory method\n\nExtends a plugin using the Plugin prototype.\n\n| Parameter&nbsp;name | Description |\n|----------------|-------------|\n| name | The name of the plugin, in lowercase. |\n| ctor | The constructor of the plugin we want to extend. |\n| prototype | Additional methods we want to extend onto our plugin's prototype. The prototype must declare an _init function, which is used for plugin construction. |\n\nSee the example above for usage.\n\nInvoking methods on a plugin.\n\nThe plugin factory facilitates invoking methods via the plugin interface. This means that once a plugin is initialized, public methods can be invoked by passing the name of the method as the first parameter to the plugin function.\n\nPublic methods are methods defined on the object passed into the Plugin.create factory method that aren't preceded by an underscore character. Methods preceded by an underscore are considered private methods.\n\nUsing our button example above, here's what public methods would look like:\n\ndefine(\n\t[\n\t\t'$',\n\t\t'plugin'\n\t],\n\tfunction($, Plugin) {\n\t\tfunction Button(element, options) {\n\t\t\tButton.super.call(this, element, options, Button.DEFAULTS);\n\t\t}\n\n\t\tButton.VERSION = '0.0.1';\n\n\t\tButton.DEFAULTS = {\n\t\t\tcssClass = 'button'\n\t\t};\n\n\t\tPlugin.create('button', Button, {\n\t\t\t_init: function(element) {\n\t\t\t\tthis.$element = $(element);\n\t\t\t},\n\t\t\tenable: function() {\n\t\t\t\tthis.$element.removeAttr('disabled');\n\t\t\t},\n\t\t\tdisable: function() {\n\t\t\t\tthis.$element.attr('disabled', 'disabled');\n\t\t\t},\n\t\t\tisEnabled: function() {\n\t\t\t\treturn !this.$element[0].hasAttribute('disabled');\n\t\t\t}\n\t\t});\n\t}\n)\n\nIn the above example, the enable and disable functions are public. To invoke the method, simply pass the method name into the plugin function:\n\nvar $button = $('button /').button();\n\n$button.button('disable');\n\n Method return values\n\nIt's important to note that there's some specific behaviour around invoking methods that return a value when using a single element vs. a set of elements.\n\nWhen invoking a method against a single element, and when that method returns a value, the value will be returned as expected.\n\nvar $button = $('button /').button();\n\nvar enabled = $button.button('isEnabled'); // returns true\n\nWhen invoking a method against a set of elements, and when that method returns a value, the original set of elements will be returned.\n\nvar $buttons = $('.lots-of-buttons').button();\n\nvar enabled = $buttons.button('isEnabled'); // returns original set of elements\n\nThis behaviour is intentional, as it's assumed that it's unlikely to be calling methods against a set of elements when expecting primitive values in return.\n\nUsage with Skeletor boilerplate\n\nThe plugin can be installed using bower:\n\nbower install plugin\n\nSkeletor will auto wire it up to your require.js config file:\n\n{\n  'paths': {\n    'plugin': 'bower_components/plugin'\n  }\n}\n",
        "tags": []
    },
    {
        "uri": "/index",
        "title": "The Skeletor Project test",
        "content": "\nExtensible front-end HTML, CSS, and JavaScript framework. Constantly being update to the bleeding edge of web technologies.",
        "tags": []
    },
    {
        "uri": "/meta/license",
        "title": "License",
        "content": "\nSkeletor is relased under the BSD 3-Clause License.\n\nThe BSD 3-Clause License\nhttps://opensource.org/licenses/BSD-3-Clause\n\nCopyright (c) 2016, Jeff Mills\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nNeither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
        "tags": []
    },
    {
        "uri": "/meta/release-notes",
        "title": "Release Notes",
        "content": "\n2.0\n\nSkeletor 2.0 release has an all new JavaScript framework.\n\n New features\n\nCreate extensible JavaScript plugins.\nBower integration for 3rd party scripts\nBower integration for your own scripts\nCurrent components converted over to new Skeletor framework\n\n1.0\n\nSkeletor 1.0 switched to gulp from grunt",
        "tags": []
    },
    {
        "uri": "/meta/roadmap",
        "title": "Skeletor Roadmap",
        "content": "\nAccordion component\nTab component",
        "tags": []
    },
    {
        "uri": "/overview/introduction",
        "title": "Introduction to Skeletor",
        "content": "\nSkeletor is a powerful framework designed as an easy starting point for front end development of projects. It was designed to give you a quick and organized way to start developing web sites with best practices and patterns in mind. It makes use of the latest and greatest web technology and performance.\n\nSkeletor tries to achieve a very minimalistic design to remain as flexible as possible. Everything included is very basic architectural and skeleton code to give you a headstart. There isn't much templated code, but there are the tools in place to quickly prototype up something. This framework is meant for intermediate to advanced front end developers.\n\nWhat's included?\n\nGulp\n  Tasks for everything from compiling Sass to live browser reloading.\nSass\n  Folder stucture with predefined partials.\n  Globbling to automatically include component partials.\nJavaScript\n\tContext aware component loading for on demand/aync loading\n  RequireJS module loading for easy dependency management.\n  Extensible JavaScript framework like Zurb's Foundation or Twitter Bootstrap.\n  Compatible component plugins.\n  Bower for vendor package management.\n\n Disclaimer\nThis project and site gets updated as more best practices or discoveries are implemented.",
        "tags": []
    },
    {
        "uri": "/overview/javascript",
        "title": "Javascript",
        "content": "\r\n\r\nSkeletor comes with JavaScript structure using RequireJS. Some JS helper libraries and plugins are included automatically:\r\n\r\njQuery, version 2 is automatically loaded for browers that support it, otherwise the 1.9 branch is used.\r\nBrowser Update, tell your audience to use modern browsers!\r\nonMediaQuery, works great for triggering javascript for certain media queries.\r\nPicturefill, there is no reason to not use reponsive images.\r\n\r\nBrief overview of structure\r\n\r\nInside components will be your sites custom requirejs modules.\r\n\tcommon folder contains components that are global and be concatenated to the main.js when built.\r\n\tother components will be standalone and won't be concatenated with the main (common) JS. These can be loaded directly with the HTML.\r\n\r\n\r\n data-component and data-component-context\r\nTo load a JS component, use the sample syntax in component-example.js, and add a data-component to the html element that should load the JS.\r\n\r\n`HTML\r\n!-- component-example.js will be loaded anytime this HTML is present on the page --\r\ndiv class=\"component-example\" data-component=\"component-example\"\r\n\tLorem ipsum\r\n/div\r\n`\r\n\r\nTo load a JS component for only certain media queries, add a data-component-context to the html element. For multiple states, comma separate the values.\r\n\r\n`HTML\r\n!-- component-example.js will be loaded only in tablet and desktop --\r\ndiv class=\"component-example\" data-component=\"component-example\" data-component-context=\"tablet,desktop\"\r\n\tLorem ipsum\r\n/div\r\n`\r\n\r\nThese components are aynced in after page load and will remain separate modules in the build process.",
        "tags": []
    },
    {
        "uri": "/overview/sass",
        "title": "Sass",
        "content": "\r\n\r\n\r\nSkeletor comes with Sass and a structure setup. The following Sass helper libraries and plugins are preinstalled:\r\n Susy, great for robust grids\r\n Bourbon, awesome set of mixins\r\n Breakpoint, used with a custom mixin to make breakpoints easy\r\n Node Sass Globbing, so you don't have to add custom partials to the main.scss. Be careful of casscading rules!!\r\n\r\nBrief overview of structure\r\n\r\n main.scss\r\n\r\nThe main.scss file contains the entries points for the sites sass partials.\r\n\r\npartials\r\n\r\n _settings.scss site settings defined here, it contains variables for all of the colors, font stacks, breakpoints, and sizing.\r\n base holds global and base styles.\r\n components holds site components styles. Any partial added here is automatically imported with the globbing plugin\r\n layout holds global layout styles.\r\n utilites holds mixins and SASS utilites.\r\n\r\n Overview of best practices for writing SASS/CSS with Skeletor\r\n\r\n Mobile First, mobile first approach\r\n SMACSS, css design process\r\n BEM, naming convention for CSS.\r\n\r\n\r\nNotes\r\n\r\nWe found using a traditional mobile first structure within each component partial is better for maintainability than inlining media queries into each class. This way, there is only one of each breakpoints defined in each component, instead of scattered throughout. This makes a big difference on large scale sites.\r\n\r\n`scss\r\n.main-nav {\r\n\t/* Mobile main nav styles */\r\n\r\n\t&__list {\r\n\r\n\t}\r\n\r\n\t&__item {\r\n\r\n\t}\r\n\r\n\t@include breakpoint($medium){\r\n\r\n\t\t&__list {\r\n\r\n\t\t}\r\n\r\n\t\t&__item {\r\n\r\n\t\t}\r\n\t}\r\n\r\n}\r\n`\r\n\r\ninstead of\r\n\r\n\r\n`scss\r\n.main-nav {\r\n\r\n\t@include breakpoint($medium){}\r\n\r\n\t&__list {\r\n\t\t@include breakpoint($medium){}\r\n\t}\r\n\r\n\t&__item {\r\n\t\t@include breakpoint($medium){}\r\n\t}\r\n}\r\n`\r\n",
        "tags": []
    },
    {
        "uri": "/overview/setup",
        "title": "Setup",
        "content": "\r\n\r\nSkeletor uses open source tools for its workflow. If you haven't installed these requirements please do so.\r\n\r\nNode.js\r\nInstall Gulp npm install --g gulp-cli\r\nInstall Bower npm install -g bower\r\n\r\nInstalling\r\n\r\nFork/Clone/Download the Skeletor repository into your machine.\r\nOpen a terminal and install the Node.Js dependencies by running npm install in your project directory.\r\nInstall client side dependencies with bower by running bower install in your project directory.\r\n\r\nSeveral things happened happened when you can the commands. npm installed all the nodejs dependencies needed for gulp to do its work. You only have to run this once. bower installed some predefined javascript dependencies for use on your site. This is what was installed:\r\n\r\nonMediaQuery\r\npicturefill\r\nsvg4everybody\r\nnormalize-css\r\nskeletor.browsehappy,\r\nskeletor.sass.utilities,\r\nskeletor.sass.helpers,\r\nskeletor.util.componentLoader\r\n\r\nYou can continue to use bower to install vendor plugins\r\n\r\n Config\r\n\r\nBefore you get started, you will need to update some config options for gulp. Open the config file that is here:\r\n\r\n`bash\r\nskeletor\r\n|-- gulp\r\n|   |-- config.js\r\n`\r\n\r\n`javascript\r\nvar localHostname = 'localhost.com', // Change to your local website that is running if you want to proxy it to browser-sync.\r\n    siteShortname = 'skeletor', // Used for JavaScript optimaztion and should match your main.js namespace:  skeletor.main.js\r\n    baseLayoutDir = './', // Where your index or base layout file is.\r\n    baseLayoutFile = 'index.html', // The filename of your index or base layout. This is used to change the script included from src to dist.\r\n    views = './*.html', // Where browser-sync should watch for HTML changes\r\n    src = './Static/src', // Where the sass and js src are, probably don't need to change\r\n    dist = './Static/dist', // Where everything gets compiled to, probably don't need to change\r\n    assets = './Static/assets' // Where fonts and images, and other static assets should go. Probably don't need to change.\r\n`\r\n\r\nStarting\r\n\r\nRun gulp to automatically open a new Skeletor project running on localhost:3000.\r\n\r\n File structure\r\n\r\nCompiled and production-ready code can be found in the dist directory. The src directory contains development code.\r\n\r\n`bash\r\nskeletor\r\n|-- Gulp\r\n|   |-- # Lots of gulp stuff\r\n|-- Static\r\n|   |-- assets\r\n|   |   |-- images\r\n|   |   |   |-- # Your image files\r\n|   |   |-- spritesheets\r\n|   |       |-- # Your spritesheets get generated here\r\n|   |-- dist\r\n|   |   |-- css\r\n|   |   |   |-- main.css # Your Sass gets compiled here\r\n|   |   |-- js\r\n|   |   |   |-- lib\r\n|   |   |   |   |-- require.js\r\n|   |-- src\r\n|       |-- js\r\n|       |   |-- skeletor.main.js\r\n|       |   |-- components\r\n|       |   |   |-- common.js\r\n|       |   |   |-- common\r\n|       |   |   |   |-- # Your common components here\r\n|       |-- scss\r\n|       |   |-- main.scss\r\n|       |   |-- partials\r\n|       |       |-- _settings.scss\r\n|       |       |-- base\r\n|       |       |   |-- _buttons.scss\r\n|       |       |   |-- _fonts.scss\r\n|       |       |   |-- _inputs.scss\r\n|       |       |   |-- _scaffolding.scss\r\n|       |       |   |-- _sprites.scss\r\n|       |       |   |-- _svg.scss\r\n|       |       |   |-- _typography.scss\r\n|       |       |-- components\r\n|       |       |   |-- # Your sites Sass components\r\n|       |       |-- layout\r\n|       |           |-- _footer.scss\r\n|       |           |-- _forms.scss\r\n|       |           |-- _header.scss\r\n|       |           |-- _sidebar.scss\r\n|       |-- sprites\r\n|       |   |-- bitmap.example.handlebars\r\n|       |   |-- inline.mustache\r\n|       |   |-- vector.example.html\r\n|       |   |-- bitmaps\r\n|       |   |   |-- # Your bitmap (png/jpg) sprites\r\n|       |   |-- inline\r\n|       |   |   |-- # Your CSS sprites\r\n|       |   |-- vectors\r\n|       |       |-- # Your svg spritesheet sprites\r\n|       |-- styleguide\r\n|           |-- styleguide_overrides.css\r\n|           |-- styleguide_variables.css\r\n|-- .bowerrc\r\n|-- .editorconfig\r\n|-- .gitignore\r\n|-- bower.json\r\n|-- config.json\r\n|-- gulpfile.js\r\n|-- index.html\r\n|-- package.json\r\n|-- README.md\r\n\r\n`",
        "tags": []
    },
    {
        "uri": "/overview/sprites",
        "title": "Sprites",
        "content": "\r\nSkeletor comes with easy ways to create 3 different types of sprites.\r\n\r\nSpritesmith to create a bitmap spritesheet with retina support;\r\nsvg-sprite to create a vector spritesheet made out of svgs.\r\ngulp-inline-svg to inline an svg directory in the CSS.\r\n\r\nBitmap\r\n\r\nDrop a png and corresponding retina (image@2x.png naming convention) in src/sprites/bitmaps\r\nGulp will add your new image to the spritesheet at Static/assets/spritesheets/bitmap.spritesheet.png and retina sheet at /Static/assets/spritesheets/bitmap.spritesheet@2x.png.\r\n\r\nUse this mixin in your sass to include sprite with retina\r\n\r\n`sass\r\n@include retina-sprite($nameOfImage-group); //The -group after the name is important.\r\n`\r\n\r\n Vector\r\n\r\nDrop an svg in src/sprites/vector\r\nGulp will add your new image to the spritesheet at Static/assets/spritesheets/vector.spritesheet.svg\r\n\r\nYou can now utilize the svg use tag in your html!\r\n\r\n`html\r\nsvg\r\n\tuse xlink:href=\"/Static/assets/spritesheets/vector.spritesheet.svg#nameOfImage\"/use\r\n/svg\r\n`\r\n\r\nInline\r\n\r\nDrop an svg in src/sprites/inline\r\nGulp will add your new image to the sass partial at src/scss/partials/base/_svg.scss\r\n\r\nYou can now inline your svg into your sass with a mixin\r\n\r\n`css\r\n/**\r\n@include inline-svg($nameOfImage, $fillColorString)\r\n**/\r\n\r\n@include inline-svg($plus, CCC)\r\n`",
        "tags": []
    },
    {
        "uri": "/overview/styleguide",
        "title": "Styleguide",
        "content": "\r\n\r\nsc5-styleguide",
        "tags": []
    },
    {
        "uri": "/overview/usage",
        "title": "Usage",
        "content": "\r\n\r\nSkeletor uses gulp as a task runner and several commands are available to use:\r\n\r\n`sh\r\nrun Gulp in development mode (does not minify your JS for quicker response),\r\n start the server, open a new browser tab at localhost:3000 and start watching files.\r\nJS script include path is updated to src directory in base template.\r\n Sass is automatically compiled, and sprites are automatically generated.\r\n$ gulp\r\n`\r\n\r\n`sh\r\nrun Gulp in production mode (runs your JS code through the requirejs optimizer),\r\n JS path is updated to dist directory in base template,\r\nwill not start any server or watch.\r\n$ gulp build\r\n`\r\n\r\n Installing components\r\n\r\nSkeletor integrates with bower package management very nicely for vendor components. See http://bower.io for more info.\r\n\r\n\r\n`sh\r\ninstall a vendor component with bower\r\n main component files are automatically wired up to Skeletor\r\njs main is added to requirejs paths config.\r\n css/scss is added to main.scss\r\n$ bower install package\r\n`\r\n\r\nThere is some automation that happens when you use bower. Please take care to understand these steps.\r\nThe files are determined by what's declared as a main file by the bower.json spec.\r\n\r\nJavaScript files are added to the requirejs paths config:\r\n\r\n`js\r\n// Automatically injected Bower JS dependencies via bowerRequireJS\r\nrequire.config({\r\n\tpaths: {\r\n\t\t\"bower-example\": \"../../../bower_components/bower-example\",\r\n\t},\r\n\tpackages: [\r\n\r\n\t],\r\n\tshim: {\r\n\r\n\t}\r\n});\r\n`\r\n\r\nCSS/SASS files are added to the main.scss:\r\n\r\n`scss\r\n// Automatically injected Bower CSS dependencies via wiredep (never manually edit this block)\r\n// bower:css\r\n@import \"../../../bower_components/bower-example.css\";\r\n// endbower\r\n\r\n// Automatically injected Bower SCSS dependencies via wiredep (never manually edit this block)\r\n// bower:scss\r\n@import \"../../../bower_components/bower-example.scss\";\r\n// endbower\r\n`\r\n\r\nIf something goes wrong (correct files aren't wired up), check the components bower.json file to make sure the \"main\": [] is declared correctly. If not, you can add an override for your project's bower.json file. See https://github.com/ck86/main-bower-files#overrides-options for how to do this.",
        "tags": []
    },
    {
        "uri": "/plugins/browsehappy",
        "title": "Skeletor.browsehappy",
        "content": "\nShow an unobstrusive notification bar if your browser is out dated.",
        "tags": []
    },
    {
        "uri": "/plugins/flyouts",
        "title": "Skeletor.flyouts",
        "content": "\nFlyout menu system.",
        "tags": []
    }
]