[
    {
        "uri": "/contribute/registering-a-plugin",
        "title": "Registering a plugin",
        "content": "\nSkeletor has a private bower repo to host all it's components using private-bower hosted here: http://bowerregistry-delphic.rhcloud.com/. Registering it follows normal bower steps with an extra config.\n\nRegister\n\nCreate a bower config file at the root of your plugin directory: .bowerrc with the following settings.\n\n{\n    \"registry\": \"http://bowerregistry-delphic.rhcloud.com\",\n    \"timeout\": 300000,\n}\nYou can read more about the .bowerrc from the bower site: https://bower.io/docs/config/\n\n Usage\n\nSkeletor includes a .bowerrc file that points to the private bower registery already. Installing a Skeletor component is a simple as running bower commands.\n\nbower install plugin\n\nSkeletor will auto wire it up to your require.js config file:\n\n{\n  'paths': {\n    'skeletor.plugin': 'bower_components/skeletor.plugin'\n  }\n}\n\nNow you can load it with requirejs in a component:\nrequire(['skeletor.plugin'], function(){\n    var $plugin = new Skeletor.plugin($('.plugin__list'));\n})\n",
        "tags": []
    },
    {
        "uri": "/contribute/writing-a-plugin",
        "title": "Creating a plugin",
        "content": "\nCreating a plugin for Skeletor is easy. There is a plugin factory included in Skeletor.core.\n\nRequirements\n\nSkeletor.core (included in Skeletor by default)\n\n Usage\n\nThe plugin factory requires a few things to be defined in your plugin prior to calling the plugin factory function.\n\nYour plugin's constructor, calling super\nA DEFAULTS static property on your plugin's constructor\nA VERSION static property on your plugin's constructor\n\nCreating your plugin\n\nHere is an example of creating a breadcrumb plugin.\n\n//skeletor.breadcrumb.js\n\ndefine(['jquery', 'skeletor.core'],function ($, Skeletor){\n    function Breadcrumb(element, options) {\n        Breadcrumb.super.call(this, element, options, Breadcrumb.DEFAULTS);\n\n        Breadcrumb.VERSION = '0.0.1';\n\n        Breadcrumb.DEFAULTS = {\n          cssClass = 'breadcrumb'\n        };\n\n        Skeletor.Plugin.create('breadcrumb', Breadcrumb, {\n            _init: function(element) {\n            \tthis.$element = $(element);\n            }\n        });\n    }\n})\n\nFirst, we declare a Breadcrumb constructor, and VERSION and DEFAULTS properties. We then invoke the static Skeletor.Plugin.create function for Skeletor's core. Through prototypal inheritance, this function extends the Breadcrumb prototype with the Plugin prototype. Additionally, it creates our jQuery plugin interface.\n\nTo create a breadcrumb instance, you merely need to use:\n\nvar $breadcrumb = new Skeletor.Breadcrumb($('.breadcrumb__list'));\n\n Passing options to a plugin.\n\nYou can extend the default options on plugin in typical jQuery format. Pass your options as the second argument.\n\nvar $breadcrumb = new Skeletor.Breadcrumb($('.breadcrumb__list'), {\n   size: 'large',\n   spacer: '|'\n});\n\nYour options are passed through to the options object inside your plugin and extend the defaults. you can also overwrite the defaults.\n\n//skeletor.breadcrumb.js\n\ndefine(['jquery', 'skeletor.core'],function ($, Skeletor){\n    function Breadcrumb(element, options) {\n        Breadcrumb.super.call(this, element, options, Breadcrumb.DEFAULTS);\n\n        Breadcrumb.VERSION = '0.0.1';\n\n        Breadcrumb.DEFAULTS = {\n          cssClass = 'breadcrumb'\n        };\n\n        Skeletor.Plugin.create('breadcrumb', Breadcrumb, {\n            _init: function(element) {\n            \tthis.$element = $(element);\n            \tconsole.log(this.options.cssClass)\n            \tconsole.log(this.options.spacer)\n            \tconsole.log(this.options.large)\n            }\n        });\n    }\n})\n\nInvoking methods on a plugin.\n\nThe plugin factory facilitates invoking methods via the plugin interface. This means that once a plugin is initialized, public methods can be invoked by passing the name of the method as the first parameter to the plugin function.\n\nPublic methods are methods defined on the object passed into the Skeletor.Plugin.create factory method that aren't preceded by an underscore character. Methods preceded by an underscore are considered private methods.\n\nUsing our breadcrumb example above, here's what public methods would look like:\n\n//skeletor.breadcrumb.js\n\ndefine(['jquery', 'skeletor.core'],function ($, Skeletor){\n    function Breadcrumb(element, options) {\n        Breadcrumb.super.call(this, element, options, Breadcrumb.DEFAULTS);\n\n        Breadcrumb.VERSION = '0.0.1';\n\n        Breadcrumb.DEFAULTS = {\n          cssClass = 'breadcrumb'\n        };\n\n        Skeletor.Plugin.create('breadcrumb', Breadcrumb, {\n            _init: function(element) {\n                this.$element = $(element);\n            },\n            enable: function() {\n                this.$element.removeAttr('disabled');\n            },\n            disable: function() {\n                this.$element.attr('disabled', 'disabled');\n            },\n            isEnabled: function() {\n                return !this.$element[0].hasAttribute('disabled');\n            }\n        });\n    }\n})\n\nIn the above example, the enable and disable functions are public. To invoke the method, simply call it on the saved instance:\n\nvar $breadcrumb = new Skeletor.Breadcrumb($('.breadcrumb__list'));\n\n$breadcrumb.disable();\n",
        "tags": []
    },
    {
        "uri": "/development/javascript",
        "title": "Javascript",
        "content": "\r\n\r\nSkeletor comes with a JavaScript structure that utilizes RequireJS for dependency and module loading. There are a couple reasons for this:\r\n\r\nPerformance: Skeletor uses best practices for loading JavaScript with a multi-page site. There is a core, or commmon file that gets loading on everypage. After that, there are component level scripts that get loaded in after page load. These components are only loaded if that component exists on the page. It's another way of doing page specific scripts, except this is refined down to the component level.\r\nDependency managment can become a big problem with JavaScript, AMD solves this.\r\n\r\nBrief overview of structure\r\n\r\n`bash\r\nskeletor\r\n|-- Static\r\n    |-- dist\r\n    |   |-- js\r\n    |       |--  Your custom javascript is compiled here\r\n    |       |-- lib\r\n    |           |-- require.js\r\n    |-- src\r\n        |-- js\r\n            |-- skeletor.main.js\r\n            |-- components\r\n            |-- common.js\r\n            |-- common\r\n                |-- # Your common components here\r\n\r\n`\r\n\r\nMain\r\n\r\nThis is the core and gets loaded on every page. It takes care of global utilities, global components, polyfills, and including the component loader.\r\n\r\n`\r\n// Automatically injected Bower JS dependencies via bowerRequireJS\r\nrequire.config({\r\n\tpaths: {\r\n\t},\r\n\tpackages: [\r\n\r\n\t],\r\n\tshim: {\r\n\r\n\t}\r\n});\r\n// endbower\r\n\r\n//Need a second config so the optimizer doesn't try and evaluate the browser only jquery conditional.\r\n\r\nrequire.config({\r\n\tpaths: {\r\n\t\t'jquery': (document.addEventListener) ?\r\n\t\t\t['//code.jquery.com/jquery-3.0.0.min']\r\n\t\t\t:\r\n\t\t\t['//code.jquery.com/jquery-1.12.4.min'] // https://github.com/rnsloan/requirejs-conditionally-load-jquery2\r\n\t}\r\n})\r\n\r\ndefine(function (require){\r\n\r\n\tvar componentLoader   = require('skeletor.util.componentLoader'),\r\n\t    browsehappy       = require('skeletor.browsehappy'),\r\n\t    svg4everybody     = require('svg4everybody'),\r\n\t    picturefill       = require('picturefill'),\r\n\t    commonComponents  = require('./components/common');\r\n\r\n\tsvg4everybody();\r\n\tcommonComponents.init();\r\n\r\n});\r\n`\r\n{{ note title=\"Note\" }}\r\nBe sure to rename skeletor.main.js with your siteShortName config setting, so it's nameofsite.main.js. Also update this name in your base template.\r\n{{ /note }}\r\n\r\nHere is a breakdown of all the parts:\r\n\r\n`\r\n/*---------------------------------------------------------------\r\n\r\n\tHere is where bower packages get automatically wired up.\r\n\tYou should never edit anything in here manually, unless\r\n\tyou need to delete a path.\r\n\r\n-----------------------------------------------------------------*/\r\n\r\n\r\n// Automatically injected Bower JS dependencies via bowerRequireJS\r\nrequire.config({\r\n\tpaths: {\r\n\t},\r\n\tpackages: [\r\n\r\n\t],\r\n\tshim: {\r\n\r\n\t}\r\n});\r\n// endbower\r\n`\r\n\r\n\r\n`\r\n/*---------------------------------------------------------------\r\n\r\n\tThis is some logic to load different verisons of jquery based\r\n\ton browser support. jQuery 3.x supports IE 9+ only.\r\n\r\n-----------------------------------------------------------------*/\r\n\r\n\r\n//Need a second config so the optimizer doesn't try and evaluate the browser only jquery conditional.\r\n\r\nrequire.config({\r\n\tpaths: {\r\n\t\t'jquery': (document.addEventListener) ?\r\n\t\t\t['//code.jquery.com/jquery-3.0.0.min']\r\n\t\t\t:\r\n\t\t\t['//code.jquery.com/jquery-1.12.4.min'] // https://github.com/rnsloan/requirejs-conditionally-load-jquery2\r\n\t}\r\n})\r\n\r\n`\r\n\r\n\r\n`\r\n/*---------------------------------------------------------------\r\n\r\n\tHere is where some predownloaded components are already\r\n\trequired. These are loaded and initiliazed on page load.\r\n\r\n-----------------------------------------------------------------*/\r\n\r\ndefine(function (require){\r\n\r\n\tvar componentLoader   = require('skeletor.util.componentLoader'),\r\n\t    browsehappy       = require('skeletor.browsehappy'),\r\n\t    svg4everybody     = require('svg4everybody'),\r\n\t    picturefill       = require('picturefill'),\r\n\t    commonComponents  = require('./components/common');\r\n\r\n\tsvg4everybody();\r\n\tcommonComponents.init();\r\n\r\n});\r\n`\r\n\r\nHere is a breakdown on the preloaded components:\r\n\r\n`\r\nvar componentLoader   = require('skeletor.util.componentLoader'),\r\n/*\r\n\tThis is a Skeletor utility that handles component loading\r\n\tthrough data attributes on elements in your html. By loading\r\n\tjavascript this way, the component is essitianly loaded\r\n\t\"on demand\" and loaded only when it's needed. It also supports\r\n\tcontext, so components can be loaded only on mobile, tablet, or desktop.\r\n\tSee below for example's on how to use this.\r\n*/\r\n`\r\n`\r\nbrowsehappy       = require('skeletor.browsehappy')\r\n/*\r\n\tDetects old versions of browsers and shows a prompt bar for\r\n\tthe user to upgrade.\r\n*/\r\n`\r\n\r\n`\r\nsvg4everybody     = require('svg4everybody'),\r\n/*\r\n\tExternal SVG spritesheets polyfill. One of Skeletors key features.\r\n*/\r\n`\r\n`\r\npicturefill       = require('picturefill'),\r\n/*\r\n\tPicture element pollyfill. Use picture element and srset without\r\n\tcrossbrowser worry.\r\n*/\r\n`\r\n`\r\ncommonComponents  = require('./components/common');\r\n/*\r\n\tFor your sites custom common (global) components. This is where\r\n\tcode lives that you want loaded on every page and will be\r\n\tconcatenated to the main.js when built.\r\n*/\r\n`\r\n\r\n\r\n Dynamic components\r\n\r\nCreate requirejs components in the ./components folder. These won't be concatenated with the main (common) JS and these can be loaded directly with the HTML.\r\n\r\n\r\nExample component\r\n\r\nComponents are standard requirejs modules, and it's syntax should be used. For components that rely on the data-component loading, they require a couple functions.\r\n\r\nAn init function for encapsulating code that should run with the component is fully loaded into the page.\r\nA destroy function to run when the component is unloaded on the page. For instance, when it leaves a mobile context and enters tablet.\r\n\r\nHere's an example:\r\n\r\n`\r\ndefine(['jquery'],function($) {\r\n\r\n\treturn {\r\n\t\tsettings: {\r\n\t\t\t$elm : $('.js-skeletor-guy')\r\n\t\t},\r\n\r\n\t\tinit: function() {\r\n\r\n\t\t\tconsole.log('Init skeletor guy.');\r\n\r\n\t\t\tthis.settings.$elm.click(function(){\r\n\t\t\t\t$(this).toggleClass('flipped')\r\n\t\t\t})\r\n\t\t},\r\n\r\n\t\tdestroy: function() {\r\n\t\t\tconsole.log('Destroy skeletor guy.')\r\n\t\t}\r\n\r\n\t};\r\n\r\n});\r\n`\r\n\r\n Component loading\r\n\r\nAdd a data-component to the html element that the component will be attached to:\r\n\r\n`HTML\r\n!-- component-example.js will be loaded anytime this HTML is present on the page --\r\ndiv class=\"component-example\" data-component=\"component-example\"\r\n\tLorem ipsum\r\n/div\r\n`\r\n\r\nTo load a JS component for only certain media queries, add a data-component-context to the html element. For multiple states, comma separate the values.\r\n\r\n`HTML\r\n!-- component-example.js will be loaded only in tablet and desktop --\r\ndiv class=\"component-example\" data-component=\"component-example\" data-component-context=\"tablet,desktop\"\r\n\tLorem ipsum\r\n/div\r\n`\r\n\r\nThese components are aynced in after page load and will remain separate modules in the build process.\r\n\r\nBower\r\n\r\nSkeletor uses bower for front end package management.\r\n\r\n\r\n`sh\r\n Install a component with bower.\r\n$ bower install package\r\n`\r\n\r\nThere is some automation specific to Skeletor that happens when you use bower. Please take care to understand these steps.\r\nFiles that are determined by what's declared in the components bower.json as a main file are automatically wired up.\r\n\r\nMain JavaScript files are added to the requirejs paths config:\r\n\r\n`js\r\n// Automatically injected Bower JS dependencies via bowerRequireJS\r\nrequire.config({\r\n\tpaths: {\r\n\t\t\"bower-example\": \"../../../bower_components/bower-example\",\r\n\t},\r\n\tpackages: [\r\n\r\n\t],\r\n\tshim: {\r\n\r\n\t}\r\n});\r\n`\r\n\r\nMain CSS/SASS files are added to the main.scss:\r\n\r\n`scss\r\n// Automatically injected Bower CSS dependencies via wiredep (never manually edit this block)\r\n// bower:css\r\n@import \"../../../bower_components/bower-example.css\";\r\n// endbower\r\n\r\n// Automatically injected Bower SCSS dependencies via wiredep (never manually edit this block)\r\n// bower:scss\r\n@import \"../../../bower_components/bower-example.scss\";\r\n// endbower\r\n`\r\n\r\nIf something goes wrong (correct files aren't wired up), check the components bower.json file to make sure the \"main\": [] is declared correctly. If not, you can add an override for your project's bower.json file. See https://github.com/ck86/main-bower-files#overrides-options for how to do this.\r\n\r\n\r\nUsing Skeletor plugins\r\n\r\nSkeletor has a library of plugins you can use easily for your website. These plugins integrate into the Skeletor namespace and add nice organization to your code.\r\n\r\nUsing Skeletor plugins is simple. If you're familiar with jQuery plugins, it works almost the same. Skeletor plugins are registered with bower and can be found by using bower on the command line: bower search skeletor or by viewing the private bower repo through the browser. These skeletor plugins will automatically be wired up like any other bower component. To use:\r\n\r\n`javascript\r\nrequire(['skeletor.accordion'], function(){\r\n\r\n  //attach to multiple elements\r\n  $('.js-accordion').each(function(){\r\n    new Skeletor.Accordion($(this));\r\n  })\r\n\r\n  //Or attach to single element\r\n  new Skeletor.Accordion($('.js-accordion-another'),{singleOpen: false});\r\n\r\n})\r\n`\r\n\r\n Accessing Instances\r\nTo access methods or properties on a plugin, the plugin instance will need to be retrieved. This can be achieved through the skeletor() method. You can pass public methods to the plugin this way.\r\n\r\n`javascript\r\n$('.js-accordion:eq(1)').skeletor('open',1)\r\n`\r\n\r\n\r\nSkeletor Object\r\n\r\nThe global Skeletor object is used extensively by and created for the plugin system. It defines global options, localized messages, feature detection, and device support. It also acts as a namespace for plugins by housing a top level name to avoid global conflicts. Each plugin class definition can be found on the Skeletor object, for example, the accordion class is found under Skeletor.Accordion.",
        "tags": []
    },
    {
        "uri": "/development/sass",
        "title": "Sass",
        "content": "\r\n\r\n\r\nSkeletor comes with Sass and a structure setup. The following Sass helper libraries and plugins are preinstalled:\r\n\r\nSusy, great for robust grids\r\nBourbon, awesome set of mixins\r\nBreakpoint, used with a custom mixin to make breakpoints easy\r\nNode Sass Globbing, so you don't have to add custom partials to the main.scss. Be careful of casscading rules!!\r\n\r\nStructure\r\n\r\n`bash\r\nskeletor\r\n|-- Static\r\n    |-- dist\r\n    |   |-- css\r\n    |   |   |-- main.css  Your Sass gets compiled here\r\n    |-- src\r\n        |-- scss\r\n            |-- main.scss\r\n            |-- partials\r\n                |-- _settings.scss\r\n                |-- base\r\n                |   |-- _buttons.scss\r\n                |   |-- _fonts.scss\r\n                |   |-- _inputs.scss\r\n                |   |-- _scaffolding.scss\r\n                |   |-- _sprites.scss\r\n                |   |-- _svg.scss\r\n                |   |-- _typography.scss\r\n                |-- components\r\n                |   |-- # Your sites Sass components\r\n                |-- layout\r\n                    |-- _footer.scss\r\n                    |-- _forms.scss\r\n                    |-- _header.scss\r\n                    |-- _sidebar.scss\r\n`\r\n\r\nmain.scss\r\n\r\nThe main.scss file contains the entries points for the sites sass partials.\r\n\r\npartials\r\n\r\n_settings.scss site settings defined here, it contains variables for all of the colors, font stacks, breakpoints, and sizing.\r\nbase holds global and base styles.\r\ncomponents holds site components styles. Any partial added here is automatically imported with the globbing plugin.\r\nlayout holds global layout styles.\r\n\r\nPhilosophies\r\n\r\nMobile First, mobile first approach\r\nSMACSS, css design process\r\nBEM, naming convention for CSS.\r\n",
        "tags": []
    },
    {
        "uri": "/development/sprites",
        "title": "Sprites",
        "content": "\r\nSkeletor comes with easy ways to create 3 different types of sprites.\r\n\r\nSpritesmith to create a bitmap spritesheet with retina support;\r\nsvg-sprite to create a vector spritesheet made out of svgs.\r\ngulp-inline-svg to inline an svg directory in the CSS.\r\n\r\nBitmap\r\n\r\nDrop a png and corresponding retina (image@2x.png naming convention) in src/sprites/bitmaps\r\nGulp will add your new image to the spritesheet at Static/assets/spritesheets/bitmap.spritesheet.png and retina sheet at /Static/assets/spritesheets/bitmap.spritesheet@2x.png.\r\n\r\nUse this mixin in your sass to include sprite with retina\r\n\r\n`sass\r\n@include retina-sprite($nameOfImage-group); //The -group after the name is important.\r\n`\r\n\r\n Vector\r\n\r\nDrop an svg in src/sprites/vector\r\nGulp will add your new image to the spritesheet at Static/assets/spritesheets/vector.spritesheet.svg\r\n\r\nYou can now utilize the svg use tag in your html!\r\n\r\n`html\r\nsvg\r\n\tuse xlink:href=\"/Static/assets/spritesheets/vector.spritesheet.svg#nameOfImage\"/use\r\n/svg\r\n`\r\n\r\nInline\r\n\r\nDrop an svg in src/sprites/inline\r\nGulp will add your new image to the sass partial at src/scss/partials/base/_svg.scss\r\n\r\nYou can now inline your svg into your sass with a mixin\r\n\r\n`css\r\n/**\r\n@include inline-svg($nameOfImage, $fillColorString)\r\n**/\r\n\r\n@include inline-svg($plus, CCC)\r\n`",
        "tags": []
    },
    {
        "uri": "/index",
        "title": "The Skeletor Project test",
        "content": "\nExtensible front-end HTML, CSS, and JavaScript framework. Constantly being update to the bleeding edge of web technologies.",
        "tags": []
    },
    {
        "uri": "/meta/license",
        "title": "License",
        "content": "\nSkeletor is released under the BSD 3-Clause License.\n\nThe BSD 3-Clause License\nhttps://opensource.org/licenses/BSD-3-Clause\n\nCopyright (c) 2016, Jeff Mills\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nNeither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
        "tags": []
    },
    {
        "uri": "/meta/release-notes",
        "title": "Release Notes",
        "content": "\n0.14.0, Jun 16, 2016\n\nSkeletor 0.14 release has an all new JavaScript framework.\n\n New features\n\nCreate extensible JavaScript components for usage in Skeletor.\nCurrent components converted over to new Skeletor framework\n\n0.13.0,  Jun 7, 2016\n\nSplit out Gulp tasks to external JavaScript files\n\n 0.12.0, Mar 30, 2016\n\nInline SVG support\n\n0.11.0, Mar 17, 2016\n\nAbstract Gulp paths to config object\nExternal config for Gulp\n\n 0.10.0, Feb 1, 2016\n\nRetina bitmap sprites support\n\n0.9.0, Feb 23, 2016\n\nIntegrate Bower usage\n\n 0.8.0, Feb 19, 2016\n\nConvert from Grunt to Gulp!\nRemove all Ruby dependencies and rely only on Node.js\nSvg sprites\n\n0.7.0, Sep 22, 2015\n\nRefactor font icons\nAdd an assets folder\n\n 0.6.0, Sep 21, 2015\n\nProper jquery loading with requirejs\n\n0.5.0, Sep 18, 2015\n\nInclude Susy\nInclude Bourbon\nGemfile.lock to lock in Sass Globing version\nRequireJS optimizer\nSprite automation with spritesmith\n\n 0.4.0, Aug 26, 2015\n\nConvert JavaScript to AMD modules utilizing requirejs.\n\n0.3.0, Jan 26, 2015\n\nUse jquery 2.0 instead of zepto and add in velocity.js for animations\n\n 0.2.0, Oct 24, 2014\n\nConvert from minified.js to zepto and fallback to jquery for IE<10\n\n0.1.2, Oct 23, 2014\n\nBetter prod and dev regex switching\n\n 0.1.1, Oct 17, 2014\n\nUse a config for Grunt settings in package.json\nUpdate Sass structure\nAdd a Gemfile for ruby dependencies\n\n0.1.0, Oct 15, 2014\n\nSkeletor is usable.",
        "tags": []
    },
    {
        "uri": "/meta/roadmap",
        "title": "Skeletor Roadmap",
        "content": "\nAccordion component\nTab component\nFlyouts component\nAccessibility enhancements\nBetter handling of multiple data-components on a page",
        "tags": []
    },
    {
        "uri": "/overview/introduction",
        "title": "Introduction to Skeletor",
        "content": "\nSkeletor is a powerful framework designed as a starting point for front end development of projects. It was designed to give you a quick and organized way to start developing web sites with best practices and patterns in mind. It makes use of the latest and greatest web technology and performance.\n\nSkeletor tries to achieve a very minimalistic design to remain as flexible as possible. Everything included is very basic skeleton code to give you a headstart. There isn't much templated code, but there are the tools and patterns in place to quickly prototype anything. This framework is meant for intermediate to advanced front end developers.\n\nWhat's included?\n\nGulp\n  Tasks for everything from compiling Sass to live browser reloading.\nSass\n  Folder stucture with predefined partials.\n  Globbling to automatically include component partials.\nJavaScript\n\tContext aware component loading for on demand/aync loading\n  RequireJS module loading for easy dependency management.\n  Extensible JavaScript framework like Zurb's Foundation or Twitter Bootstrap.\n  Compatible component plugins.\n  Bower for vendor package management.\n\n Disclaimer\n\nThis project and site gets updated as more best practices or discoveries are implemented.",
        "tags": []
    },
    {
        "uri": "/overview/setup",
        "title": "Setup",
        "content": "\r\n\r\nSkeletor uses open source tools for its workflow. If you haven't installed these requirements please do so.\r\n\r\nNode.js\r\nInstall Gulp npm install --g gulp-cli\r\nInstall Bower npm install -g bower\r\n\r\nInstalling\r\n\r\nFork/Clone/Download the Skeletor repository into your machine.\r\nOpen a terminal and install the Node.Js dependencies by running npm install in your project directory.\r\nInstall client side dependencies with bower by running bower install in your project directory.\r\n\r\nSeveral things happened happened when you can the commands. npm installed all the nodejs dependencies needed for gulp to do its work. You only have to run this once. bower installed client side dependencies.\r\n\r\n Config\r\n\r\nBefore you get started, you will need to update some config options for gulp. Open the config file that is here:\r\n\r\n`bash\r\nskeletor\r\n|-- gulp\r\n    |-- config.js\r\n`\r\n\r\n`javascript\r\nvar localHostname = 'localhost.com', // Change to your local website that is running if you want to proxy it to browser-sync.\r\n    siteShortname = 'skeletor', // Used for JavaScript optimaztion and should match your main.js namespace:  skeletor.main.js\r\n    baseLayoutDir = './', // Where your index or base layout file is.\r\n    baseLayoutFile = 'index.html', // The filename of your index or base layout. This is used to change the script included from src to dist.\r\n    views = './*.html', // Where browser-sync should watch for HTML changes\r\n    src = './Static/src', // Where the sass and js src are, probably don't need to change\r\n    dist = './Static/dist', // Where everything gets compiled to, probably don't need to change\r\n    assets = './Static/assets' // Where fonts and images, and other static assets should go. Probably don't need to change.\r\n`\r\n\r\nStarting\r\n\r\nRun gulp to automatically open a new Skeletor project running on localhost:3000.\r\n\r\n File structure\r\n\r\nCompiled and production-ready code can be found in the dist directory. The src directory contains development code.\r\n\r\n`bash\r\nskeletor\r\n|-- Gulp\r\n|   |-- # Lots of gulp stuff\r\n|-- Static\r\n|   |-- assets\r\n|   |   |-- images\r\n|   |   |   |-- # Your image files\r\n|   |   |-- spritesheets\r\n|   |       |-- # Your spritesheets get generated here\r\n|   |-- dist\r\n|   |   |-- css\r\n|   |   |   |-- main.css # Your Sass gets compiled here\r\n|   |   |-- js\r\n|   |   |   |-- lib\r\n|   |   |   |   |-- require.js\r\n|   |-- src\r\n|       |-- js\r\n|       |   |-- skeletor.main.js\r\n|       |   |-- components\r\n|       |   |   |-- common.js\r\n|       |   |   |-- common\r\n|       |   |   |   |-- # Your common components here\r\n|       |-- scss\r\n|       |   |-- main.scss\r\n|       |   |-- partials\r\n|       |       |-- _settings.scss\r\n|       |       |-- base\r\n|       |       |   |-- _buttons.scss\r\n|       |       |   |-- _fonts.scss\r\n|       |       |   |-- _inputs.scss\r\n|       |       |   |-- _scaffolding.scss\r\n|       |       |   |-- _sprites.scss\r\n|       |       |   |-- _svg.scss\r\n|       |       |   |-- _typography.scss\r\n|       |       |-- components\r\n|       |       |   |-- # Your sites Sass components\r\n|       |       |-- layout\r\n|       |           |-- _footer.scss\r\n|       |           |-- _forms.scss\r\n|       |           |-- _header.scss\r\n|       |           |-- _sidebar.scss\r\n|       |-- sprites\r\n|       |   |-- bitmap.example.handlebars\r\n|       |   |-- inline.mustache\r\n|       |   |-- vector.example.html\r\n|       |   |-- bitmaps\r\n|       |   |   |-- # Your bitmap (png/jpg) sprites\r\n|       |   |-- inline\r\n|       |   |   |-- # Your CSS sprites\r\n|       |   |-- vectors\r\n|       |       |-- # Your svg spritesheet sprites\r\n|       |-- styleguide\r\n|           |-- styleguide_overrides.css\r\n|           |-- styleguide_variables.css\r\n|-- .bowerrc\r\n|-- .editorconfig\r\n|-- .gitignore\r\n|-- bower.json\r\n|-- config.json\r\n|-- gulpfile.js\r\n|-- index.html\r\n|-- package.json\r\n|-- README.md\r\n\r\n`",
        "tags": []
    },
    {
        "uri": "/overview/usage",
        "title": "Usage",
        "content": "\r\n\r\nSkeletor uses gulp as a task runner and several commands are available to use:\r\n\r\n`sh\r\nrun Gulp in development mode (does not minify your JS for quicker response),\r\n start the server, open a new browser tab at localhost:3000 and start watching files.\r\nJS script include path is updated to src directory in base template.\r\n Sass is automatically compiled, and sprites are automatically generated.\r\n$ gulp\r\n`\r\n\r\n`sh\r\nrun Gulp in production mode (runs your JS code through the requirejs optimizer),\r\n JS path is updated to dist directory in base template,\r\nwill not start any server or watch.\r\n$ gulp build\r\n`",
        "tags": []
    },
    {
        "uri": "/plugins/accordion",
        "title": "Skeletor.accordion",
        "content": "\nAllows collapsing and expanding of multiple sections of content.\n\nRequires: skeletor.core\n\nInstalling\n\nbower install skeletor.accordion\n\n Usage\n\nAn accordion must be structured using the example markup. Every item should have an accompanying header and section. The header will be bound with a click event that toggles the display of its sibling section, while also closing other sections (can be changed through options).\n\ndiv class=\"accordion js-accordion\"\n  div class=\"accordion__item\"\n    header class=\"accordion__header\"\n      Lorem ipsum dolor sit amet\n    /header\n    section class=\"accordion__section\"\n      div class=\"accordion__body\"\n        Qui offendit convenire ea. Vis eirmod graecis mentitum in. Scripta delectus an quo. Equidem elaboraret nam et,\n      /div\n    /section\n  /div\n/div\n\nNow you can require and initialize the accordion.\n\nrequire(['skeletor.accordion'], function(){\n\n  //attach to multiple elements\n  $('.js-accordion').each(function(){\n    new Skeletor.Accordion($(this));\n  })\n\n  //Or attach to single element with options\n  new Skeletor.Accordion($('.js-accordion-another'),{singleOpen: false});\n\n})\n\nOptions\n\n|Option             |Type      |Default       |Description                                                            |\n|-------------------|----------|--------------|-----------------------------------------------------------------------|\n|singleOpen         |boolean   |true          |Allow only one item open at a time                                     |\n|duration           |int       |200           |Animation length between transitions                                   |\n|easing             |string    |'swing'       |Animation easing supports Velocty: http://velocityjs.org/easing       |\n|active             |int       |0             |Animation length between transitions                                   |\n\nMethods\n\n|Method              |Description                                                            |\n|--------------------|-----------------------------------------------------------------------|\n|open(int:index)     |Open accordion item at specified index. 0 based.                       |\n|close(int:index)    |Close accordion item at specified index. 0 based.                      |\n|closeall()          |Close all items                                                        |\n\n Keyboard\n\nKeyboard navigation is supported:\n\nIf you focus in the accordion \"buttons\"\n\nuse Up/Left to put focus on previous accordion button,\nuse Down/Right to put focus on next accordion button\n\nAnd hit return on an accordion button to open/close it.",
        "tags": []
    },
    {
        "uri": "/plugins/browsehappy",
        "title": "Skeletor.browsehappy",
        "content": "\nShow an unobstrusive notification bar if your browser is out dated. This is a wrapper around http://browser-update.org's service. Lot's of this information here is repeated from their service.\n\nUsage\n\nThis plugin is included by default in Skeletor. There isn't anything extra you need to do unless you want to change options. The relevant initialization code is in the skeletor.main.js\n\nrequire(['skeletor.browsehappy'], function(){\n  new Skeletor.BrowseHappy()\n})\nWith optional options object:\n\nrequire(['skeletor.browsehappy'], function(){\n  new Skeletor.BrowseHappy($(document),{\n    test: true\n  })\n})\n\n{{ note title=\"Note\" }}\nThe first parameter is always the element the plugin is attached too. In the above, $(document) is used. It's also the default if it's left blank.\n{{ /note }}\n\n Options\n\n|Option|Type|Default|Description|\n|---|---|---|---|\n|vs|object|{i:9,f:25,o:12.1,s:2,c:10}|Browser versions to notify|\n|reminder|int|24|after how many hours should the message reappear, 0 = show all the time|\n|reminderClosed|int|150|If the user closes message it reappears after x hours|\n|onshow|function|function(infos){}|Callback function after the bar has appeared|\n|onclick|function|function(infos){}|Callback function if bar was clicked|\n|onclose|function|function(infos){}|Callback function after the bar is closed|\n|l|boolean|false|set a language for the message, e.g. \"en\", overrides the default detection|\n|test|boolean|false|true = always show the bar (for testing)|\n|text|string|\"\"|Custom notification html text,  Optionally include up to two placeholders \"%s\" which will be replaced with the browser version and contents of the link tag. Example: \"Your browser (%s) is old.  Please a%supdate/a\"   |\n|textxx|string|\"\"|Custom notification text for language \"xx\", e.g. textde for german and text_it for italian |\n|newwindow|boolean|true|Open link in new window/tab|\n|url|string|http://browsehappy.com/|The url to go to after clicking the notification|\n\nCSS\n\nThe following CSS rules are applied by the script. You can overwrite them in your own CSS.\n\n.buorg {\n  position:absolute;\n  width:100%;\n  top:0px;\n  left:0px;\n  border-bottom:1px solid A29330;\n  background:#FDF2AB no-repeat 1em 0.55em url(http://browser-update.org/img/dialog-warning.gif);\n  text-align:left;\n  cursor:pointer;\n  font-family: Arial,Helvetica,sans-serif; color:#000;\n  font-size: 12px;\n}\n\n.buorg div {\n  padding:5px 36px 5px 40px;\n}\n\n.buorg a {\n  color:#E25600;\n}\n\nbuorgclose {\n  position: absolute;\n  right: .5em;\n  top:.2em;\n  height: 20px;\n  width: 12px;\n  font-weight: bold;\n  font-size:14px;\n  padding:0;\n}\n`",
        "tags": []
    },
    {
        "uri": "/troubleshooting/external-svgs",
        "title": "External svgs",
        "content": "\nExternal svgs don't work across domains.\n\nThey have to be on the same domain.\n\n Workarounds",
        "tags": []
    },
    {
        "uri": "/tutorials/mobile-first-sass",
        "title": "Mobile first sass",
        "content": "\nWe found using a traditional mobile first structure within each component partial is better for maintainability, than inlining media queries into each class. This way, there is only one of each breakpoints defined in each component, instead of scattered throughout. This makes a big difference on large scale sites.\n\n.main-nav {\n\n  &__list {}\n  &__item {}\n\n  @include breakpoint($medium){\n    &__list {}\n    &__item {}\n  }\n}\n\ninstead of\n\n.main-nav {\n\n  @include breakpoint($medium){}\n\n  &__list {\n    @include breakpoint($medium){}\n  }\n\n  &__item {\n    @include breakpoint($medium){}\n  }\n}\n",
        "tags": []
    }
]