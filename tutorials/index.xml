<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on The Skeletor Project</title>
    <link>https://delphic-digital.github.io/Skeletor.docs/tutorials/</link>
    <description>Recent content in Tutorials on The Skeletor Project</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 03 Apr 2016 13:21:56 +0200</lastBuildDate>
    <atom:link href="https://delphic-digital.github.io/Skeletor.docs/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to contribute to Hugo</title>
      <link>https://delphic-digital.github.io/Skeletor.docs/tutorials/how-to-contribute-to-hugo/</link>
      <pubDate>Sun, 03 Apr 2016 13:21:56 +0200</pubDate>
      
      <guid>https://delphic-digital.github.io/Skeletor.docs/tutorials/how-to-contribute-to-hugo/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Hugo is an open source project and lives by the work of its &lt;a href=&#34;https://github.com/spf13/hugo/graphs/contributors&#34;&gt;contributors&lt;/a&gt;. Help to make Hugo even more awesome. There are plenty of &lt;a href=&#34;https://github.com/spf13/hugo/issues&#34;&gt;open issues&lt;/a&gt; on GitHub and we need your help.&lt;/p&gt;

&lt;p&gt;This tutorial is intended for people who are new to Git, GitHub or open source projects in general. It should help to overcome most of the barriers that newcomers encounter. It describes step by step what you need to do.&lt;/p&gt;

&lt;p&gt;For any kind of questions please take a look at our &lt;a href=&#34;https://discuss.gohugo.io/&#34;&gt;forum&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;install-go&#34;&gt;Install Go&lt;/h2&gt;

&lt;p&gt;The installation of Go should take only a few minutes. &lt;a href=&#34;https://golang.org/dl/&#34;&gt;Download&lt;/a&gt; the latest stable version of Go and follow the official &lt;a href=&#34;https://golang.org/doc/install&#34;&gt;installation guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s confirm the correct installation of Go. Open a terminal (or command line under Windows). Execute &lt;code&gt;go version&lt;/code&gt; and you should see the version number of your Go installation. Next, make sure that you setup the &lt;code&gt;GOPATH&lt;/code&gt; as described in the installation guide.&lt;/p&gt;

&lt;p&gt;You can print the &lt;code&gt;GOPATH&lt;/code&gt; with &lt;code&gt;echo $GOPATH&lt;/code&gt;. You should a non-empty string containing a valid path.&lt;/p&gt;

&lt;h3 id=&#34;gvm-as-alternative&#34;&gt;GVM as alternative&lt;/h3&gt;

&lt;p&gt;More experienced users can use the &lt;a href=&#34;https://github.com/moovweb/gvm&#34;&gt;Go Version Manager&lt;/a&gt;, or GVM for short. It allows you to switch between different Go versions &lt;em&gt;on the same machine&lt;/em&gt;. Probably you don&amp;rsquo;t need this feature. But you can easily upgrade to a new released Go version with a few commands.&lt;/p&gt;

&lt;p&gt;This is handy if you follow the developement of Hugo over a longer period of time. Future versions of Hugo will usually be compiled with the latest version of Go. Sooner or later you have to upgrade if you want to keep up.&lt;/p&gt;

&lt;h2 id=&#34;create-an-account-on-github&#34;&gt;Create an account on GitHub&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;re going to contribute code, you&amp;rsquo;ll need to have an account on GitHub. Go to &lt;a href=&#34;https://github.com/join&#34;&gt;www.github.com/join&lt;/a&gt; and set up a personal account.&lt;/p&gt;

&lt;h2 id=&#34;install-git-on-your-system&#34;&gt;Install Git on your system&lt;/h2&gt;

&lt;p&gt;You will need to install Git. This tutorial assumes basic knowledge about Git. Refer to this excellent &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git book&lt;/a&gt; if you are not sure where to begin. The used terminology will be explained with annotations.&lt;/p&gt;

&lt;p&gt;Git is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Version_control&#34;&gt;version control system&lt;/a&gt; to track the changes of source code. Hugo depends on smaller third-party packages that are used to extend the functionality. We use them because we don&amp;rsquo;t want to reinvent the wheel.&lt;/p&gt;

&lt;p&gt;Go ships with a sub-command called &lt;code&gt;get&lt;/code&gt; that will download these packages for us when we setup our working environment. The source code of the packages is tracked with Git. &lt;code&gt;get&lt;/code&gt; will interact with the Git servers of the package hosters in order to fetch all dependencies.&lt;/p&gt;

&lt;p&gt;Move back to the terminal and check if Git is already installed. Type in &lt;code&gt;git version&lt;/code&gt; and press enter. You can skip the rest of this section if the command returned a version number. Otherwise &lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;download&lt;/a&gt; the lastest version of Git and follow this &lt;a href=&#34;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&#34;&gt;installation guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, check again with &lt;code&gt;git version&lt;/code&gt; if Git was installed successfully.&lt;/p&gt;

&lt;h3 id=&#34;git-graphical-front-ends&#34;&gt;Git Graphical Front Ends&lt;/h3&gt;

&lt;p&gt;There are several &lt;a href=&#34;https://git-scm.com/downloads/guis&#34;&gt;GUI clients&lt;/a&gt; that help you to operate Git. Not all are available for all operating systems and maybe differ in their usage. Thus, so we will use the command line since the commands are everywhere the same.&lt;/p&gt;

&lt;h3 id=&#34;install-hub-on-your-system-optional&#34;&gt;Install Hub on your system (optional)&lt;/h3&gt;

&lt;p&gt;Hub is a great tool for working with GitHub. The main site for it is &lt;a href=&#34;https://hub.github.com/&#34;&gt;www.hub.github.com&lt;/a&gt;. Feel free to install this little Git wrapper.&lt;/p&gt;

&lt;p&gt;On a Mac, install Hub using brew:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install hub
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create an alias (in Bash) so that typing git actually runs Hub:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo &amp;quot;alias git=&#39;hub&#39;&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Confirm the installation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git version 2.6.3
hub version 2.2.2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;set-up-your-working-copy&#34;&gt;Set up your working copy&lt;/h2&gt;

&lt;p&gt;The working copy is set up locally on your computer. It&amp;rsquo;s what you&amp;rsquo;ll edit, compile, and end up pushing back to GitHub. The main steps are cloning the repository and creating your fork as a remote.&lt;/p&gt;

&lt;h3 id=&#34;clone-the-repository&#34;&gt;Clone the repository&lt;/h3&gt;

&lt;p&gt;We assume that you&amp;rsquo;ve set up your &lt;code&gt;GOPATH&lt;/code&gt; (see the section above if you&amp;rsquo;re unsure about this). You should now copy the Hugo repository down to your computer. You&amp;rsquo;ll hear this called &amp;ldquo;clone the repo&amp;rdquo;. GitHub&amp;rsquo;s &lt;a href=&#34;https://help.github.com/articles/cloning-a-repository/&#34;&gt;help pages&lt;/a&gt; give us a short explanation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When you create a repository on GitHub, it exists as a remote repository. You can create a local clone of your repository on your computer and sync between the two locations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We&amp;rsquo;re going to clone the &lt;a href=&#34;https://github.com/spf13/hugo&#34;&gt;master Hugo repository&lt;/a&gt;. That seems counter-intuitive, since you won&amp;rsquo;t have commit rights on it. But it&amp;rsquo;s required for the Go workflow. You&amp;rsquo;ll work on a copy of the master and push your changes to your own repository on GitHub.&lt;/p&gt;

&lt;p&gt;So, let&amp;rsquo;s clone that master repository:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get -v -u github.com/spf13/hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;fork-the-repository&#34;&gt;Fork the repository&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;re not fimiliar with this term, GitHub&amp;rsquo;s &lt;a href=&#34;https://help.github.com/articles/fork-a-repo/&#34;&gt;help pages&lt;/a&gt; provide again a simple explanation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;fork-by-hand&#34;&gt;Fork by hand&lt;/h4&gt;

&lt;p&gt;Open the &lt;a href=&#34;https://github.com/spf13/hugo&#34;&gt;Hugo repository&lt;/a&gt; on Github and click on the &amp;ldquo;Fork&amp;rdquo; button in the top right.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://delphic-digital.github.io/Skeletor.docs/img/tutorials/how-to-contribute-to-hugo/forking-a-repository.png&#34; alt=&#34;Fork button&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now open your fork repository on GitHub and copy the remote url of your fork. You can choose between HTTPS and SSH as protocol that Git should use for the following operations. HTTPS works always &lt;a href=&#34;https://help.github.com/articles/which-remote-url-should-i-use/&#34;&gt;if you&amp;rsquo;re not sure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://delphic-digital.github.io/Skeletor.docs/img/tutorials/how-to-contribute-to-hugo/copy-remote-url.png&#34; alt=&#34;Copy remote url&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Switch back to the terminal and move into the directory of the cloned master repository from the last step.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd $GOPATH/src/github.com/spf13/hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now Git needs to know that our fork exists by adding the copied remote url:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git remote add &amp;lt;YOUR-GITHUB-USERNAME&amp;gt; &amp;lt;COPIED REMOTE-URL&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;fork-with-hub&#34;&gt;Fork with Hub&lt;/h4&gt;

&lt;p&gt;Alternatively, you can use the Git wrapper Hub. Hub makes forking a repository easy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git fork
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That command will log in to GitHub using your account, create a fork of the repository that you&amp;rsquo;re currently working in, and add it as a remote to your working copy.&lt;/p&gt;

&lt;h4 id=&#34;trust-but-verify&#34;&gt;Trust, but verify&lt;/h4&gt;

&lt;p&gt;Let&amp;rsquo;s check if everything went right by listing all known remotes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git remote -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output should look similar:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;digitalcraftsman	git@github.com:digitalcraftsman/hugo.git (fetch)
digitalcraftsman	git@github.com:digitalcraftsman/hugo.git (push)
origin	https://github.com/spf13/hugo (fetch)
origin	https://github.com/spf13/hugo (push)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-contribution-workflow&#34;&gt;The contribution workflow&lt;/h2&gt;

&lt;h3 id=&#34;create-a-new-branch&#34;&gt;Create a new branch&lt;/h3&gt;

&lt;p&gt;You should never develop against the &amp;ldquo;master&amp;rdquo; branch. The development team will not accept a pull request against that branch. Instead, create a descriptive named branch and work on it.&lt;/p&gt;

&lt;p&gt;First, you should always pull the latest changes from the master repository:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git checkout master
git pull
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can create a new branch for your additions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git checkout -b &amp;lt;BRANCH-NAME&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can check on which branch your are with &lt;code&gt;git branch&lt;/code&gt;. You should see a list of all local branches. The current branch is indicated with a little asterisk.&lt;/p&gt;

&lt;h3 id=&#34;contributing-to-the-documentation&#34;&gt;Contributing to the documentation&lt;/h3&gt;

&lt;p&gt;Perhaps you want to start contributing to the docs. Then you can ignore most of the following steps. You can find the documentation within the cloned repository in the subfolder &lt;code&gt;docs&lt;/code&gt;. Change the directory with &lt;code&gt;cd docs&lt;/code&gt;. Install the &lt;a href=&#34;https://delphic-digital.github.io/Skeletor.docs/Skeletor.docs/overview/installing/&#34;&gt;latest release&lt;/a&gt;. Or read on and build Hugo from source.&lt;/p&gt;

&lt;p&gt;You can start Hugo&amp;rsquo;s built-in server via &lt;code&gt;hugo server&lt;/code&gt;. Browse the documentation by entering &lt;a href=&#34;http://localhost:1313&#34;&gt;http://localhost:1313&lt;/a&gt; in the address bar of your browser. The server automatically updates the page if you change it&amp;rsquo;s content.&lt;/p&gt;

&lt;h3 id=&#34;building-hugo&#34;&gt;Building Hugo&lt;/h3&gt;

&lt;p&gt;While making changes in the codebase it&amp;rsquo;s a good idea to build the binary to test them:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go build -o hugo main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;testing&#34;&gt;Testing&lt;/h3&gt;

&lt;p&gt;Sometimes changes on the codebase can cause unintended side effects. Or they don&amp;rsquo;t work as expected. Most functions have their own test cases. You can find them in files ending with &lt;code&gt;_test.go&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Make sure the commands &lt;code&gt;go test ./...&lt;/code&gt; passes, and &lt;code&gt;go build&lt;/code&gt; completes.&lt;/p&gt;

&lt;h3 id=&#34;formatting&#34;&gt;Formatting&lt;/h3&gt;

&lt;p&gt;The Go code styleguide maybe is opiniated but it ensures that the codebase looks the same, regardless who wrote the code. Go comes with it&amp;rsquo;s own formatting tool. Let&amp;rsquo;s apply the styleguide to our addtions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go fmt ./...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you made your additions commit your changes. Make sure that you follow our &lt;a href=&#34;https://github.com/spf13/hugo/blob/master/CONTRIBUTING.md&#34;&gt;code contribution guidelines&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Add all changed files
git add --all
git commit --message &amp;quot;YOUR COMMIT MESSAGE&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The commit message should describe what the commit does (e.g. add feature XYZ), not how it is done.&lt;/p&gt;

&lt;h3 id=&#34;modify-commits&#34;&gt;Modify commits&lt;/h3&gt;

&lt;p&gt;You noticed some commit messages don&amp;rsquo;t fulfill the code contribution guidelines or you just forget something to add some files? No problem. Git provides the necessary tools to fix such problems. The next two methods cover all common cases.&lt;/p&gt;

&lt;p&gt;If you are unsure what a command does leave the commit as it is. We can fix your commits later in the pull request.&lt;/p&gt;

&lt;h4 id=&#34;modifying-the-last-commit&#34;&gt;Modifying the last commit&lt;/h4&gt;

&lt;p&gt;Let&amp;rsquo;s say you want to modify the last commit message. Run the following command and replace the current message:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git commit --amend -m&amp;quot;YOUR NEW COMMIT MESSAGE&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Take a look at the commit log to see the change:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git log
# Exit with q
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After making the last commit you may forgot something. There is no need to create a new commit. Just add the latest changes and merge them into the intended commit:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git add --all
git commit --amend
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;modifying-multiple-commits&#34;&gt;Modifying multiple commits&lt;/h4&gt;

&lt;p&gt;This is a bit more advanced. Git allows you to &lt;a href=&#34;https://git-scm.com/docs/git-rebase&#34;&gt;rebase&lt;/a&gt; commits interactively. In other words: it allows you to rewrite the commit history. &lt;strong&gt;Take care of your actions. They can cause unintended changes. Skip this section if you&amp;rsquo;re not sure!&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git rebase --interactive @~6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;6&lt;/code&gt; at the end of the command represents the number of commits that should be modified. An editor should open and present a list of last six commit messages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pick 80d02a1 tpl: Add hasPrefix to the template funcs&#39; &amp;quot;smoke test&amp;quot;
pick aaee038 tpl: Sort the smoke tests
pick f0dbf2c tpl: Add the other test case for hasPrefix
pick 911c35b Add &amp;quot;How to contribute to Hugo&amp;quot; tutorial
pick 33c8973 Begin workflow
pick 3502f2e Refactoring and typo fixes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the case above we should merge the last to commits in the commit of this tutorial (&lt;code&gt;Add &amp;quot;How to contribute to Hugo&amp;quot; tutorial&lt;/code&gt;). You can &amp;ldquo;squash&amp;rdquo; commits, i.e. merge two or more commits into a single one.&lt;/p&gt;

&lt;p&gt;All operations are written before the commit message. Replace &amp;ldquo;pick&amp;rdquo; with an operation. In this case &lt;code&gt;squash&lt;/code&gt; or &lt;code&gt;s&lt;/code&gt; for short:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pick 80d02a1 tpl: Add hasPrefix to the template funcs&#39; &amp;quot;smoke test&amp;quot;
pick aaee038 tpl: Sort the smoke tests
pick f0dbf2c tpl: Add the other test case for hasPrefix
pick 911c35b Add &amp;quot;How to contribute to Hugo&amp;quot; tutorial
squash 33c8973 Begin workflow
squash 3502f2e Refactoring and typo fixes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also want to rewrite the commits message of the third last commit. We forgot &amp;ldquo;docs:&amp;rdquo; as prefix according to the code contribution guidelines. The operation to rewrite a commit is called &lt;code&gt;reword&lt;/code&gt; (or &lt;code&gt;r&lt;/code&gt; as shortcut).&lt;/p&gt;

&lt;p&gt;You should end up with a similar setup:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pick 80d02a1 tpl: Add hasPrefix to the template funcs&#39; &amp;quot;smoke test&amp;quot;
pick aaee038 tpl: Sort the smoke tests
pick f0dbf2c tpl: Add the other test case for hasPrefix
reword 911c35b Add &amp;quot;How to contribute to Hugo&amp;quot; tutorial
squash 33c8973 Begin workflow
squash 3502f2e Refactoring and typo fixes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Close the editor. It should open again with a new tab. A text is instructing you to define a new commit message for the last two commits that should be merged (a.k.a. squashed). Save the file (&lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;S&lt;/kbd&gt;) and close the editor again.&lt;/p&gt;

&lt;p&gt;A last time a new tab opens. Enter a new commit message and save again. Your terminal should contain a status message. Hopefully this one:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Successfully rebased and updated refs/heads/&amp;lt;BRANCHNAME&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check the commit log if everything looks as expected. Should an error occur you can abort this rebase with &lt;code&gt;git rebase --abort&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;push-commits&#34;&gt;Push commits&lt;/h3&gt;

&lt;p&gt;To push our commits to the fork on GitHub we need to speficy a destination. A destination is defined by the remote and a branch name. Earlier, the defined that the remote url of our fork is the same as our GitHub handle, in my case &lt;code&gt;digitalcraftsman&lt;/code&gt;. The branch should have the same as our local one. This makes it easy to identify corresponding branches.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git push --set-upstream &amp;lt;YOUR-GITHUB-USERNAME&amp;gt; &amp;lt;BRANCHNAME&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now Git knows the destination. Next time when you to push commits you just need to enter &lt;code&gt;git push&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you modified your commit history in the last step GitHub will reject your try to push. This is a safety-feature because the commit history isn&amp;rsquo;t the same and new commits can&amp;rsquo;t be appended as usual. You can enforce this push explicitly with &lt;code&gt;git push --force&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;open-a-pull-request&#34;&gt;Open a pull request&lt;/h2&gt;

&lt;p&gt;We made a lot of progress. Good work. In this step we finally open a pull request to submit our additions. Open the &lt;a href=&#34;https://github.com/spf13/hugo/&#34;&gt;Hugo master repository&lt;/a&gt; on GitHub in your browser.&lt;/p&gt;

&lt;p&gt;You should find a green button labeld with &amp;ldquo;New pull request&amp;rdquo;. But GitHub is clever and probably suggests you a pull request like in the beige box below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://delphic-digital.github.io/Skeletor.docs/img/tutorials/how-to-contribute-to-hugo/open-pull-request.png&#34; alt=&#34;Open a pull request&#34;&gt;&lt;/p&gt;

&lt;p&gt;The new page summaries the most important information of your pull request. Scroll down and you find the additions of all your commits. Make sure everything looks as expected and click on &amp;ldquo;Create pull request&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;accept-the-contributor-license-agreement&#34;&gt;Accept the contributor license agreement&lt;/h3&gt;

&lt;p&gt;Last but not least you should accept the contributor license agreement (CLA). A new comment should be added automatically to your pull request. Click on the yellow badge, accept the agreement and authenticate yourself with your GitHub account. It just takes a few clicks and only needs to be done once.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://delphic-digital.github.io/Skeletor.docs/img/tutorials/how-to-contribute-to-hugo/accept-cla.png&#34; alt=&#34;Accept the CLA&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;automatic-builds&#34;&gt;Automatic builds&lt;/h3&gt;

&lt;p&gt;We use the &lt;a href=&#34;https://travis-ci.org/spf13/hugo&#34;&gt;Travis CI loop&lt;/a&gt; (Linux and OS&amp;nbsp;X) and &lt;a href=&#34;https://ci.appveyor.com/project/spf13/hugo/branch/master&#34;&gt;AppVeyor&lt;/a&gt; (Windows) to compile Hugo with your additions. This should ensure that everything works as expected before merging your pull request. This in most cases only relevant if you made changes to the codebase of Hugo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://delphic-digital.github.io/Skeletor.docs/img/tutorials/how-to-contribute-to-hugo/ci-errors.png&#34; alt=&#34;Automic builds and their status&#34;&gt;&lt;/p&gt;

&lt;p&gt;Above you can see that Travis wasn&amp;rsquo;t able to compile the changes in this pull request. Click on &amp;ldquo;Details&amp;rdquo; and try to investigate why the build failed. But it doesn&amp;rsquo;t have to be your fault. Mostly, the &lt;code&gt;master&lt;/code&gt; branch that we used as foundation for your pull request should build without problems.&lt;/p&gt;

&lt;p&gt;If you have questions leave a comment in the pull request. We are willing to assist you.&lt;/p&gt;

&lt;h2 id=&#34;where-to-start&#34;&gt;Where to start?&lt;/h2&gt;

&lt;p&gt;Thank you for reading this tutorial. Hopefully, we see us again on GitHub. There are plenty of &lt;a href=&#34;https://github.com/spf13/hugo/issues&#34;&gt;open issues&lt;/a&gt; on GitHub. Feel free to open an issue if you think you found a bug or you have a new idea to improve Hugo. We are happy to hear from you.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Continuous deployment with Bitbucket &amp; Aerobatic</title>
      <link>https://delphic-digital.github.io/Skeletor.docs/tutorials/hosting-on-bitbucket/</link>
      <pubDate>Fri, 11 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://delphic-digital.github.io/Skeletor.docs/tutorials/hosting-on-bitbucket/</guid>
      <description>

&lt;h1 id=&#34;continuous-deployment-with-bitbucket-aerobatic&#34;&gt;Continuous deployment with Bitbucket &amp;amp; Aerobatic&lt;/h1&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this tutorial, we will use &lt;a href=&#34;https://bitbucket.org/&#34;&gt;Bitbucket&lt;/a&gt; and &lt;a href=&#34;https://www.aerobatic.com&#34;&gt;Aerobatic&lt;/a&gt; to build, deploy, and host a Hugo site. Aerobatic is a static hosting service that is installed as an add-on to Bitbucket and provides a free hosting tier with custom domain and wildcard SSL certificate.&lt;/p&gt;

&lt;p&gt;It is assumed that you know how to use git for version control and have a Bitbucket account. It is also assumed that you have gone through the &lt;a href=&#34;https://delphic-digital.github.io/Skeletor.docs/Skeletor.docs/overview/quickstart/&#34;&gt;quickstart guide&lt;/a&gt; and already have a Hugo site on your local machine.&lt;/p&gt;

&lt;h2 id=&#34;create-package-json&#34;&gt;Create package.json&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd your-hugo-site
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the root directory of your Hugo site, create a &lt;code&gt;package.json&lt;/code&gt; file. The &lt;code&gt;package.json&lt;/code&gt; informs Aerobatic to build a Hugo site.&lt;/p&gt;

&lt;p&gt;To do so, declare the following snippet in your &lt;code&gt;package.json&lt;/code&gt; manifest. You can, of course, use any &lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;Hugo theme&lt;/a&gt; of your choosing with the &lt;code&gt;themeRepo&lt;/code&gt; option. Just tell Aerobatic where the theme’s git repo is.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;_aerobatic&amp;quot;: {
    &amp;quot;build&amp;quot;: {
      &amp;quot;engine&amp;quot;: &amp;quot;hugo&amp;quot;,
      &amp;quot;themeRepo&amp;quot;: &amp;quot;https://github.com/alexurquhart/hugo-geo.git&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;push-hugo-site-to-bitbucket&#34;&gt;Push Hugo site to Bitbucket&lt;/h2&gt;

&lt;p&gt;We will now create a git repository and then push our code to Bitbucket. Because Aerobatic both builds &lt;em&gt;and&lt;/em&gt; hosts Hugo sites, there is no need to push the compiled assets in the &lt;code&gt;/public&lt;/code&gt; folder.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# initialize new git repository
git init

# add /public directory to our .gitignore file
echo &amp;quot;/public&amp;quot; &amp;gt;&amp;gt; .gitignore

# commit and push code to master branch
git commit -a -m &amp;quot;Initial commit&amp;quot;
git remote add origin git@bitbucket.org:YourUsername/your-hugo-site.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-aerobatic&#34;&gt;Install Aerobatic&lt;/h2&gt;

&lt;p&gt;Clicking &lt;a href=&#34;https://aerobatic.io/bb&#34;&gt;this link&lt;/a&gt; will automatically install the Aerobatic add-on to your Bitbucket account. Alternatively, you can also install Aerobatic from the Bitbucket &lt;a href=&#34;https://bitbucket.org/account/addon-directory&#34;&gt;add-on directory&lt;/a&gt;. Click &lt;strong&gt;Grant Access&lt;/strong&gt; in the install dialog.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://delphic-digital.github.io/Skeletor.docs/img/tutorials/hosting-on-bitbucket/bitbucket-grant-access.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;setup-hosting&#34;&gt;Setup hosting&lt;/h2&gt;

&lt;p&gt;Select your repository from the dropdown menu and click &lt;strong&gt;Setup hosting&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://delphic-digital.github.io/Skeletor.docs/img/tutorials/hosting-on-bitbucket/bitbucket-setup-hosting.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You will then be directed to the &lt;strong&gt;Create Website&lt;/strong&gt; screen. This is a one-time step. With each subsequent &lt;code&gt;git push&lt;/code&gt; to Bitbucket, Aerobatic will automatically build and deploy a new version of your site instantly.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Give your website a name.&lt;/li&gt;
&lt;li&gt;In this example, we won&amp;rsquo;t setup a custom domain, but &lt;a href=&#34;https://www.aerobatic.com/docs/custom-domains-ssl&#34;&gt;you can&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Leave the deploy branch as master.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Click the &lt;strong&gt;Create website&lt;/strong&gt; button:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://delphic-digital.github.io/Skeletor.docs/img/tutorials/hosting-on-bitbucket/bitbucket-create-website.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In less than 30 seconds, your Hugo site will be built and live on the Internet at &lt;a href=&#34;http://your-hugo-site.aerobatic.io&#34;&gt;http://your-hugo-site.aerobatic.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://delphic-digital.github.io/Skeletor.docs/img/tutorials/hosting-on-bitbucket/bitbucket-site-built.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://delphic-digital.github.io/Skeletor.docs/img/tutorials/hosting-on-bitbucket/bitbucket-site-live.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;suggested-next-steps&#34;&gt;Suggested next steps&lt;/h2&gt;

&lt;p&gt;The code for this example can be found in this &lt;a href=&#34;https://bitbucket.org/dundonian/wee-hugo/src&#34;&gt;Bitbucket repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Aerobatic provides a number of plugins such as &lt;a href=&#34;https://www.aerobatic.com/docs/custom-error-pages&#34;&gt;custom error pages&lt;/a&gt;, &lt;a href=&#34;https://www.aerobatic.com/docs/redirects&#34;&gt;custom redirects&lt;/a&gt;, &lt;a href=&#34;https://www.aerobatic.com/docs/http-basic-authentication&#34;&gt;basic authentication&lt;/a&gt;, and many other &lt;a href=&#34;https://www.aerobatic.com/features/&#34;&gt;features&lt;/a&gt;. In the case of authentication, &lt;a href=&#34;https://www.aerobatic.com/blog/password-protect-a-hugo-site&#34;&gt;this blog post&lt;/a&gt; describes how to password protect all, or part, of your Hugo site.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://delphic-digital.github.io/Skeletor.docs/tutorials/creating-a-new-theme/</link>
      <pubDate>Thu, 26 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://delphic-digital.github.io/Skeletor.docs/tutorials/creating-a-new-theme/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll start with creating a new site with a very basic template. Then we&amp;rsquo;ll add in a few articles and an about page. With small variations on that, you will be able to create many different types of web sites.&lt;/p&gt;

&lt;p&gt;In this tutorial, commands that you enter will start with the &lt;code&gt;$&lt;/code&gt; prompt. The output will follow. Lines that start with &lt;code&gt;#&lt;/code&gt; are comments that I&amp;rsquo;ve added to explain a point. When I show updates to a file, the &lt;code&gt;:wq&lt;/code&gt; on the last line means to save the file.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# this is a comment
$ echo this is a command
this is a command

# edit the file
$ vi foo.md
+++
date = &amp;quot;2015-11-26&amp;quot;
title = &amp;quot;creating a new theme&amp;quot;
+++

bah and humbug
:wq

# show it
$ cat foo.md
+++
date = &amp;quot;2015-11-26&amp;quot;
title = &amp;quot;creating a new theme&amp;quot;
+++

bah and humbug
$
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;some-definitions&#34;&gt;Some Definitions&lt;/h2&gt;

&lt;p&gt;There are a few concepts that you need to understand before creating a theme.&lt;/p&gt;

&lt;h3 id=&#34;skins&#34;&gt;Skins&lt;/h3&gt;

&lt;p&gt;Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.&lt;/p&gt;

&lt;p&gt;You have two ways to create a skin. The simplest way is to create it in the &lt;code&gt;layouts/&lt;/code&gt; directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the &lt;code&gt;layouts/&lt;/code&gt; directory so it will always find the skin.&lt;/p&gt;

&lt;p&gt;Your second choice is to create it in a sub-directory of the &lt;code&gt;themes/&lt;/code&gt; directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?&lt;/p&gt;

&lt;p&gt;The difference between creating a skin in &lt;code&gt;layouts/&lt;/code&gt; and creating it in &lt;code&gt;themes/&lt;/code&gt; is very subtle. A skin in &lt;code&gt;layouts/&lt;/code&gt; can’t be customized without updating the templates and static files that it is built from. A skin created in &lt;code&gt;themes/&lt;/code&gt;, on the other hand, can be and that makes it easier for other people to use it.&lt;/p&gt;

&lt;p&gt;The rest of this tutorial will call a skin created in the &lt;code&gt;themes/&lt;/code&gt; directory a theme.&lt;/p&gt;

&lt;p&gt;Note that you can use this tutorial to create a skin in the &lt;code&gt;layouts/&lt;/code&gt; directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.&lt;/p&gt;

&lt;h3 id=&#34;the-home-page&#34;&gt;The Home Page&lt;/h3&gt;

&lt;p&gt;The home page, or landing page, is the first page that many visitors to a site see. It is the &lt;code&gt;index.html&lt;/code&gt; file in the root directory of the web site. Since Hugo writes files to the &lt;code&gt;public/&lt;/code&gt; directory, our home page is &lt;code&gt;public/index.html&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;site-configuration-file&#34;&gt;Site Configuration File&lt;/h3&gt;

&lt;p&gt;When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.&lt;/p&gt;

&lt;p&gt;Hugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your &lt;code&gt;content/&lt;/code&gt; directory and template files in your &lt;code&gt;themes/&lt;/code&gt; directory. It will create HTML files in your &lt;code&gt;public/&lt;/code&gt; directory. You can change this by specifying alternate locations in the configuration file.&lt;/p&gt;

&lt;h3 id=&#34;content&#34;&gt;Content&lt;/h3&gt;

&lt;p&gt;Content is stored in text files that contain two sections. The first section is the &amp;ldquo;front matter,&amp;rdquo; which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.&lt;/p&gt;

&lt;h4 id=&#34;front-matter&#34;&gt;Front Matter&lt;/h4&gt;

&lt;p&gt;The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by &amp;ldquo;&lt;code&gt;+++&lt;/code&gt;&amp;rdquo;, YAML by &amp;ldquo;&lt;code&gt;---&lt;/code&gt;&amp;rdquo;, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.&lt;/p&gt;

&lt;p&gt;The information in the front matter is passed into the template before the content is rendered into HTML.&lt;/p&gt;

&lt;h4 id=&#34;markdown&#34;&gt;Markdown&lt;/h4&gt;

&lt;p&gt;Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.&lt;/p&gt;

&lt;h3 id=&#34;template-files&#34;&gt;Template Files&lt;/h3&gt;

&lt;p&gt;Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it&amp;rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.&lt;/p&gt;

&lt;p&gt;There are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.&lt;/p&gt;

&lt;p&gt;Hugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.&lt;/p&gt;

&lt;p&gt;Please note that you can use the front matter to influence Hugo’s choice of templates.&lt;/p&gt;

&lt;h4 id=&#34;single-template&#34;&gt;Single Template&lt;/h4&gt;

&lt;p&gt;A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.&lt;/p&gt;

&lt;h4 id=&#34;list-template&#34;&gt;List Template&lt;/h4&gt;

&lt;p&gt;A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.&lt;/p&gt;

&lt;p&gt;The homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.&lt;/p&gt;

&lt;h4 id=&#34;partial-template&#34;&gt;Partial Template&lt;/h4&gt;

&lt;p&gt;A partial template is a template that can be included in other templates. Partial templates must be called using the &amp;ldquo;partial&amp;rdquo; template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.&lt;/p&gt;

&lt;h2 id=&#34;create-a-new-site&#34;&gt;Create a New Site&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s use Hugo to create a new web site. The &lt;code&gt;hugo new site&lt;/code&gt; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo new site hugo-0.16
$ ls -l hugo-0.16
total 8
drwxr-xr-x  2 mdhender  wheel   68 Nov 27 20:27 archetypes
-rw-r--r--  1 mdhender  wheel  107 Nov 27 20:27 config.toml
drwxr-xr-x  2 mdhender  wheel   68 Nov 27 20:27 content
drwxr-xr-x  2 mdhender  wheel   68 Nov 27 20:27 data
drwxr-xr-x  2 mdhender  wheel   68 Nov 27 20:27 layouts
drwxr-xr-x  2 mdhender  wheel   68 Nov 27 20:27 static
$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Take a look in the &lt;code&gt;content/&lt;/code&gt; directory to confirm that it is empty.&lt;/p&gt;

&lt;p&gt;The other directories (&lt;code&gt;archetypes/&lt;/code&gt;, &lt;code&gt;data/&lt;/code&gt;, &lt;code&gt;layouts/&lt;/code&gt;, and &lt;code&gt;static/&lt;/code&gt;) are used when customizing a named theme. That&amp;rsquo;s a topic for a different tutorial, so please ignore them for now.&lt;/p&gt;

&lt;h3 id=&#34;generate-the-html-for-the-new-site&#34;&gt;Generate the HTML For the New Site&lt;/h3&gt;

&lt;p&gt;Running the &lt;code&gt;hugo&lt;/code&gt; command with no options will read all the available content and generate the HTML files. It will also copy all static files (that&amp;rsquo;s everything that&amp;rsquo;s not content). Since we have an empty site, it won&amp;rsquo;t do much, but it will do it very quickly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd hugo-0.16
$ hugo --verbose
INFO: 2015/11/27 Using config file: /tmp/hugo-0.16/config.toml
INFO: 2015/11/27 syncing from /tmp/hugo-0.16/static/ to /tmp/hugo-0.16/public/
WARN: 2015/11/27 Unable to locate layout for homepage: [index.html _default/list.html]
WARN: 2015/11/27 Unable to locate layout for 404 page: [404.html]
0 draft content
0 future content
0 pages created
0 paginator pages created
0 tags created
0 categories created
in 4 ms
$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &amp;ldquo;&lt;code&gt;--verbose&lt;/code&gt;&amp;rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with &amp;ldquo;INFO:&amp;rdquo; or &amp;ldquo;WARN:&amp;rdquo; is present because we used that flag. The lines that start with &amp;ldquo;WARN:&amp;rdquo; are warning messages. We&amp;rsquo;ll go over them later.&lt;/p&gt;

&lt;p&gt;We can verify that the command worked by looking at the directory again.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls -l
total 8
drwxr-xr-x  2 mdhender  wheel   68 Nov 27 20:27 archetypes
-rw-r--r--  1 mdhender  wheel  107 Nov 27 20:27 config.toml
drwxr-xr-x  2 mdhender  wheel   68 Nov 27 20:27 content
drwxr-xr-x  2 mdhender  wheel   68 Nov 27 20:27 data
drwxr-xr-x  2 mdhender  wheel   68 Nov 27 20:27 layouts
drwxr-xr-x  6 mdhender  wheel  204 Nov 27 20:29 public
drwxr-xr-x  2 mdhender  wheel   68 Nov 27 20:27 static
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See that new &lt;code&gt;public/&lt;/code&gt; directory? Hugo placed all generated content there. When you&amp;rsquo;re ready to publish your web site, that&amp;rsquo;s the place to start. For now, though, let&amp;rsquo;s just confirm that we have what we&amp;rsquo;d expect from a site with no content.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls -l public/
total 16
-rw-r--r--  1 mdhender  wheel    0 Nov 27 20:29 404.html
-rw-r--r--  1 mdhender  wheel    0 Nov 27 20:29 index.html
-rw-r--r--  1 mdhender  wheel  511 Nov 27 20:29 index.xml
-rw-r--r--  1 mdhender  wheel  237 Nov 27 20:29 sitemap.xml
$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hugo created two XML files, which is standard, and empty HTML files. The XML files are used for RSS feeds. Hugo has an opinion on what those feeds should contain, so it populates those files. Hugo has no opinion on what your web site looks like (or contains), so it leaves those files empty.&lt;/p&gt;

&lt;p&gt;If you look back over the output from the &lt;code&gt;hugo server&lt;/code&gt; command, you will notice that Hugo said:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;0 pages created
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s because Hugo doesn&amp;rsquo;t count the homepage, the 404 error page, or the RSS feed files as pages.&lt;/p&gt;

&lt;h3 id=&#34;test-the-new-site&#34;&gt;Test the New Site&lt;/h3&gt;

&lt;p&gt;Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the &lt;code&gt;hugo server&lt;/code&gt; command. If it is successful, you will see output similar to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo server --verbose
INFO: 2015/11/27 Using config file: /tmp/hugo-0.16/config.toml
INFO: 2015/11/27 syncing from /tmp/hugo-0.16/static/ to /
WARN: 2015/11/27 Unable to locate layout for homepage: [index.html _default/list.html]
WARN: 2015/11/27 Unable to locate layout for 404 page: [404.html]
0 draft content
0 future content
0 pages created
0 paginator pages created
0 tags created
0 categories created
in 3 ms
Watching for changes in /tmp/hugo-0.16/{data,content,layouts,static}
Serving pages from memory
Web Server is available at http://localhost:1313/ (bind address 127.0.0.1)
Press Ctrl+C to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Connect to the listed URL (it&amp;rsquo;s on the line that starts with &lt;code&gt;Web Server is available&lt;/code&gt;.). If everything is working correctly, you should get a page that shows nothing.&lt;/p&gt;

&lt;p&gt;Let’s go back and look at those warnings again.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;WARN: 2015/11/27 Unable to locate layout for homepage: [index.html _default/list.html]
WARN: 2015/11/27 Unable to locate layout for 404 page: [404.html]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That second warning is easier to explain. We haven’t created a template to be used to generate &amp;ldquo;page not found errors.&amp;rdquo; The 404 message is a topic for a separate tutorial.&lt;/p&gt;

&lt;p&gt;Now for the first warning. It is for the home page. You can tell because the first layout that it looked for was &lt;code&gt;index.html&lt;/code&gt;. That’s only used by the home page.&lt;/p&gt;

&lt;p&gt;I like that the verbose flag causes Hugo to list the files that it&amp;rsquo;s searching for. For the home page, they are &lt;code&gt;index.html&lt;/code&gt; and &lt;code&gt;_default/list.html&lt;/code&gt;. There are some rules that we&amp;rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn&amp;rsquo;t find a template for the home page and it told you so.&lt;/p&gt;

&lt;p&gt;At this point, you&amp;rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.&lt;/p&gt;

&lt;h2 id=&#34;create-a-new-theme&#34;&gt;Create a New Theme&lt;/h2&gt;

&lt;p&gt;Hugo doesn&amp;rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re going to create a new theme called &amp;ldquo;zafta.&amp;rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.&lt;/p&gt;

&lt;p&gt;All themes have opinions on content and layout. For example, Zafta uses &amp;ldquo;article&amp;rdquo; over &amp;ldquo;blog&amp;rdquo; or &amp;ldquo;post.&amp;rdquo; Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.&lt;/p&gt;

&lt;h3 id=&#34;create-a-skeleton&#34;&gt;Create a Skeleton&lt;/h3&gt;

&lt;p&gt;Use the &lt;code&gt;hugo new theme&lt;/code&gt; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo new theme zafta

$ ls -l
total 8
drwxr-xr-x  2 mdhender  wheel   68 Nov 27 20:27 archetypes
-rw-r--r--  1 mdhender  wheel  107 Nov 27 20:27 config.toml
drwxr-xr-x  2 mdhender  wheel   68 Nov 27 20:27 content
drwxr-xr-x  2 mdhender  wheel   68 Nov 27 20:27 data
drwxr-xr-x  2 mdhender  wheel   68 Nov 27 20:27 layouts
drwxr-xr-x  6 mdhender  wheel  204 Nov 27 20:29 public
drwxr-xr-x  2 mdhender  wheel   68 Nov 27 20:27 static
drwxr-xr-x  3 mdhender  wheel  102 Nov 27 20:35 themes


$ find themes -type f | xargs ls -l
-rw-r--r--  1 mdhender  wheel  1081 Nov 27 20:35 themes/zafta/LICENSE.md
-rw-r--r--  1 mdhender  wheel     8 Nov 27 20:35 themes/zafta/archetypes/default.md
-rw-r--r--  1 mdhender  wheel     0 Nov 27 20:35 themes/zafta/layouts/404.html
-rw-r--r--  1 mdhender  wheel     0 Nov 27 20:35 themes/zafta/layouts/_default/list.html
-rw-r--r--  1 mdhender  wheel     0 Nov 27 20:35 themes/zafta/layouts/_default/single.html
-rw-r--r--  1 mdhender  wheel     0 Nov 27 20:35 themes/zafta/layouts/index.html
-rw-r--r--  1 mdhender  wheel     0 Nov 27 20:35 themes/zafta/layouts/partials/footer.html
-rw-r--r--  1 mdhender  wheel     0 Nov 27 20:35 themes/zafta/layouts/partials/header.html
-rw-r--r--  1 mdhender  wheel   450 Nov 27 20:35 themes/zafta/theme.toml
$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The skeleton includes templates (the files ending in &lt;code&gt;.html&lt;/code&gt;), license file, a description of your theme (the &lt;code&gt;theme.toml&lt;/code&gt; file), and a default archetype file.&lt;/p&gt;

&lt;p&gt;When you&amp;rsquo;re creating a real theme, please remember to fill out the &lt;code&gt;theme.toml&lt;/code&gt; and &lt;code&gt;LICENSE.md&lt;/code&gt; files. They&amp;rsquo;re optional, but if you&amp;rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It&amp;rsquo;s also nice to declare the license so that people will know how they can use the theme.&lt;/p&gt;

&lt;p&gt;Note that the theme skeleton&amp;rsquo;s template files are empty. Don&amp;rsquo;t worry, we&amp;rsquo;ll be changing that shortly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ find themes/zafta -name &#39;*.html&#39; | xargs ls -l
-rw-r--r--  1 mdhender  wheel  0 Nov 27 20:35 themes/zafta/layouts/404.html
-rw-r--r--  1 mdhender  wheel  0 Nov 27 20:35 themes/zafta/layouts/_default/list.html
-rw-r--r--  1 mdhender  wheel  0 Nov 27 20:35 themes/zafta/layouts/_default/single.html
-rw-r--r--  1 mdhender  wheel  0 Nov 27 20:35 themes/zafta/layouts/index.html
-rw-r--r--  1 mdhender  wheel  0 Nov 27 20:35 themes/zafta/layouts/partials/footer.html
-rw-r--r--  1 mdhender  wheel  0 Nov 27 20:35 themes/zafta/layouts/partials/header.html
$
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;update-the-configuration-file-to-use-the-theme&#34;&gt;Update the Configuration File to Use the Theme&lt;/h3&gt;

&lt;p&gt;Now that we&amp;rsquo;ve got a theme to work with, it&amp;rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add &amp;ldquo;-t zafta&amp;rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don&amp;rsquo;t put it in the configuration file or specify it on the command line, you won&amp;rsquo;t use the template that you&amp;rsquo;re expecting to.&lt;/p&gt;

&lt;p&gt;Edit the file to add the named theme.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vi config.toml
theme = &amp;quot;zafta&amp;quot;
baseurl = &amp;quot;http://replace-this-with-your-hugo-site.com/&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;My New Hugo Site&amp;quot;
:wq

$
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;generate-the-site&#34;&gt;Generate the Site&lt;/h3&gt;

&lt;p&gt;Now that we have an empty theme, let&amp;rsquo;s generate the site again.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo --verbose
INFO: 2015/11/27 Using config file: /tmp/hugo-0.16/config.toml
INFO: 2015/11/27 syncing from /tmp/hugo-0.16/themes/zafta/static to /tmp/hugo-0.16/public/
INFO: 2015/11/27 syncing from /tmp/hugo-0.16/static/ to /tmp/hugo-0.16/public/
0 draft content
0 future content
0 pages created
0 paginator pages created
0 tags created
0 categories created
in 4 ms
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme&amp;rsquo;s directory (&lt;code&gt;themes/zafta/&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s check the &lt;code&gt;public/&lt;/code&gt; directory to see what Hugo&amp;rsquo;s created.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls -l public
total 16
-rw-r--r--  1 mdhender  wheel    0 Nov 27 20:42 404.html
drwxr-xr-x  2 mdhender  wheel   68 Nov 27 20:35 css
-rw-r--r--  1 mdhender  wheel    0 Nov 27 20:42 index.html
-rw-r--r--  1 mdhender  wheel  511 Nov 27 20:42 index.xml
drwxr-xr-x  2 mdhender  wheel   68 Nov 27 20:35 js
-rw-r--r--  1 mdhender  wheel  237 Nov 27 20:42 sitemap.xml
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s similar to what we had without a theme. We&amp;rsquo;d expect that since our theme has only empty templates. But notice that Hugo created &lt;code&gt;css/&lt;/code&gt; and &lt;code&gt;js/&lt;/code&gt; directories. That&amp;rsquo;s due to our template having those in its &lt;code&gt;static/&lt;/code&gt; directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls -l themes/zafta/static/
total 0
drwxr-xr-x  2 mdhender  wheel  68 Nov 27 20:35 css
drwxr-xr-x  2 mdhender  wheel  68 Nov 27 20:35 js
$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The rule with static files is simple: Hugo copies them over without any changes.&lt;/p&gt;

&lt;h4 id=&#34;the-home-page-1&#34;&gt;The Home Page&lt;/h4&gt;

&lt;p&gt;Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file &lt;code&gt;layouts/index.html&lt;/code&gt; is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo&amp;rsquo;s warning message shows that it looks for two different templates:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;WARN: 2015/11/27 Unable to locate layout for homepage: [index.html _default/list.html]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ find . -name index.html | xargs ls -l
-rw-r--r--  1 mdhender  wheel  0 Nov 27 20:42 ./public/index.html
-rw-r--r--  1 mdhender  wheel  0 Nov 27 20:35 ./themes/zafta/layouts/index.html
$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;the-magic-of-static&#34;&gt;The Magic of Static&lt;/h4&gt;

&lt;p&gt;Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.&lt;/p&gt;

&lt;p&gt;Hugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo&amp;rsquo;s opinion is that you&amp;rsquo;ll store your CSS in a directory named &lt;code&gt;css/&lt;/code&gt; and your JavaScript in a directory named &lt;code&gt;js/&lt;/code&gt;. If you don&amp;rsquo;t like that, you can change the directory names in your theme&amp;rsquo;s &lt;code&gt;static/&lt;/code&gt; directory or even delete them completely. Hugo&amp;rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ find themes/zafta -type d | xargs ls -ld
drwxr-xr-x  7 mdhender  wheel  238 Nov 27 20:35 themes/zafta
drwxr-xr-x  3 mdhender  wheel  102 Nov 27 20:35 themes/zafta/archetypes
drwxr-xr-x  6 mdhender  wheel  204 Nov 27 20:35 themes/zafta/layouts
drwxr-xr-x  4 mdhender  wheel  136 Nov 27 20:35 themes/zafta/layouts/_default
drwxr-xr-x  4 mdhender  wheel  136 Nov 27 20:35 themes/zafta/layouts/partials
drwxr-xr-x  4 mdhender  wheel  136 Nov 27 20:35 themes/zafta/static
drwxr-xr-x  2 mdhender  wheel   68 Nov 27 20:35 themes/zafta/static/css
drwxr-xr-x  2 mdhender  wheel   68 Nov 27 20:35 themes/zafta/static/js
$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-theme-development-cycle&#34;&gt;The Theme Development Cycle&lt;/h2&gt;

&lt;p&gt;When you&amp;rsquo;re working on a theme, you will make changes in the theme&amp;rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Purge the &lt;code&gt;public/&lt;/code&gt; directory (optional, but useful if you want to start with a clean slate).&lt;/li&gt;
&lt;li&gt;Run the built in web server.&lt;/li&gt;
&lt;li&gt;Open your site in a browser.&lt;/li&gt;
&lt;li&gt;Update the theme.&lt;/li&gt;
&lt;li&gt;Glance at your browser window to see changes.&lt;/li&gt;
&lt;li&gt;Return to step 4.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.&lt;/p&gt;

&lt;p&gt;Check the main Hugo site for information on using Git with Hugo.&lt;/p&gt;

&lt;h3 id=&#34;purge-the-public-directory&#34;&gt;Purge the public/ Directory&lt;/h3&gt;

&lt;p&gt;When rendering the site, Hugo will create new files and update existing ones in the &lt;code&gt;public/&lt;/code&gt; directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. Cleaning out your public files prior to rendering can help.&lt;/p&gt;

&lt;p&gt;As of version 0.15, Hugo doesn&amp;rsquo;t write files when running in server mode. Instead, it keeps all the rendered files in memory. You can &amp;ldquo;clean&amp;rdquo; up files by stopping and restarting the server.&lt;/p&gt;

&lt;h3 id=&#34;hugo-s-watch-option&#34;&gt;Hugo&amp;rsquo;s Watch Option&lt;/h3&gt;

&lt;p&gt;Hugo&amp;rsquo;s &amp;ldquo;&lt;code&gt;--watch&lt;/code&gt;&amp;rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically. Since version 0.15, this has been the default option for &lt;code&gt;hugo server&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;live-reload&#34;&gt;Live Reload&lt;/h3&gt;

&lt;p&gt;Hugo&amp;rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, &amp;ldquo;Wow, that&amp;rsquo;s totally amazing.&amp;rdquo;&lt;/p&gt;

&lt;h3 id=&#34;development-commands&#34;&gt;Development Commands&lt;/h3&gt;

&lt;p&gt;Use the following commands as the basis for your workflow.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# purge old files. hugo will recreate the public directory.
#
$ rm -rf public
#
# run hugo in watch mode with live reload
#
$ hugo server --verbose
#
# hit Control+C to kill the server when you&#39;re done
#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I&amp;rsquo;ve said this before, it&amp;rsquo;s amazing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo server --verbose
INFO: 2015/11/27 Using config file: /tmp/hugo-0.16/config.toml
INFO: 2015/11/27 syncing from /tmp/hugo-0.16/themes/zafta/static to /
INFO: 2015/11/27 syncing from /tmp/hugo-0.16/static/ to /
0 draft content
0 future content
0 pages created
0 paginator pages created
0 tags created
0 categories created
in 4 ms
Watching for changes in /tmp/hugo-0.16/{data,content,layouts,static,themes}
Serving pages from memory
Web Server is available at http://localhost:1313/ (bind address 127.0.0.1)
Press Ctrl+C to stop

INFO: 2015/11/27 File System Event: [&amp;quot;/tmp/hugo-0.16/themes/zafta/layouts/index.html&amp;quot;: CHMOD &amp;quot;/tmp/hugo-0.16/themes/zafta/layouts/index.html&amp;quot;: WRITE]

Change detected, rebuilding site
2015-11-27 20:57 -0600
0 draft content
0 future content
0 pages created
0 paginator pages created
0 tags created
0 categories created
in 3 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;update-the-home-page-template&#34;&gt;Update the Home Page Template&lt;/h2&gt;

&lt;p&gt;The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of two files in the theme&amp;rsquo;s &lt;code&gt;layout/&lt;/code&gt; directory:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_default/list.html&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We could update the default templates, but a good design decision is to update the most specific template available. That&amp;rsquo;s not a hard and fast rule (in fact, we&amp;rsquo;ll break it a few times in this tutorial), but it is a good generalization.&lt;/p&gt;

&lt;h3 id=&#34;make-a-static-home-page&#34;&gt;Make a Static Home Page&lt;/h3&gt;

&lt;p&gt;Right now, that page is empty because we don&amp;rsquo;t have any content and we don&amp;rsquo;t have any logic in the template. Let&amp;rsquo;s change that by adding some text to the template.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;p&amp;gt;hugo says hello!&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq

$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Build the web site and then verify the results.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo --verbose
INFO: 2015/11/27 Using config file: /tmp/hugo-0.16/config.toml
INFO: 2015/11/27 syncing from /tmp/hugo-0.16/themes/zafta/static to /tmp/hugo-0.16/public/
INFO: 2015/11/27 syncing from /tmp/hugo-0.16/static/ to /tmp/hugo-0.16/public/
0 draft content
0 future content
0 pages created
0 paginator pages created
0 tags created
0 categories created
in 4 ms

$ ls -l public/index.html 
-rw-r--r--  1 mdhender  wheel  72 Nov 27 21:03 public/index.html
$ cat public/index.html 
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;p&amp;gt;hugo says hello!&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;build-a-dynamic-home-page&#34;&gt;Build a &amp;ldquo;Dynamic&amp;rdquo; Home Page&lt;/h3&gt;

&lt;p&gt;&amp;ldquo;Dynamic home page?&amp;rdquo; Hugo&amp;rsquo;s a static web site generator, so this seems an odd thing to say. I mean let&amp;rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We&amp;rsquo;ll use iteration in the template to do that.&lt;/p&gt;

&lt;h4 id=&#34;create-new-articles&#34;&gt;Create New Articles&lt;/h4&gt;

&lt;p&gt;Now that we have the home page generating static content, let&amp;rsquo;s add some content to the site. We&amp;rsquo;ll display these articles as a list on the home page and on their own page, too.&lt;/p&gt;

&lt;p&gt;Hugo has a command to generate a skeleton entry for new content, just like it does for sites and themes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; hugo --verbose new article/first.md
INFO: 2015/11/27 Using config file: /tmp/hugo-0.16/config.toml
INFO: 2015/11/27 attempting to create  article/first.md of article
INFO: 2015/11/27 curpath: /tmp/hugo-0.16/themes/zafta/archetypes/default.md
INFO: 2015/11/27 creating /tmp/hugo-0.16/content/article/first.md
/tmp/hugo-0.16/content/article/first.md created

$ ls -l content/article/
total 8
-rw-r--r--  1 mdhender  wheel  61 Nov 27 21:06 first.md
$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s create a second article while we&amp;rsquo;re here.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo --verbose new article/second.md
INFO: 2015/11/27 Using config file: /tmp/hugo-0.16/config.toml
INFO: 2015/11/27 attempting to create  article/second.md of article
INFO: 2015/11/27 curpath: /tmp/hugo-0.16/themes/zafta/archetypes/default.md
INFO: 2015/11/27 creating /tmp/hugo-0.16/content/article/second.md
/tmp/hugo-0.16/content/article/second.md created

$ ls -l content/article/
total 16
-rw-r--r--  1 mdhender  wheel  61 Nov 27 21:06 first.md
-rw-r--r--  1 mdhender  wheel  62 Nov 27 21:08 second.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit both of those articles to put some text into the body.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat content/article/first.md 
+++
date = &amp;quot;2015-11-27T21:06:38-06:00&amp;quot;
title = &amp;quot;first&amp;quot;
+++
In vel ligula tortor. Aliquam erat volutpat.
Pellentesque at felis eu quam tincidunt dignissim.
Nulla facilisi.

Pellentesque tempus nisi et interdum convallis.
In quam ante, vulputate at massa et, rutrum
gravida dui. Phasellus tristique libero at ex.

$ cat content/article/second.md 
+++
date = &amp;quot;2015-11-27T21:08:08-06:00&amp;quot;
title = &amp;quot;second&amp;quot;
+++
Fusce lacus magna, maximus nec sapien eu,
porta efficitur neque. Aliquam erat volutpat.
Vestibulum enim nibh, posuere eu diam nec,
varius sagittis turpis.

Praesent quis sapien egestas mauris accumsan
pulvinar. Ut mattis gravida venenatis. Vivamus
lobortis risus id nisi rutrum, at iaculis.
$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Build the web site and then verify the results.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rm -rf public/
$ hugo --verbose
INFO: 2015/11/27 Using config file: /tmp/hugo-0.16/config.toml
INFO: 2015/11/27 syncing from /tmp/hugo-0.16/themes/zafta/static to /tmp/hugo-0.16/public/
INFO: 2015/11/27 syncing from /tmp/hugo-0.16/static/ to /tmp/hugo-0.16/public/
INFO: 2015/11/27 found taxonomies: map[string]string{&amp;quot;tag&amp;quot;:&amp;quot;tags&amp;quot;, &amp;quot;category&amp;quot;:&amp;quot;categories&amp;quot;}
0 draft content
0 future content
2 pages created
0 paginator pages created
0 categories created
0 tags created
in 7 ms
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output says that it created 2 pages. Those are our new articles:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ find public -type f -name &#39;*.html&#39; | xargs ls -l
-rw-r--r--  1 mdhender  wheel   0 Nov 27 21:12 public/404.html
-rw-r--r--  1 mdhender  wheel   0 Nov 27 21:12 public/article/first/index.html
-rw-r--r--  1 mdhender  wheel   0 Nov 27 21:12 public/article/index.html
-rw-r--r--  1 mdhender  wheel   0 Nov 27 21:12 public/article/second/index.html
-rw-r--r--  1 mdhender  wheel  72 Nov 27 21:12 public/index.html
$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The new files are empty because because the templates used to generate the content are empty. The homepage doesn&amp;rsquo;t show the new content, either.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat public/index.html 
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;p&amp;gt;hugo says hello!&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have to update the templates to add the articles.&lt;/p&gt;

&lt;h3 id=&#34;list-and-single-templates&#34;&gt;List and Single Templates&lt;/h3&gt;

&lt;p&gt;In Hugo, we have three major kinds of templates. There&amp;rsquo;s the home page template that we updated previously. It is used only by the home page. We also have &amp;ldquo;single&amp;rdquo; templates which are used to generate output for a single content file. We also have &amp;ldquo;list&amp;rdquo; templates that are used to group multiple pieces of content before generating output.&lt;/p&gt;

&lt;p&gt;Generally speaking, list templates are named &amp;ldquo;list.html&amp;rdquo; and single templates are named &amp;ldquo;single.html.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;There are three other types of templates: partials, content views, and terms. We will give an example of some partials, but really won&amp;rsquo;t go into much detail on these.&lt;/p&gt;

&lt;h3 id=&#34;add-content-to-the-homepage&#34;&gt;Add Content to the Homepage&lt;/h3&gt;

&lt;p&gt;The home page will contain a list of articles. Let&amp;rsquo;s update its template to add the articles that we just created. The logic in the template will run every time we build the site.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  {{ range first 10 .Data.Pages }}
    &amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
  {{ end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq

$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between &amp;ldquo;{{&amp;rdquo; and &amp;ldquo;}}&amp;rdquo; (affectionately called &amp;ldquo;moustaches&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;In our template, the commands are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;range&lt;/li&gt;
&lt;li&gt;.Permalink&lt;/li&gt;
&lt;li&gt;.Title&lt;/li&gt;
&lt;li&gt;end&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;code&gt;range&lt;/code&gt; command is an iterator. We use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.Permalink&lt;/code&gt; prints the URL to link to an article and &lt;code&gt;.Title&lt;/code&gt; prints the value of the &amp;ldquo;title&amp;rdquo; variable. Hugo pulls it from the front matter in the Markdown file.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;end&lt;/code&gt; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds &lt;code&gt;end.&lt;/code&gt; Everything between &lt;code&gt;range&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; is evaluated each time the engine goes through the iteration. In this template, that would cause the title from the first ten pages to be output as heading level one tags along. Because of the permalink, the heading will link to the actual article.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s helpful to remember that some variables, like &lt;code&gt;.Data&lt;/code&gt;, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.&lt;/p&gt;

&lt;p&gt;Build the web site and then verify the results.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rm -rf public/
$ hugo --verbose
INFO: 2015/11/27 Using config file: /tmp/hugo-0.16/config.toml
INFO: 2015/11/27 syncing from /tmp/hugo-0.16/themes/zafta/static to /tmp/hugo-0.16/public/
INFO: 2015/11/27 syncing from /tmp/hugo-0.16/static/ to /tmp/hugo-0.16/public/
INFO: 2015/11/27 found taxonomies: map[string]string{&amp;quot;tag&amp;quot;:&amp;quot;tags&amp;quot;, &amp;quot;category&amp;quot;:&amp;quot;categories&amp;quot;}
0 draft content
0 future content
2 pages created
0 paginator pages created
0 tags created
0 categories created
in 7 ms

$ find public -type f -name &#39;*.html&#39; | xargs ls -l
-rw-r--r--  1 mdhender  wheel   0 Nov 27 21:18 public/404.html
-rw-r--r--  1 mdhender  wheel   0 Nov 27 21:18 public/article/first/index.html
-rw-r--r--  1 mdhender  wheel   0 Nov 27 21:18 public/article/index.html
-rw-r--r--  1 mdhender  wheel   0 Nov 27 21:18 public/article/second/index.html
-rw-r--r--  1 mdhender  wheel  94 Nov 27 21:18 public/index.html

$ cat public/index.html 
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  
    &amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;http://replace-this-with-your-hugo-site.com/article/second/&amp;quot;&amp;gt;second&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
  
    &amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;http://replace-this-with-your-hugo-site.com/article/first/&amp;quot;&amp;gt;first&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
  
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Congratulations, the home page shows the title of the two articles and the links to them. The articles themselves are still empty, but let&amp;rsquo;s take a moment to appreciate what we&amp;rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you&amp;rsquo;ve learned everything you need to know to build a theme. All that&amp;rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.&lt;/p&gt;

&lt;p&gt;Well, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don&amp;rsquo;t worry, though, that&amp;rsquo;s all to come.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s also a few things to understand about developing and testing your theme. Notice that the links in the &lt;code&gt;public/index.html&lt;/code&gt; file use the full &lt;code&gt;baseurl&lt;/code&gt; from the &lt;code&gt;config.toml&lt;/code&gt; file. That&amp;rsquo;s because the rendered files are intended to be deployed to your web server. If you&amp;rsquo;re testing your them, you&amp;rsquo;d run &lt;code&gt;hugo server&lt;/code&gt; and connect to your browser. That command is smart enough to replace the &lt;code&gt;baseurl&lt;/code&gt; with &lt;code&gt;http://localhost:1313&lt;/code&gt; on the fly so that links automatically work for you. That&amp;rsquo;s another reason we recommend testing with the built in server.&lt;/p&gt;

&lt;h3 id=&#34;add-content-to-the-articles&#34;&gt;Add Content to the Articles&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;re working with articles, which are in the &lt;code&gt;content/article/&lt;/code&gt; directory. That means that their section (as far as templates are concerned) is &amp;ldquo;article.&amp;rdquo; If we don&amp;rsquo;t do something weird, their type is also &amp;ldquo;article.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Hugo uses the section and type to find the template file for every piece of content that it renders. Hugo will first look for a template file that matches the section or type name. If it can&amp;rsquo;t find one, then it will look in the &lt;code&gt;_default/&lt;/code&gt; directory. There are some twists that we&amp;rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try &lt;code&gt;article/single.html&lt;/code&gt;, then &lt;code&gt;_default/single.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that we know the search rule, let&amp;rsquo;s see what we actually have available:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ find themes/zafta -name single.html | xargs ls -l
-rw-r--r--  1 mdhender  wheel  0 Nov 27 20:35 themes/zafta/layouts/_default/single.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you look back at the articles that we&amp;rsquo;ve rendered, you can see that they&amp;rsquo;re empty because Hugo looked for &lt;code&gt;article/single.html&lt;/code&gt; but couldn&amp;rsquo;t find it. The &lt;code&gt;_default/single.html&lt;/code&gt; template is empty, so the rendered article file was empty, too.&lt;/p&gt;

&lt;p&gt;We could create a new template, &lt;code&gt;article/single.html&lt;/code&gt;, or change the default, &lt;code&gt;_default/single.html&lt;/code&gt;. Since we don&amp;rsquo;t know of any other content types, let&amp;rsquo;s start with updating the default.&lt;/p&gt;

&lt;p&gt;We mentioned earlier that you should always change the most specific template first to avoid accidentally change other content. We&amp;rsquo;re breaking that rule intentionally just to explore how the default is used.&lt;/p&gt;

&lt;p&gt;Remember, any content that we haven&amp;rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we&amp;rsquo;re going to be adding different types of content and we&amp;rsquo;re going to end up undoing some of the changes we&amp;rsquo;ve made. It&amp;rsquo;s good because we&amp;rsquo;ll be able to see immediate results. It&amp;rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we&amp;rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we&amp;rsquo;ll accept the cost and proceed.&lt;/p&gt;

&lt;p&gt;Please see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you&amp;rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That&amp;rsquo;s a refreshing amount of joy right there.&lt;/p&gt;

&lt;h4 id=&#34;update-the-template-file&#34;&gt;Update the Template File&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vi themes/zafta/layouts/_default/single.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
  &amp;lt;h2&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/h2&amp;gt;
  {{ .Content }}
  &amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;{{ .Site.BaseURL }}&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq

$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Build the web site and verify the results.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rm -rf public/
$ hugo --verbose
INFO: 2015/11/27 Using config file: /tmp/hugo-0.16/config.toml
INFO: 2015/11/27 syncing from /tmp/hugo-0.16/themes/zafta/static to /tmp/hugo-0.16/public/
INFO: 2015/11/27 syncing from /tmp/hugo-0.16/static/ to /tmp/hugo-0.16/public/
INFO: 2015/11/27 found taxonomies: map[string]string{&amp;quot;tag&amp;quot;:&amp;quot;tags&amp;quot;, &amp;quot;category&amp;quot;:&amp;quot;categories&amp;quot;}
0 draft content
0 future content
2 pages created
0 paginator pages created
0 tags created
0 categories created
in 7 ms

$ find public -type f -name &#39;*.html&#39; | xargs ls -l
-rw-r--r--  1 mdhender  wheel    0 Nov 27 21:39 public/404.html
-rw-r--r--  1 mdhender  wheel  472 Nov 27 21:39 public/article/first/index.html
-rw-r--r--  1 mdhender  wheel    0 Nov 27 21:39 public/article/index.html
-rw-r--r--  1 mdhender  wheel  513 Nov 27 21:39 public/article/second/index.html
-rw-r--r--  1 mdhender  wheel  241 Nov 27 21:39 public/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the we have a &amp;ldquo;list&amp;rdquo; file for our articles, &lt;code&gt;public/article/index.html&lt;/code&gt;. The file is empty because we don&amp;rsquo;t have a template for it, but the other files contain our HTML.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat public/article/first/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;first&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;first&amp;lt;/h1&amp;gt;
  &amp;lt;h2&amp;gt;Fri, Nov 27, 2015&amp;lt;/h2&amp;gt;
  &amp;lt;p&amp;gt;In vel ligula tortor. Aliquam erat volutpat.
Pellentesque at felis eu quam tincidunt dignissim.
Nulla facilisi.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;Pellentesque tempus nisi et interdum convallis.
In quam ante, vulputate at massa et, rutrum
gravida dui. Phasellus tristique libero at ex.&amp;lt;/p&amp;gt;

  &amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://replace-this-with-your-hugo-site.com/&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

$ cat public/article/second/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;second&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;second&amp;lt;/h1&amp;gt;
  &amp;lt;h2&amp;gt;Fri, Nov 27, 2015&amp;lt;/h2&amp;gt;
  &amp;lt;p&amp;gt;Fusce lacus magna, maximus nec sapien eu,
porta efficitur neque. Aliquam erat volutpat.
Vestibulum enim nibh, posuere eu diam nec,
varius sagittis turpis.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;Praesent quis sapien egestas mauris accumsan
pulvinar. Ut mattis gravida venenatis. Vivamus
lobortis risus id nisi rutrum, at iaculis.&amp;lt;/p&amp;gt;

  &amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://replace-this-with-your-hugo-site.com/&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the articles now have content. You can run &lt;code&gt;hugo server&lt;/code&gt; and use your browser to confirm. You should see a home page with the title of both articles. Each title should link you to the article. There should be a link at the bottom of the article to take you back to the home page.&lt;/p&gt;

&lt;h3 id=&#34;create-a-list-of-articles&#34;&gt;Create a List of Articles&lt;/h3&gt;

&lt;p&gt;We have the articles displaying on the home page and on their own page. We also have the empty file &lt;code&gt;public/article/index.html&lt;/code&gt; file. Let&amp;rsquo;s make it show a list of all articles (not just the first ten). Key to this is that individual pages use &amp;ldquo;single&amp;rdquo; templates. Pages that show collections (or lists) of other pages use &amp;ldquo;list&amp;rdquo; templates.&lt;/p&gt;

&lt;p&gt;We need to decide which template to update. This will be a listing, so it should be a list template. Let&amp;rsquo;s take a quick look and see which list templates are available.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ find themes/zafta -name list.html | xargs ls -l
-rw-r--r--  1 mdhender  wheel  0 Nov 27 20:35 themes/zafta/layouts/_default/list.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As with the single article, we have to decide to update &lt;code&gt;_default/list.html&lt;/code&gt; or create &lt;code&gt;section/article.html&lt;/code&gt;. We still don&amp;rsquo;t have multiple content types, so let&amp;rsquo;s stay consistent and update the default list template.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vi themes/zafta/layouts/_default/list.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  {{ range first 10 .Data.Pages }}
    &amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
  {{ end }}
  &amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;{{ .Site.BaseURL }}&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq

$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go ahead and render everything again.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rm -rf public
$ hugo --verbose
INFO: 2015/11/27 Using config file: /tmp/hugo-0.16/config.toml
INFO: 2015/11/27 syncing from /tmp/hugo-0.16/themes/zafta/static to /tmp/hugo-0.16/public/
INFO: 2015/11/27 syncing from /tmp/hugo-0.16/static/ to /tmp/hugo-0.16/public/
INFO: 2015/11/27 found taxonomies: map[string]string{&amp;quot;tag&amp;quot;:&amp;quot;tags&amp;quot;, &amp;quot;category&amp;quot;:&amp;quot;categories&amp;quot;}
0 draft content
0 future content
2 pages created
0 paginator pages created
0 tags created
0 categories created
in 7 ms

$ find public -type f -name &#39;*.html&#39; | xargs ls -l
-rw-r--r--  1 mdhender  wheel    0 Nov 27 21:56 public/404.html
-rw-r--r--  1 mdhender  wheel  472 Nov 27 21:56 public/article/first/index.html
-rw-r--r--  1 mdhender  wheel  241 Nov 27 21:56 public/article/index.html
-rw-r--r--  1 mdhender  wheel  513 Nov 27 21:56 public/article/second/index.html
-rw-r--r--  1 mdhender  wheel  241 Nov 27 21:56 public/index.html

$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now have a list of articles. You can start &lt;code&gt;hugo server&lt;/code&gt; and use your browser to confirm.&lt;/p&gt;

&lt;h2 id=&#34;creating-top-level-pages&#34;&gt;Creating Top Level Pages&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s add an &amp;ldquo;about&amp;rdquo; page and display it at the top level (as opposed to a sub-level like we did with articles).&lt;/p&gt;

&lt;p&gt;The default in Hugo is to use the directory structure of the &lt;code&gt;content/&lt;/code&gt; directory to guide the location of the generated html in the &lt;code&gt;public/&lt;/code&gt; directory. Let&amp;rsquo;s verify that by creating an &amp;ldquo;about&amp;rdquo; page at the top level:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo new about.md
/tmp/hugo-0.16/content/about.md created
$ ls -l content/
total 8
drwxr-xr-x   4 mdhender  wheel  136 Nov 27 22:01 .
drwxr-xr-x  10 mdhender  wheel  340 Nov 27 21:56 ..
-rw-r--r--   1 mdhender  wheel   61 Nov 27 22:01 about.md
drwxr-xr-x   4 mdhender  wheel  136 Nov 27 21:11 article

$ vi content/about.md
+++
date = &amp;quot;2015-11-27T22:01:00-06:00&amp;quot;
title = &amp;quot;about&amp;quot;
+++
Neque porro quisquam est qui dolorem
ipsum quia dolor sit amet consectetur
adipisci velit.
$ 
:wq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Render the web site and verify the results.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rm -rf public/
$ hugo --verbose
INFO: 2015/11/27 Using config file: /tmp/hugo-0.16/config.toml
INFO: 2015/11/27 syncing from /tmp/hugo-0.16/themes/zafta/static to /tmp/hugo-0.16/public/
INFO: 2015/11/27 syncing from /tmp/hugo-0.16/static/ to /tmp/hugo-0.16/public/
INFO: 2015/11/27 found taxonomies: map[string]string{&amp;quot;tag&amp;quot;:&amp;quot;tags&amp;quot;, &amp;quot;category&amp;quot;:&amp;quot;categories&amp;quot;}
0 draft content
0 future content
3 pages created
0 paginator pages created
0 tags created
0 categories created
in 9 ms

$ ls -l public/
total 24
-rw-r--r--  1 mdhender  wheel     0 Nov 27 22:04 404.html
drwxr-xr-x  3 mdhender  wheel   102 Nov 27 22:04 about
drwxr-xr-x  6 mdhender  wheel   204 Nov 27 22:04 article
drwxr-xr-x  2 mdhender  wheel    68 Nov 27 20:35 css
-rw-r--r--  1 mdhender  wheel   328 Nov 27 22:04 index.html
-rw-r--r--  1 mdhender  wheel  2221 Nov 27 22:04 index.xml
drwxr-xr-x  2 mdhender  wheel    68 Nov 27 20:35 js
-rw-r--r--  1 mdhender  wheel   708 Nov 27 22:04 sitemap.xml

$ ls -l public/about/
total 8
-rw-r--r--  1 mdhender  wheel  304 Nov 27 22:04 index.html

$ cat public/about/index.html 
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;about&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;about&amp;lt;/h1&amp;gt;
  &amp;lt;h2&amp;gt;Fri, Nov 27, 2015&amp;lt;/h2&amp;gt;
  &amp;lt;p&amp;gt;Neque porro quisquam est qui dolorem
ipsum quia dolor sit amet consectetur
adipisci velit.&amp;lt;/p&amp;gt;

  &amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://replace-this-with-your-hugo-site.com/&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the page wasn&amp;rsquo;t created at the top level. It was created in a sub-directory named &amp;lsquo;about/&amp;rsquo;. That name came from the name of our Markdown file, &lt;code&gt;about.md&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One other thing. Take a look at the home page.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat public/index.html 
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  
    &amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;http://replace-this-with-your-hugo-site.com/about/&amp;quot;&amp;gt;about&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
  
    &amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;http://replace-this-with-your-hugo-site.com/article/second/&amp;quot;&amp;gt;second&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
  
    &amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;http://replace-this-with-your-hugo-site.com/article/first/&amp;quot;&amp;gt;first&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
  
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the &amp;ldquo;about&amp;rdquo; link is listed with the articles? That&amp;rsquo;s not desirable, so let&amp;rsquo;s change that first.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;Articles&amp;lt;/h1&amp;gt;
  {{ range first 10 .Data.Pages }}
    {{ if eq .Type &amp;quot;article&amp;quot;}}
      &amp;lt;h2&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
    {{ end }}
  {{ end }}

  &amp;lt;h1&amp;gt;Pages&amp;lt;/h1&amp;gt;
  {{ range .Data.Pages }}
    {{ if eq .Type &amp;quot;page&amp;quot; }}
      &amp;lt;h2&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
    {{ end }}
  {{ end }}

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Render the web site and verify the results.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rm -rf public/
$ hugo --verbose
INFO: 2015/11/27 Using config file: /tmp/hugo-0.16/config.toml
INFO: 2015/11/27 syncing from /tmp/hugo-0.16/themes/zafta/static to /tmp/hugo-0.16/public/
INFO: 2015/11/27 syncing from /tmp/hugo-0.16/static/ to /tmp/hugo-0.16/public/
INFO: 2015/11/27 found taxonomies: map[string]string{&amp;quot;tag&amp;quot;:&amp;quot;tags&amp;quot;, &amp;quot;category&amp;quot;:&amp;quot;categories&amp;quot;}
0 draft content
0 future content
3 pages created
0 paginator pages created
0 tags created
0 categories created
in 9 ms

$ cat public/index.html 
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;Articles&amp;lt;/h1&amp;gt;
      &amp;lt;h2&amp;gt;&amp;lt;a href=&amp;quot;http://replace-this-with-your-hugo-site.com/article/second/&amp;quot;&amp;gt;second&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
      &amp;lt;h2&amp;gt;&amp;lt;a href=&amp;quot;http://replace-this-with-your-hugo-site.com/article/first/&amp;quot;&amp;gt;first&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
  &amp;lt;h1&amp;gt;Pages&amp;lt;/h1&amp;gt;
      &amp;lt;h2&amp;gt;&amp;lt;a href=&amp;quot;http://replace-this-with-your-hugo-site.com/about/&amp;quot;&amp;gt;about&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The home page has two sections, Articles and Pages, and each section has the right set of headings and links in it.&lt;/p&gt;

&lt;h2 id=&#34;sharing-templates&#34;&gt;Sharing Templates&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;ve been following along, you probably noticed that articles have titles in the browser and the home page doesn&amp;rsquo;t. That&amp;rsquo;s because we didn&amp;rsquo;t put the title in the homepage&amp;rsquo;s template (&lt;code&gt;layouts/index.html&lt;/code&gt;). That&amp;rsquo;s an easy thing to do, but let&amp;rsquo;s look at a better option.&lt;/p&gt;

&lt;p&gt;We can put the common bits into a shared template that&amp;rsquo;s stored in the &lt;code&gt;themes/zafta/layouts/partials/&lt;/code&gt; directory.&lt;/p&gt;

&lt;h3 id=&#34;create-the-header-and-footer-partials&#34;&gt;Create the Header and Footer Partials&lt;/h3&gt;

&lt;p&gt;In Hugo, a partial is a template that&amp;rsquo;s intended to be used within other templates. We&amp;rsquo;re going to use partials to create a single header template that other templates will use. That gives us one place to maintain the header information, which makes maintenance much easier. So much easier, in fact, that we&amp;rsquo;ll jump in and do the same for the footer, too.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vi themes/zafta/layouts/partials/header.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
:wq

$ vi themes/zafta/layouts/partials/footer.html
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;update-the-home-page-template-to-use-the-partials&#34;&gt;Update the Home Page Template to Use the Partials&lt;/h3&gt;

&lt;p&gt;The most noticeable difference between a template call and a partials call is the lack of path:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;{{ template &amp;quot;theme/partials/header.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;versus&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;{{ partial &amp;quot;header.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both pass in the context (that&amp;rsquo;s the period just before the closing moustache).&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s change the home page template to use these new partials we just created.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vi themes/zafta/layouts/index.html
{{ partial &amp;quot;header.html&amp;quot; . }}

  &amp;lt;h1&amp;gt;Articles&amp;lt;/h1&amp;gt;
  {{ range first 10 .Data.Pages }}
    {{ if eq .Type &amp;quot;article&amp;quot;}}
      &amp;lt;h2&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
    {{ end }}
  {{ end }}

  &amp;lt;h1&amp;gt;Pages&amp;lt;/h1&amp;gt;
  {{ range .Data.Pages }}
    {{ if eq .Type &amp;quot;page&amp;quot; }}
      &amp;lt;h2&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
    {{ end }}
  {{ end }}

{{ partial &amp;quot;footer.html&amp;quot; . }}
:wq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Render the web site and verify the results. The title on the home page is now &amp;ldquo;My New Hugo Site&amp;rdquo;, which comes from the &amp;ldquo;title&amp;rdquo; variable in the &lt;code&gt;config.toml&lt;/code&gt; file.&lt;/p&gt;

&lt;h3 id=&#34;update-the-default-templates-to-use-the-partials&#34;&gt;Update the Default Templates to Use the Partials&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;quot;header.html&amp;quot; . }}
  &amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
  &amp;lt;h2&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/h2&amp;gt;
  {{ .Content }}
  &amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;{{ .Site.BaseURL }}&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
{{ partial &amp;quot;footer.html&amp;quot; . }}
:wq

$ vi themes/zafta/layouts/_default/list.html
{{ partial &amp;quot;header.html&amp;quot; . }}
  {{ range first 10 .Data.Pages }}
    &amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
  {{ end }}
  &amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;{{ .Site.BaseURL }}&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
{{ partial &amp;quot;footer.html&amp;quot; . }}
:wq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generate the web site and verify the results. The title on the articles and the about page should both reflect the value in the markdown file.&lt;/p&gt;

&lt;h2 id=&#34;addressing-the-date-published-on-the-about-page&#34;&gt;Addressing the &amp;ldquo;Date Published&amp;rdquo; on the About page&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s common to have articles display the date that they were written or published, so let&amp;rsquo;s add that. The front matter of our articles has a variable named &amp;ldquo;date.&amp;rdquo; It&amp;rsquo;s usually the date the content was created, but let&amp;rsquo;s pretend that&amp;rsquo;s the value we want to display.&lt;/p&gt;

&lt;p&gt;We display it by printing the formatted date in the template.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Articles use the &lt;code&gt;_default/single.html&lt;/code&gt; template, which includes this, so they show a nice looking date. Unfortunately, the &amp;ldquo;about&amp;rdquo; page uses the same default template, so it shows the date, too.&lt;/p&gt;

&lt;p&gt;There are a couple of ways to make the date display only for articles. We could do an &amp;ldquo;if&amp;rdquo; statement to only display the date when the type equals &amp;ldquo;article.&amp;rdquo; That would work, and is acceptable for sites that have just a couple of content types. It aligns with the principle of &amp;ldquo;code for today,&amp;rdquo; too.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s assume, though, that we&amp;rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we&amp;rsquo;re going to create a section template for our articles.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s restore the default single template before we forget.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;quot;header.html&amp;quot; . }}

  &amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
  {{ .Content }}

{{ partial &amp;quot;footer.html&amp;quot; . }}
:wq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we&amp;rsquo;ll update the articles&amp;rsquo;s version of the single template. If you remember Hugo&amp;rsquo;s rules, the template engine will use this version over the default.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;quot;header.html&amp;quot; . }}
  &amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
  {{ .Content }}
  &amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;{{ .Site.BaseURL }}&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
{{ partial &amp;quot;footer.html&amp;quot; . }}
:wq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s create the section template. First step is to create the directory for the new section. Then we just create a &amp;ldquo;single&amp;rdquo; template in it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir themes/zafta/layouts/article
$ vi themes/zafta/layouts/article/single.html
{{ partial &amp;quot;header.html&amp;quot; . }}
  &amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
  &amp;lt;h2&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/h2&amp;gt;
  {{ .Content }}
  &amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;{{ .Site.BaseURL }}&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
{{ partial &amp;quot;footer.html&amp;quot; . }}
$ 
:wq

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that we removed the date logic from the default template and put it in the &amp;ldquo;single&amp;rdquo; template for &lt;code&gt;layouts/article/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Render the site and verify the results. Articles have dates and the about page doesn&amp;rsquo;t.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rm -rf public/
$ hugo --verbose
INFO: 2015/11/27 Using config file: /tmp/hugo-0.16/config.toml
INFO: 2015/11/27 syncing from /tmp/hugo-0.16/themes/zafta/static to /tmp/hugo-0.16/public/
INFO: 2015/11/27 syncing from /tmp/hugo-0.16/static/ to /tmp/hugo-0.16/public/
INFO: 2015/11/27 found taxonomies: map[string]string{&amp;quot;tag&amp;quot;:&amp;quot;tags&amp;quot;, &amp;quot;category&amp;quot;:&amp;quot;categories&amp;quot;}
0 draft content
0 future content
3 pages created
0 paginator pages created
0 tags created
0 categories created
in 10 ms

$ cat public/about/index.html 
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;about&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

  &amp;lt;h1&amp;gt;about&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;Neque porro quisquam est qui dolorem
ipsum quia dolor sit amet consectetur
adipisci velit.&amp;lt;/p&amp;gt;

  &amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://replace-this-with-your-hugo-site.com/&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

$ cat public/article/first/index.html 
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;first&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

  &amp;lt;h1&amp;gt;first&amp;lt;/h1&amp;gt;
  &amp;lt;h2&amp;gt;Fri, Nov 27, 2015&amp;lt;/h2&amp;gt;
  &amp;lt;p&amp;gt;In vel ligula tortor. Aliquam erat volutpat.
Pellentesque at felis eu quam tincidunt dignissim.
Nulla facilisi.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;Pellentesque tempus nisi et interdum convallis.
In quam ante, vulputate at massa et, rutrum
gravida dui. Phasellus tristique libero at ex.&amp;lt;/p&amp;gt;

  &amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://replace-this-with-your-hugo-site.com/&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;don-t-repeat-yourself&#34;&gt;Don&amp;rsquo;t Repeat Yourself&lt;/h3&gt;

&lt;p&gt;DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you&amp;rsquo;re figuring that out, accept that you&amp;rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it&amp;rsquo;s okay to delay splitting up a template.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create a Multilingual Site</title>
      <link>https://delphic-digital.github.io/Skeletor.docs/tutorials/create-a-multilingual-site/</link>
      <pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://delphic-digital.github.io/Skeletor.docs/tutorials/create-a-multilingual-site/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Hugo allows you to create a multilingual site from its built-in tools. This tutorial will show one way to do it, and assumes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You already know the basics about creating a Hugo site&lt;/li&gt;
&lt;li&gt;You have a separate domain name for each language&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;ll use &lt;code&gt;/data&lt;/code&gt; files for some translation strings&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;ll use single, combined &lt;code&gt;layout&lt;/code&gt; and &lt;code&gt;static&lt;/code&gt; folders&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;ll use a subfolder for each language under &lt;code&gt;content&lt;/code&gt; and &lt;code&gt;public&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;site-configs&#34;&gt;Site Configs&lt;/h2&gt;

&lt;p&gt;Create your site configs in the root of your repository, for example for an English and Japanese site.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;English Config &lt;code&gt;config_en.toml&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;baseurl = &amp;quot;http://acme.com/&amp;quot;
title = &amp;quot;Acme Inc.&amp;quot;
contentdir = &amp;quot;content/en&amp;quot;
publishdir = &amp;quot;public/en&amp;quot;

[params]
    locale = &amp;quot;en-US&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Japanese Config &lt;code&gt;config_ja.toml&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;baseurl = &amp;quot;http://acme.jp/&amp;quot;
title = &amp;quot;有限会社アクミー&amp;quot;
contentdir = &amp;quot;content/ja&amp;quot;
publishdir = &amp;quot;public/ja&amp;quot;

[params]
    locale = &amp;quot;ja-JP&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you had more domains and languages, you would just create more config files. The standard &lt;code&gt;config.toml&lt;/code&gt; is what Hugo will run as a default, but since we&amp;rsquo;re creating language-specific ones, you&amp;rsquo;ll need to specify each config file when running &lt;code&gt;hugo server&lt;/code&gt; or just &lt;code&gt;hugo&lt;/code&gt; before deploying.&lt;/p&gt;

&lt;h2 id=&#34;prep-translation-strings-in-data&#34;&gt;Prep Translation Strings in &lt;code&gt;/data&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Create &lt;code&gt;.yaml&lt;/code&gt; (or &lt;code&gt;.json&lt;/code&gt; or &lt;code&gt;.toml&lt;/code&gt;) files for each language, under &lt;code&gt;/data/translations&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;English Strings &lt;code&gt;en-US.yaml&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;topslogan: Acme Inc.
topsubslogan: You&#39;ll love us
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Japanese Strings &lt;code&gt;ja-JP.yaml&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;topslogan: 有限会社アクミー
topsubslogan: キット勝つぞ
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In some cases, where there is more complex formatting within the strings you want to show, it might be better to employ some conditional logic in your template, to display a block of html per language.&lt;/p&gt;

&lt;h2 id=&#34;reference-strings-in-templates&#34;&gt;Reference Strings in templates&lt;/h2&gt;

&lt;p&gt;Now you can reference the strings in your templates. One way is to do it like in this &lt;code&gt;layouts/index.html&lt;/code&gt;, leveraging the fact that you have the locale set:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;{{ .Site.Params.locale }}&amp;quot;&amp;gt;
...
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;{{ if eq .Site.Params.locale &amp;quot;en-US&amp;quot; }}{{ if .IsHome }}Welcome to {{ end }}{{ end }}{{ .Title }}{{ if eq .Site.Params.locale &amp;quot;ja-JP&amp;quot; }}{{ if .IsHome }}へようこそ{{ end }}{{ end }}{{ if ne .Title .Site.Title }} : {{ .Site.Title }}{{ end }}&amp;lt;/title&amp;gt;
    ...
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
      &amp;lt;h1 class=&amp;quot;header&amp;quot;&amp;gt;{{ ( index $.Site.Data.translations $.Site.Params.locale ).topslogan }}&amp;lt;/h1&amp;gt;
      &amp;lt;h3 class=&amp;quot;subheader&amp;quot;&amp;gt;{{ ( index $.Site.Data.translations $.Site.Params.locale ).topsubslogan }}&amp;lt;/h3&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above shows both techniques, using an &lt;code&gt;if eq&lt;/code&gt; and &lt;code&gt;else if eq&lt;/code&gt; to check the locale, and using &lt;code&gt;index&lt;/code&gt; to pull strings from the data file that matches the locale set in the site&amp;rsquo;s config file.&lt;/p&gt;

&lt;h2 id=&#34;customize-dates&#34;&gt;Customize Dates&lt;/h2&gt;

&lt;p&gt;At the time of this writing, Golang does not yet have support for internationalized locales, but if you do some work, you can simulate it. For example, if you want to use French month names, you can add a data file like &lt;code&gt;data/mois.yaml&lt;/code&gt; with this content:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;1: &amp;quot;janvier&amp;quot;
2: &amp;quot;février&amp;quot;
3: &amp;quot;mars&amp;quot;
4: &amp;quot;avril&amp;quot;
5: &amp;quot;mai&amp;quot;
6: &amp;quot;juin&amp;quot;
7: &amp;quot;juillet&amp;quot;
8: &amp;quot;août&amp;quot;
9: &amp;quot;septembre&amp;quot;
10: &amp;quot;octobre&amp;quot;
11: &amp;quot;novembre&amp;quot;
12: &amp;quot;décembre&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; then index the non-English date names in your templates like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;time class=&amp;quot;post-date&amp;quot; datetime=&amp;quot;{{ .Date.Format &amp;quot;2006-01-02T15:04:05Z07:00&amp;quot; | safeHTML }}&amp;quot;&amp;gt;
  Article publié le {{ .Date.Day }} {{ index $.Site.Data.mois (printf &amp;quot;%d&amp;quot; .Date.Month) }} {{ .Date.Year }} (dernière modification le {{ .Lastmod.Day }} {{ index $.Site.Data.mois (printf &amp;quot;%d&amp;quot; .Lastmod.Month) }} {{ .Lastmod.Year }})
&amp;lt;/time&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This technique extracts the day, month and year by specifying &lt;code&gt;.Date.Day&lt;/code&gt;, &lt;code&gt;.Date.Month&lt;/code&gt;, and &lt;code&gt;.Date.Year&lt;/code&gt;, and uses the month number as a key, when indexing the month name data file.&lt;/p&gt;

&lt;h2 id=&#34;create-multilingual-content&#34;&gt;Create Multilingual Content&lt;/h2&gt;

&lt;p&gt;Now you can create markdown content in your languages, in the &lt;code&gt;content/en&lt;/code&gt; and &lt;code&gt;content/ja&lt;/code&gt; folders. The frontmatter stays the same on the key side, but the values would be set in each of the languages.&lt;/p&gt;

&lt;h2 id=&#34;run-hugo-server-or-deploy-commands&#34;&gt;Run Hugo Server or Deploy Commands&lt;/h2&gt;

&lt;p&gt;Once you have things set up, you can run &lt;code&gt;hugo server&lt;/code&gt; or &lt;code&gt;hugo&lt;/code&gt; before deploying. You can create scripts to do it, or as shell functions. Here are sample basic &lt;code&gt;zsh&lt;/code&gt; functions:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Live Reload with &lt;code&gt;hugo server&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;function hugoserver-com {
  cd /Users/me/dev/mainsite
  hugo server --buildDrafts --verbose --source=&amp;quot;/Users/me/dev/mainsite&amp;quot; --config=&amp;quot;/Users/me/dev/mainsite/config_en.toml&amp;quot; --port=1377
}
function hugoserver-jp {
  cd /Users/me/dev/mainsite
  hugo server --buildDrafts --verbose --source=&amp;quot;/Users/me/dev/mainsite&amp;quot; --config=&amp;quot;/Users/me/dev/mainsite/config_ja.toml&amp;quot; --port=1399
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Deploy with &lt;code&gt;hugo&lt;/code&gt; and &lt;code&gt;rsync&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;function hugodeploy-acmecom {
    rm -rf /tmp/acme.com
    hugo --config=&amp;quot;/Users/me/dev/mainsite/config_en.toml&amp;quot; -s /Users/me/dev/mainsite/ -d /tmp/acme.com
    rsync -avze &amp;quot;ssh -p 22&amp;quot; --delete /tmp/acme.com/ me@mywebhost.com:/home/me/webapps/acme_com_site
}

function hugodeploy-acmejp {
    rm -rf /tmp/acme.jp
    hugo --config=&amp;quot;/Users/me/dev/mainsite/config_ja.toml&amp;quot; -s /Users/me/dev/mainsite/ -d /tmp/acme.jp
    rsync -avze &amp;quot;ssh -p 22&amp;quot; --delete /tmp/acme.jp/ me@mywebhost.com:/home/me/webapps/acme_jp_site
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adjust to fit your situation, setting dns, your webserver config, and other settings as appropriate.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing on Windows</title>
      <link>https://delphic-digital.github.io/Skeletor.docs/tutorials/installing-on-windows/</link>
      <pubDate>Mon, 30 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://delphic-digital.github.io/Skeletor.docs/tutorials/installing-on-windows/</guid>
      <description>

&lt;h1 id=&#34;installing-hugo-on-windows&#34;&gt;Installing Hugo on Windows&lt;/h1&gt;

&lt;p&gt;This tutorial aims to be a complete guide to installing Hugo on your Windows computer.&lt;/p&gt;

&lt;h2 id=&#34;assumptions&#34;&gt;Assumptions&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;We&amp;rsquo;ll call your website &lt;code&gt;example.com&lt;/code&gt; for the purpose of this tutorial.&lt;/li&gt;
&lt;li&gt;You will use &lt;code&gt;C:\Hugo\Sites&lt;/code&gt; as the starting point for your site.&lt;/li&gt;
&lt;li&gt;You will use &lt;code&gt;C:\Hugo\bin&lt;/code&gt; to store executable files.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;setup-your-directories&#34;&gt;Setup Your Directories&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;ll need a place to store the Hugo executable, your content (the files that you build), and the generated files (the HTML that Hugo builds for you).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open Windows Explorer.&lt;/li&gt;
&lt;li&gt;Create a new folder: &lt;code&gt;C:\Hugo&lt;/code&gt; (assuming you want Hugo on your C drive – it can go anywhere.)&lt;/li&gt;
&lt;li&gt;Create a subfolder in the Hugo folder: &lt;code&gt;C:\Hugo\bin&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create another subfolder in Hugo: &lt;code&gt;C:\Hugo\Sites&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;technical-users&#34;&gt;Technical users&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Download the latest zipped Hugo executable from the &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;Hugo Releases&lt;/a&gt; page.&lt;/li&gt;
&lt;li&gt;Extract all contents to your &lt;code&gt;..\Hugo\bin&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;ll probably want to rename the Hugo executable to something short like &lt;code&gt;hugo.exe&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In Powershell or your preferred CLI, add the &lt;code&gt;hugo.exe&lt;/code&gt; executable to your PATH by navigating to &lt;code&gt;C:\Hugo\bin&lt;/code&gt; (or the location of your hugo.exe file) and use the command &lt;code&gt;set PATH=%PATH%;C:\Hugo\bin&lt;/code&gt;. If the &lt;code&gt;hugo&lt;/code&gt; command does not work after a reboot, you may have to run the command prompt as administrator.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;less-technical-users&#34;&gt;Less technical users&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Go the &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;Hugo Releases&lt;/a&gt; page.&lt;/li&gt;
&lt;li&gt;The latest release is announced on top. Scroll to the bottom of the release announcement to see the downloads. They&amp;rsquo;re all ZIP files.&lt;/li&gt;
&lt;li&gt;Find the Windows files near the bottom (they&amp;rsquo;re in alphabetical order, so Windows is last) – download either the 32-bit or 64-bit file depending on whether you have 32-bit or 64-bit Windows. (If you don&amp;rsquo;t know, &lt;a href=&#34;https://esupport.trendmicro.com/en-us/home/pages/technical-support/1038680.aspx&#34;&gt;see here&lt;/a&gt;.)&lt;/li&gt;
&lt;li&gt;Move the ZIP file into your &lt;code&gt;C:\Hugo\bin&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;Double-click on the ZIP file and extract its contents. Be sure to extract the contents into the same &lt;code&gt;C:\Hugo\bin&lt;/code&gt; folder – Windows will do this by default unless you tell it to extract somewhere else.&lt;/li&gt;
&lt;li&gt;You should now have three new files: an .exe file, license.md, and readme.md. (you can delete the ZIP download now.)&lt;/li&gt;
&lt;li&gt;Rename the .exe file to &lt;code&gt;hugo.exe&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Now add Hugo to your Windows PATH settings:&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;for-windows-10-users&#34;&gt;For Windows 10 users:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Right click on the &lt;strong&gt;Start&lt;/strong&gt; button&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;System&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Advanced System Settings&lt;/strong&gt; on the left&lt;/li&gt;
&lt;li&gt;Click on the &lt;strong&gt;Environment Variables&lt;/strong&gt; button on the bottom&lt;/li&gt;
&lt;li&gt;In the User variables section, find the row that starts with PATH (PATH will be all caps)&lt;/li&gt;
&lt;li&gt;Double-click on &lt;strong&gt;PATH&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;New&lt;/strong&gt; button.&lt;/li&gt;
&lt;li&gt;Type in Hugo&amp;rsquo;s path, which is &lt;code&gt;C:\Hugo\bin\hugo.exe&lt;/code&gt; if you went by the instructions above. Press Enter when you&amp;rsquo;re done typing.&lt;/li&gt;
&lt;li&gt;Click OK at every window to exit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(Note that the path editor in Windows 10 was added in the large &lt;a href=&#34;https://blogs.windows.com/windowsexperience/2015/11/12/first-major-update-for-windows-10-available-today/&#34;&gt;November 2015 Update&lt;/a&gt;. You&amp;rsquo;ll need to have that or a later update installed for the above steps to work. You can see what Windows 10 build you have by clicking on the Start button → Settings → System → About. See &lt;a href=&#34;http://www.howtogeek.com/236195/how-to-find-out-which-build-and-version-of-windows-10-you-have/&#34;&gt;here&lt;/a&gt; for more.)&lt;/p&gt;

&lt;p&gt;Windows 7 and 8.1 do not include an easy path editor, so non-technical users on those platforms are advised to install a free third-party path editor like &lt;a href=&#34;http://eveditor.com/&#34;&gt;Windows Environment Variables Editor&lt;/a&gt; or &lt;a href=&#34;https://patheditor2.codeplex.com/&#34;&gt;Path Editor&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;verify-the-executable&#34;&gt;Verify the executable&lt;/h2&gt;

&lt;p&gt;Run a few commands to verify that the executable is ready to run and then build a sample site to get started.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open a command prompt window.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;At the prompt, type &lt;code&gt;hugo help&lt;/code&gt; and press the Enter key. You should see output that starts with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;hljs nohighlight&#34;&gt;A Fast and Flexible Static Site Generator built with love by spf13 and friends in Go. Complete documentation is available at http://gohugo.io
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;If you do, then the installation is complete. If you don&amp;rsquo;t, double-check the path that you placed the &lt;code&gt;hugo.exe&lt;/code&gt; file in and that you typed that path correctly when you added it to your PATH variable. If you&amp;rsquo;re still not getting the output, post a note on the Hugo discussion list (in the &lt;code&gt;Support&lt;/code&gt; topic) with your command and the output.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;At the prompt, change your directory to the &lt;code&gt;Sites&lt;/code&gt; directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;hljs nohighlight&#34;&gt;C:\Program Files&gt; cd C:\Hugo\Sites
C:\Hugo\Sites&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the command to generate a new site. I&amp;rsquo;m using &lt;code&gt;example.com&lt;/code&gt; as the name of the site.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;hljs nohighlight&#34;&gt;C:\Hugo\Sites&gt; hugo new site example.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You should now have a directory at &lt;code&gt;C:\Hugo\Sites\example.com&lt;/code&gt;.  Change into that directory and list the contents. You should get output similar to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;hljs nohighlight&#34;&gt;C:\Hugo\Sites&amp;gt;cd example.com
C:\Hugo\Sites\example.com&amp;gt;dir
&amp;nbsp;Directory of C:\hugo\sites\example.com
&amp;nbsp;
04/13/2015  10:44 PM    &amp;lt;DIR&amp;gt;          .
04/13/2015  10:44 PM    &amp;lt;DIR&amp;gt;          ..
04/13/2015  10:44 PM    &amp;lt;DIR&amp;gt;          archetypes
04/13/2015  10:44 PM                83 config.toml
04/13/2015  10:44 PM    &amp;lt;DIR&amp;gt;          content
04/13/2015  10:44 PM    &amp;lt;DIR&amp;gt;          data
04/13/2015  10:44 PM    &amp;lt;DIR&amp;gt;          layouts
04/13/2015  10:44 PM    &amp;lt;DIR&amp;gt;          static
               1 File(s)             83 bytes
               7 Dir(s)   6,273,331,200 bytes free
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You now have Hugo installed and a site to work with. You need to add a layout (or theme), then create some content. Go to &lt;a href=&#34;http://gohugo.io/overview/quickstart/&#34;&gt;http://gohugo.io/overview/quickstart/&lt;/a&gt; for steps on doing that.&lt;/p&gt;

&lt;h2 id=&#34;troubleshooting&#34;&gt;Troubleshooting&lt;/h2&gt;

&lt;p&gt;@dhersam has created a nice video on common issues:&lt;/p&gt;

&lt;div class=&#34;video-container&#34;&gt;
&lt;iframe class=&#34;youtube-player&#34; type=&#34;text/html&#34; width=&#34;100%&#34; height=&#34;auto&#34; src=&#34;https://www.youtube.com/embed/c8fJIRNChmU&#34; allowfullscreen frameborder=&#34;0&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Installing on a Mac</title>
      <link>https://delphic-digital.github.io/Skeletor.docs/tutorials/installing-on-mac/</link>
      <pubDate>Sun, 22 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://delphic-digital.github.io/Skeletor.docs/tutorials/installing-on-mac/</guid>
      <description>

&lt;h1 id=&#34;installing-hugo-on-a-mac&#34;&gt;Installing Hugo on a Mac&lt;/h1&gt;

&lt;p&gt;This tutorial aims to be a complete guide to installing Hugo on your Mac computer.&lt;/p&gt;

&lt;h2 id=&#34;assumptions&#34;&gt;Assumptions&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;You know how to open a terminal window.&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;re running a modern 64-bit Mac.&lt;/li&gt;
&lt;li&gt;You will use &lt;code&gt;~/Sites&lt;/code&gt; as the starting point for your site.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;pick-your-method&#34;&gt;Pick Your Method&lt;/h2&gt;

&lt;p&gt;There are three ways to install Hugo on your Mac computer: the &lt;code&gt;brew&lt;/code&gt; utility, from the distribution, or from source.
There&amp;rsquo;s no &amp;ldquo;best&amp;rdquo; way to do this. You should use the method that works best for your use case.&lt;/p&gt;

&lt;p&gt;There are pros and cons for each.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Brew&lt;/code&gt; is the simplest and least work to maintain. The drawbacks
aren&amp;rsquo;t severe. The default package will be for the most recent
release, so it will not have bug-fixes until the next release
(unless you install it with the &lt;code&gt;--HEAD&lt;/code&gt; option). The release to
&lt;code&gt;brew&lt;/code&gt; may lag a few days behind because it has to be coordinated
with another team. Still, I&amp;rsquo;d recommend &lt;code&gt;brew&lt;/code&gt; if you want to work
from a stable, widely used source. It works well and is really easy
to update.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Downloading the tarball and installing from it is also easy. You have to have a few more command line skills. Updates are easy, too. You just repeat the process with the new binary. This gives you the flexibility to have multiple versions on your computer. If you don&amp;rsquo;t want to use &lt;code&gt;brew&lt;/code&gt;, then the binary is a good choice.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Compiling from source is the most work. The advantage is that you don&amp;rsquo;t have to wait for a release to add features or bug fixes. The disadvantage is that you need to spend more time managing the setup. It&amp;rsquo;s not a lot, but it&amp;rsquo;s more than with the other two options.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Since this is a &amp;ldquo;beginner&amp;rdquo; how-to, I&amp;rsquo;m going to cover the first two
options in detail and go over the third more quickly.&lt;/p&gt;

&lt;h2 id=&#34;brew&#34;&gt;Brew&lt;/h2&gt;

&lt;h3 id=&#34;step-1-install-brew-if-you-haven-t-already&#34;&gt;Step 1: Install &lt;code&gt;brew&lt;/code&gt; if you haven&amp;rsquo;t already&lt;/h3&gt;

&lt;p&gt;Go to the &lt;code&gt;brew&lt;/code&gt; website, &lt;a href=&#34;http://brew.sh/&#34;&gt;http://brew.sh/&lt;/a&gt;, and follow the directions there. The most important step is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I did this, I had some problems with directory permissions. Searches on Google pointed me to pages that walked me through updating permissions on the &lt;code&gt;/usr/local&lt;/code&gt; directory. Seemed scary, but it&amp;rsquo;s worked well since.&lt;/p&gt;

&lt;h3 id=&#34;step-2-run-the-brew-command-to-install-hugo&#34;&gt;Step 2: Run the &lt;code&gt;brew&lt;/code&gt; command to install &lt;code&gt;hugo&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;First, update the formulae and Homebrew itself by running:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, install Hugo using Homebrew by running:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install hugo
==&amp;gt; Downloading https://homebrew.bintray.com/bottles/hugo-0.13_1.yosemite.bottle.tar.gz
######################################################################## 100.0%
==&amp;gt; Pouring hugo-0.13_1.yosemite.bottle.tar.gz
🍺  /usr/local/Cellar/hugo/0.13_1: 4 files,  14M
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Note: Replace &lt;code&gt;brew install hugo&lt;/code&gt; with &lt;code&gt;brew install hugo --HEAD&lt;/code&gt;
if you want the absolute latest version in development,
but beware—there might be bugs!)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Brew&lt;/code&gt; should have updated your path to include Hugo. Confirm by opening a new terminal window and running a few commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ # show the location of the hugo executable
$ which hugo
/usr/local/bin/hugo

$ # show the installed version
$ ls -l $( which hugo )
lrwxr-xr-x  1 mdhender admin  30 Mar 28 22:19 /usr/local/bin/hugo -&amp;gt; ../Cellar/hugo/0.13_1/bin/hugo

$ # verify that hugo runs correctly
$ hugo version
Hugo Static Site Generator v0.13 BuildDate: 2015-03-09T21:34:47-05:00
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-3-you-re-done&#34;&gt;Step 3: You&amp;rsquo;re Done&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ve installed Hugo. Now you need to set up your site. Read the
&lt;a href=&#34;https://delphic-digital.github.io/Skeletor.docs/overview/quickstart/&#34;&gt;Quickstart guide&lt;/a&gt;, explore the rest of the
documentation, and if you still have questions
&lt;a href=&#34;http://discuss.gohugo.io/&#34; title=&#34;Discussion forum&#34;&gt;just ask!&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;from-tarball&#34;&gt;From Tarball&lt;/h2&gt;

&lt;h3 id=&#34;step-1-decide-on-the-location&#34;&gt;Step 1: Decide on the location&lt;/h3&gt;

&lt;p&gt;When installing from the tarball, you have to decide if you&amp;rsquo;re going to install the binary in &lt;code&gt;/usr/local/bin&lt;/code&gt; or in your home directory. There are three camps on this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install it in &lt;code&gt;/usr/local/bin&lt;/code&gt; so that all the users on your system have access to it. This is a good idea because it&amp;rsquo;s a fairly standard place for executables. The downside is that you may need elevated privileges to put software into that location. Also, if there are multiple users on your system, they will all run the same version. Sometimes this can be an issue if you want to try out a new release.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install it in &lt;code&gt;~/bin&lt;/code&gt; so that only you can execute it. This is a good idea because it&amp;rsquo;s easy to do, easy to maintain, and doesn&amp;rsquo;t require elevated privileges. The downside is that only you can run Hugo. If there are other users on your site, they have to maintain their own copies. That can lead to people running different versions. of course, this does make it easier for you to experiment with different releases.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install it in your &lt;code&gt;sites&lt;/code&gt; directory. This is not a bad idea if you have only one site that you&amp;rsquo;re building. It keeps every thing in a single place. If you want to try out new releases, you can just make a copy of the entire site, update the Hugo executable, and have it.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All three locations will work for you. I&amp;rsquo;m going to document the second option, mostly because I&amp;rsquo;m comfortable with it.&lt;/p&gt;

&lt;h3 id=&#34;step-2-download-the-tarball&#34;&gt;Step 2: Download the Tarball&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;https://github.com/spf13/hugo/releases&lt;/a&gt; in your browser.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Find the current release by scrolling down and looking for the green tag that reads &amp;ldquo;Latest Release.&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Download the current tarball for the Mac. The name will be something like &lt;code&gt;hugo_X.YY_darwin_amd64.zip&lt;/code&gt;, where &lt;code&gt;X.YY&lt;/code&gt; is the release number.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;By default, the tarball will be saved to your &lt;code&gt;~/Downloads&lt;/code&gt; directory. If you chose to use a different location, you&amp;rsquo;ll need to change that in the following steps.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-3-confirm-your-download&#34;&gt;Step 3: Confirm your download&lt;/h3&gt;

&lt;p&gt;Verify that the tarball wasn&amp;rsquo;t corrupted during the download:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tar tvf ~/Downloads/hugo_0.13_darwin_amd64.zip
-rwxrwxrwx  0 0      0           0 Feb 22 04:02 hugo_0.13_darwin_amd64/hugo_0.13_darwin_amd64
-rwxrwxrwx  0 0      0           0 Feb 22 03:24 hugo_0.13_darwin_amd64/README.md
-rwxrwxrwx  0 0      0           0 Jan 30 18:48 hugo_0.13_darwin_amd64/LICENSE.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;.md&lt;/code&gt; files are documentation. The other file is the executable.&lt;/p&gt;

&lt;h3 id=&#34;step-4-install-into-your-bin-directory&#34;&gt;Step 4: Install into your bin directory&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ # create the directory if needed
$ mkdir -p ~/bin

$ # make it the working directory
$ cd ~/bin

$ # extract the tarball
$ unzip ~/Downloads/hugo_0.13_darwin_amd64.zip
Archive:  hugo_0.13_darwin_amd64.zip
  inflating: hugo_0.13_darwin_amd64/hugo_0.13_darwin_amd64
  inflating: hugo_0.13_darwin_amd64/README.md
  inflating: hugo_0.13_darwin_amd64/LICENSE.md

$ ls -l
total 7704
lrwxr-xr-x  1 mdhender  staff       22 Sep 29 13:34 hugo -&amp;gt; hugo_0.12_darwin_amd/hugo_0.12_darwin_amd64
drwxr-xr-x@ 1 mdhender  staff      102 Sep  1 14:17 hugo_0.12_darwin_amd64
drwxrwxr-x@ 5 mdhender  staff      170 Mar 28 22:46 hugo_0.13_darwin_amd64
-rw-r-----@ 1 mdhender  staff  3942651 Mar 28 22:45 hugo_0.13_darwin_amd64.zip

$ ls -l hugo_0.13_darwin_amd64
total 27560
-rw-r--r--@ 1 mdhender  staff      2707 Jan 30 18:48 LICENSE.md
-rw-r--r--@ 1 mdhender  staff      6748 Feb 22 03:24 README.md
-rwxr-xr-x@ 1 mdhender  staff  14095060 Feb 22 04:02 hugo_0.13_darwin_amd64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I was already running Hugo v0.12, so you can see how that was set up. It&amp;rsquo;ll be identical for v0.13 when we&amp;rsquo;re done.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ # create the link to the real executable
$ rm -f hugo
$ ln -s hugo_0.13_darwin_amd64/hugo_0.13_darwin_amd64 hugo
$ ls -l
total 7704
lrwxr-xr-x  1 mdhender  staff       22 Mar 28 22:49 hugo -&amp;gt; hugo_0.13_darwin_amd/hugo_0.12_darwin_amd64
drwxr-xr-x@ 1 mdhender  staff      102 Sep  1 14:17 hugo_0.12_darwin_amd64
drwxrwxr-x@ 5 mdhender  staff      170 Mar 28 22:46 hugo_0.13_darwin_amd64

$ # verify that it runs
$ ./hugo version
Hugo Static Site Generator v0.13 BuildDate: 2015-02-22T04:02:30-06:00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may need to add your bin directory to your &lt;code&gt;PATH&lt;/code&gt; variable. The &lt;code&gt;which&lt;/code&gt; command will check for us. If it can find &lt;code&gt;hugo&lt;/code&gt;, it will print the full path to it. Otherwise, it will not print anything.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ # check if hugo is in the path
$ which hugo
/Users/mdhender/bin/hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If &lt;code&gt;hugo&lt;/code&gt; is not in your &lt;code&gt;PATH&lt;/code&gt;, add it by updating your &lt;code&gt;~/.bash_profile&lt;/code&gt; file. First, start up an editor:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nano ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add a line to update your &lt;code&gt;PATH&lt;/code&gt; variable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export PATH=$PATH:$HOME/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then save the file by pressing Control-X, then Y to save the file and return to the prompt.&lt;/p&gt;

&lt;p&gt;Close the terminal and then open a new terminal to pick up the changes to your profile. Verify by running the &lt;code&gt;which hugo&lt;/code&gt; command again.&lt;/p&gt;

&lt;h3 id=&#34;step-5-you-re-done&#34;&gt;Step 5: You&amp;rsquo;re Done&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ve installed Hugo. Now you need to set up your site. Read the
&lt;a href=&#34;https://delphic-digital.github.io/Skeletor.docs/overview/quickstart/&#34;&gt;Quickstart guide&lt;/a&gt;, explore the rest of the
documentation, and if you still have questions
&lt;a href=&#34;http://discuss.gohugo.io/&#34; title=&#34;Discussion forum&#34;&gt;just ask!&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;building-from-source&#34;&gt;Building from Source&lt;/h2&gt;

&lt;p&gt;If you want to compile Hugo yourself, you&amp;rsquo;ll need
&lt;a href=&#34;http://golang.org&#34;&gt;Go&lt;/a&gt;, which is also available from Homebrew: &lt;code&gt;brew
install go&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;step-1-get-the-source&#34;&gt;Step 1: Get the Source&lt;/h3&gt;

&lt;p&gt;If you want to compile a specific version, go to
&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;https://github.com/spf13/hugo/releases&lt;/a&gt; and download the source code
for the version of your choice.  If you want to compile Hugo with all
the latest changes (which might include bugs), clone the Hugo
repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/spf13/hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-2-compiling&#34;&gt;Step 2: Compiling&lt;/h3&gt;

&lt;p&gt;Make the directory containing the source your working directory, then
fetch Hugo&amp;rsquo;s dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p src/github.com/spf13
ln -sf $(pwd) src/github.com/spf13/hugo

# set the build path for Go
export GOPATH=$(pwd)

go get
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will fetch the absolute latest version of the dependencies, so if
Hugo fails to build it may be because the author of a dependency
introduced a breaking change.&lt;/p&gt;

&lt;p&gt;Then compile:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go build -o hugo main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then place the &lt;code&gt;hugo&lt;/code&gt; executable somewhere in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;step-3-you-re-done-1&#34;&gt;Step 3: You&amp;rsquo;re Done&lt;/h3&gt;

&lt;p&gt;You probably know where to go from here.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automated deployments with Wercker</title>
      <link>https://delphic-digital.github.io/Skeletor.docs/tutorials/automated-deployments/</link>
      <pubDate>Mon, 12 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://delphic-digital.github.io/Skeletor.docs/tutorials/automated-deployments/</guid>
      <description>

&lt;h1 id=&#34;automated-deployments-with-wercker&#34;&gt;Automated deployments with Wercker&lt;/h1&gt;

&lt;p&gt;In this tutorial we will set up a basic Hugo project and then configure a free tool called Wercker to automatically deploy the generated site any time we add an article. We will deploy it to GitHub pages as that is easiest to set up, but you will see that we can use anything. This tutorial takes you through every step of the process, complete with screenshots and is fairly long.&lt;/p&gt;

&lt;p&gt;The  assumptions made for this tutorial are that you know how to use git for version control, and have a GitHub account. In case you are unfamiliar with these, in their &lt;a href=&#34;https://help.github.com/articles/set-up-git/&#34;&gt;help section&lt;/a&gt; GitHub has an explanation of how to install and use git and you can easily sign up for a free GitHub account as well.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-basic-hugo-site&#34;&gt;Creating a basic Hugo site&lt;/h2&gt;

&lt;p&gt;There are already &lt;a href=&#34;http://gohugo.io/overview/quickstart/&#34;&gt;pages&lt;/a&gt; dedicated to describing how to set up a Hugo site so we will only go through the most basic steps required to get a site up and running before we dive into the Wercker configuration. All the work for setting up the project is done using the command line, and kept as simple as possible.&lt;/p&gt;

&lt;p&gt;Create the new site using the &lt;code&gt;hugo new site&lt;/code&gt; command, and we move into it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new site hugo-wercker-example
cd hugo-wercker-example
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add the herring-cove theme by cloning it into the theme directory using the following commands.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir themes
cd themes
git clone https://github.com/spf13/herring-cove.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cloning the project like this will conflict with our own version control, so we remove the external git configuration.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rm -rf herring-cove/.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s add a quick &lt;strong&gt;about&lt;/strong&gt; page.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new about.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we&amp;rsquo;ll edit contents/about.md to ensure it&amp;rsquo;s no longer a draft and add some text to it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo undraft content/about.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once completed it&amp;rsquo;s a good idea to do a quick check if everything is working by running&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo server --theme=herring-cove
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If everything is fine, you should be able to see something similar to the image below when you go to localhost:1313 in your browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://delphic-digital.github.io/Skeletor.docs/img/tutorials/automated-deployments/creating-a-basic-hugo-site.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;setting-up-version-control&#34;&gt;Setting up version control&lt;/h2&gt;

&lt;p&gt;Adding git to our project is done by running the &lt;code&gt;git init&lt;/code&gt; command from the root directory of the project.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running &lt;code&gt;git status&lt;/code&gt; at this point will show you p entries: the &lt;strong&gt;config.toml&lt;/strong&gt; file, the &lt;strong&gt;themes&lt;/strong&gt; directory, the &lt;strong&gt;contents&lt;/strong&gt; directory, and the &lt;strong&gt;public&lt;/strong&gt; directory. We don&amp;rsquo;t want the &lt;strong&gt;public&lt;/strong&gt; directory version controlled however, as we will use wercker to generate that later on. Therefore, we&amp;rsquo;ll add a gitignore file that will exclude this using the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;/public&amp;quot; &amp;gt;&amp;gt; .gitignore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we currently have no static files outside of the theme directory, Wercker might complain when we try to build the site later on. To prevent this, we simply have to add any file to the static folder. To keep it simple for now we&amp;rsquo;ll add a robots.txt file that will give all search engines full access to the site when it&amp;rsquo;s up.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;User-agent: *\nDisallow:&amp;quot; &amp;gt; static/robots.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this we can add everything to the repository.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git commit -a -m &amp;quot;Initial commit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;adding-the-project-to-github&#34;&gt;Adding the project to GitHub&lt;/h2&gt;

&lt;p&gt;First we&amp;rsquo;ll create a new repository. You can do this by clicking on the &lt;strong&gt;+&lt;/strong&gt; sign at the top right, or by going to &lt;a href=&#34;https://github.com/new&#34;&gt;https://github.com/new&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We then choose a name for the project (&lt;strong&gt;hugo-wercker-example&lt;/strong&gt;). When clicking on create repository GitHub displays the commands for adding an existing project to the site. The commands shown below are the ones used for this site, if you&amp;rsquo;re following along you will need to use the ones shown by GitHub. Once we&amp;rsquo;ve run those commands the project is in GitHub and we can move on to setting up the Wercker configuration.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git remote add origin git@github.com:YourUsername/hugo-wercker-example.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://delphic-digital.github.io/Skeletor.docs/img/tutorials/automated-deployments/adding-the-project-to-github.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;welcome-to-wercker&#34;&gt;Welcome to wercker&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s start by setting up an account for Wercker. To do so we&amp;rsquo;ll go to &lt;a href=&#34;http://wercker.com&#34;&gt;http://wercker.com&lt;/a&gt; and click on the &lt;strong&gt;Sign up&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://delphic-digital.github.io/Skeletor.docs/img/tutorials/automated-deployments/wercker-sign-up.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;register&#34;&gt;Register&lt;/h2&gt;

&lt;p&gt;To make life easier for ourselves, we will then register using GitHub. If you don&amp;rsquo;t have a GitHub account, or don&amp;rsquo;t want to use it for your account, you can of course register with a username and password as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://delphic-digital.github.io/Skeletor.docs/img/tutorials/automated-deployments/wercker-sign-up-page.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;connect-github-bitbucket&#34;&gt;Connect GitHub/Bitbucket&lt;/h2&gt;

&lt;p&gt;After you are registered, you will need to link your GitHub and/or Bitbucket account to Wercker. You do this by going to your profile settings, and then &amp;ldquo;Git connections&amp;rdquo; If you registered using GitHub it will most likely look like the image below. To connect a missing service, simply click on the connect button which will then send you to either GitHub or Bitbucket where you might need to log in and approve their access to your account.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://delphic-digital.github.io/Skeletor.docs/img/tutorials/automated-deployments/wercker-git-connections.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;add-your-project&#34;&gt;Add your project&lt;/h2&gt;

&lt;p&gt;Now that we&amp;rsquo;ve got all the preliminaries out of the way, it&amp;rsquo;s time to set up our application. For this we click on the &lt;strong&gt;+ Create&lt;/strong&gt; button next to Applications, and then we&amp;rsquo;ll choose to use GitHub as our provider.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://delphic-digital.github.io/Skeletor.docs/img/tutorials/automated-deployments/wercker-add-app.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;select-a-repository&#34;&gt;Select a repository&lt;/h2&gt;

&lt;p&gt;Clicking this will make Wercker show you all the repositories you have on GitHub, but you can easily filter them as well. So we search for our repository, select it, and then click on &amp;ldquo;Use selected repo&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://delphic-digital.github.io/Skeletor.docs/img/tutorials/automated-deployments/wercker-select-repository.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;select-the-repository-owner&#34;&gt;Select the repository owner&lt;/h2&gt;

&lt;p&gt;In the next step, Wercker asks you to select the repository owner. Just select your own GitHub account and continue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://delphic-digital.github.io/Skeletor.docs/img/tutorials/automated-deployments/wercker-select-owner.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;configure-access&#34;&gt;Configure access&lt;/h2&gt;

&lt;p&gt;This step can be slightly tricky. As Wercker doesn&amp;rsquo;t access to check out your private projects by default it will ask you what you want to do. When your project is public, as needs to be the case if you wish to use GitHub Pages, the top choice is recommended. When you use this it will simply check out the code in the same way anybody visiting the project on GitHub can do.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://delphic-digital.github.io/Skeletor.docs/img/tutorials/automated-deployments/wercker-access.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;wercker-yml&#34;&gt;Wercker.yml&lt;/h2&gt;

&lt;p&gt;Wercker will now attempt to create an initial &lt;em&gt;wercker.yml&lt;/em&gt; file for you. Or rather, it will create the code you can copy into it yourself. Because there is nothing special about our project according to Wercker, we will simply get the &lt;code&gt;debian&lt;/code&gt; box. So what we do now is create a &lt;em&gt;wercker.yml&lt;/em&gt; file in the root of our project that contains the provided configuration, and after we finish setting up the app we will expand this file to make it actually do something.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://delphic-digital.github.io/Skeletor.docs/img/tutorials/automated-deployments/werckeryml.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;public-or-not&#34;&gt;Public or not&lt;/h2&gt;

&lt;p&gt;This is a personal choice, you can make an app public so that everyone can see more details about it. This doesn&amp;rsquo;t give you any real benefits either way in general, although as part of the tutorial I have of course made this app public so you can see it in action &lt;a href=&#34;https://app.wercker.com/#applications/5586dcbdaf7de9c51b02b0d5&#34;&gt;yourself&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://delphic-digital.github.io/Skeletor.docs/img/tutorials/automated-deployments/public-or-not.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;and-we-ve-got-an-app&#34;&gt;And we&amp;rsquo;ve got an app&lt;/h2&gt;

&lt;p&gt;The application is added now, and Wercker will be offering you the chance to trigger a build. As we haven&amp;rsquo;t pushed up the &lt;strong&gt;wercker.yml&lt;/strong&gt; file however, we will politely decline this option.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://delphic-digital.github.io/Skeletor.docs/img/tutorials/automated-deployments/and-we-ve-got-an-app.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;adding-steps&#34;&gt;Adding steps&lt;/h2&gt;

&lt;p&gt;And now we&amp;rsquo;re going to add the steps themselves. First, we go to the &amp;ldquo;Registry&amp;rdquo; action in the top menu and then search for &amp;ldquo;hugo build&amp;rdquo;. The first result is the &lt;strong&gt;Hugo-Build&lt;/strong&gt; task, which we select.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://delphic-digital.github.io/Skeletor.docs/img/tutorials/automated-deployments/wercker-search.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;using-hugo-build&#34;&gt;Using Hugo-Build&lt;/h2&gt;

&lt;p&gt;Inside the details of this step you will see how to use it. At the top is a summary for the very basic usage, but when scrolling down you go through the README of the step which will usually contain more details about the advanced options available and a full example of using the step.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re not going to use any of the advanced features in this tutorial, so we&amp;rsquo;ll return to our project and add the details we need to our wercker.yml file so that it looks like the below. Wercker also has a &lt;a href=&#34;http://devcenter.wercker.com/articles/werckeryml/validate.html&#34;&gt;page&lt;/a&gt; for validating wercker.yml files, and it&amp;rsquo;s usually a good idea to do so before committing changes as minor typos might cause it to fail.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;box: debian
build:
  steps:
    - arjen/hugo-build:
        version: &amp;quot;0.14&amp;quot;
        theme: herring-cove
        flags: --buildDrafts=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This concludes the first step, so we&amp;rsquo;ll test that it all works as it should by pushing up our wercker.yml file and seeing the magic at work.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git commit -a -m &amp;quot;Add wercker.yml&amp;quot;
git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once completed a nice tick should have appeared in front of your first build, and if you want you can look at the details by clicking on it. However, we&amp;rsquo;re not done yet as we still need to deploy it to GitHub Pages.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://delphic-digital.github.io/Skeletor.docs/img/tutorials/automated-deployments/using-hugo-build.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;adding-a-github-pages-step&#34;&gt;Adding a GitHub Pages step&lt;/h2&gt;

&lt;p&gt;In order to deploy to GitHub Pages we need to add a deploy step. Once again searching through the Steps repository we find that the most popular step is the &lt;strong&gt;lukevevier/gh-pages&lt;/strong&gt; step so we add the configuration for that to our wercker.yml file. Additionally we need to ensure that the box we run on has git and ssh installed. We can do this using the &lt;strong&gt;install-packages&lt;/strong&gt; command, which then turns the wercker.yml file into this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;box: debian
build:
  steps:
    - arjen/hugo-build:
        version: &amp;quot;0.14&amp;quot;
        theme: herring-cove
        flags: --buildDrafts=true
deploy:
  steps:
    - install-packages:
        packages: git ssh-client
    - lukevivier/gh-pages@0.2.1:
        token: $GIT_TOKEN
        domain: hugo-wercker.ig.nore.me
        basedir: public
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How does the GitHub Pages configuration work? We&amp;rsquo;ve selected a couple of things, first the domain we want to use for the site. Configuring this here will ensure that GitHub Pages is aware of the domain you want to use.&lt;/p&gt;

&lt;p&gt;Secondly we&amp;rsquo;ve configured the basedir to &lt;strong&gt;public&lt;/strong&gt;, this is the directory that will be used as the website on GitHub Pages.&lt;/p&gt;

&lt;p&gt;And lastly, you can see here that this has a &lt;strong&gt;$GIT_TOKEN&lt;/strong&gt; variable. This is used for pushing our changes up to GitHub and we will need to configure this before we can do that. We do this by going to our app&amp;rsquo;s settings and clicking on &lt;strong&gt;Deploy targets&lt;/strong&gt;. Now, we &lt;strong&gt;Add deploy target&lt;/strong&gt; and select &lt;strong&gt;Custom deploy&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://delphic-digital.github.io/Skeletor.docs/img/tutorials/automated-deployments/adding-a-github-pages-step.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;configure-the-deploy-step&#34;&gt;Configure the deploy step&lt;/h2&gt;

&lt;p&gt;Simply fill in the name, and make sure you enable &lt;strong&gt;auto deploy&lt;/strong&gt; from the &lt;strong&gt;master&lt;/strong&gt; branch. Next you add a variable for the &lt;strong&gt;GIT_TOKEN&lt;/strong&gt;, for this you&amp;rsquo;ll need to create an access token in GitHub. How to do that is described on a &lt;a href=&#34;https://help.github.com/articles/creating-an-access-token-for-command-line-use/&#34;&gt;GitHub help page&lt;/a&gt;. With the deploy step configured in Wercker, we can push the updated wercker.yml file to GitHub and it will create the GitHub pages site for us. The example site we used here is accessible under hugo-wercker.ig.nore.me&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://delphic-digital.github.io/Skeletor.docs/img/tutorials/automated-deployments/configure-the-deploy-step.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;From now on, any time you want to put a new post on your blog all you need to do is push your new page to GitHub and the rest will happen automatically. The source code for the example site used here is available on &lt;a href=&#34;https://github.com/ArjenSchwarz/hugo-wercker-example&#34;&gt;GitHub&lt;/a&gt;, as is the &lt;a href=&#34;https://github.com/ArjenSchwarz/wercker-step-hugo-build&#34;&gt;Hugo Build step&lt;/a&gt; itself.&lt;/p&gt;

&lt;p&gt;If you want to see an example of how you can deploy to S3 instead of GitHub pages, take a look at &lt;a href=&#34;http://devcenter.wercker.com/docs/deploy/s3.html&#34;&gt;Wercker&amp;rsquo;s documentation&lt;/a&gt; about how to set that up.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hosting on GitHub Pages</title>
      <link>https://delphic-digital.github.io/Skeletor.docs/tutorials/github-pages-blog/</link>
      <pubDate>Fri, 21 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://delphic-digital.github.io/Skeletor.docs/tutorials/github-pages-blog/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;This tutorial was contributed by &lt;a href=&#34;http://sglyon.com/&#34;&gt;Spencer Lyon&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Many Hugo users have expressed interest in seeing a tutorial for how to set up a blog that is generated by Hugo and hosted on GitHub Pages. This tutorial will do just that. We only require that the reader has Hugo installed correctly and is comfortable with git and GitHub.&lt;/p&gt;

&lt;p&gt;During this tutorial, I will walk you through the main steps I took to create an example blog available at &lt;a href=&#34;http://spencerlyon2.github.io/hugo_gh_blog&#34;&gt;http://spencerlyon2.github.io/hugo_gh_blog&lt;/a&gt;. The source code for this blog is on &lt;a href=&#34;https://github.com/spencerlyon2/hugo_gh_blog&#34;&gt;GitHub&lt;/a&gt;. Readers are encouraged to download the example repository and follow along.&lt;/p&gt;

&lt;h3 id=&#34;find-a-home-for-your-files&#34;&gt;Find a Home for Your Files&lt;/h3&gt;

&lt;p&gt;As our goal is to host a website using GitHub Pages, it is natural for us to host the content of the page in a GitHub repository. Thus, the first step is to either create a new repository on GitHub or create a new directory within an existing repository where the content of the website will live. To do this, I created the repository &lt;a href=&#34;https://github.com/spencerlyon2/hugo_gh_blog&#34;&gt;spencerlyon2/hugo_gh_blog&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-the-blog&#34;&gt;Create the Blog&lt;/h2&gt;

&lt;h3 id=&#34;write-a-config-yaml-file&#34;&gt;Write a &lt;code&gt;config.yaml&lt;/code&gt; File&lt;/h3&gt;

&lt;p&gt;The very first step in creating a new Hugo site is to &lt;a href=&#34;https://delphic-digital.github.io/Skeletor.docs/overview/configuration/&#34;&gt;write the config file&lt;/a&gt;. This config file is important for at least two reasons: (1) this is where site-wide settings (like the websites &lt;code&gt;baseurl&lt;/code&gt;) go, and (2) the config file dictates to some extent how Hugo will generate the website. For the example website I created a file &lt;code&gt;config.yaml&lt;/code&gt; with the following contents&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
contentdir: &amp;quot;content&amp;quot;
layoutdir: &amp;quot;layouts&amp;quot;
publishdir: &amp;quot;public&amp;quot;
indexes:
  category: &amp;quot;categories&amp;quot;
baseurl: &amp;quot;http://spencerlyon2.github.io/hugo_gh_blog&amp;quot;
title: &amp;quot;Hugo Blog Template for GitHub Pages&amp;quot;
canonifyurls: true
...
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Caveat:&lt;/strong&gt; Hugo&amp;rsquo;s former default of &lt;code&gt;canonifyurls: true&lt;/code&gt; has been changed
to &lt;code&gt;false&lt;/code&gt; since this tutorial has written.  &lt;strong&gt;Please make sure you manually
add &lt;code&gt;canonifyurls: true&lt;/code&gt; to your &lt;code&gt;config.yaml&lt;/code&gt;&lt;/strong&gt; if you are using Spencer&amp;rsquo;s
&lt;a href=&#34;https://github.com/spencerlyon2/hugo_gh_blog&#34;&gt;https://github.com/spencerlyon2/hugo_gh_blog&lt;/a&gt; for this tutorial, or you &lt;em&gt;will&lt;/em&gt;
run into problems such as the CSS files not loading.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;https://delphic-digital.github.io/Skeletor.docs/extras/urls/&#34;&gt;&amp;ldquo;Canonicalization: Caveat&amp;rdquo; on the &amp;ldquo;Extras: URLs page&amp;rdquo;&lt;/a&gt;
for more information.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;define-structure-of-website&#34;&gt;Define Structure of Website&lt;/h3&gt;

&lt;p&gt;Hugo assumes that you organize the content of your site in a meaningful way and uses the same structure to render the website. Notice that we have the line &lt;code&gt;contentdir: &amp;quot;content&amp;quot;&lt;/code&gt; in our configuration file. This means that all the actual content of the website should be placed somewhere within a folder named &lt;code&gt;content&lt;/code&gt;. Hugo treats all directories in &lt;code&gt;content&lt;/code&gt; as sections. For our example we only need one section: a place to hold our blog posts. So we created two new folders:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ content/
        ▾ posts/
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-html-templates&#34;&gt;Create HTML Templates&lt;/h3&gt;

&lt;p&gt;The next step is to define the look and feel of your new website. Because Hugo will generate the site using HTML templates written by the user (you), this step is very subjective. I will merely present one possible theme that could be used to generate a blog. I decided to base the example project on a Jekyll theme called &lt;a href=&#34;http://lanyon.getpoole.com/&#34;&gt;Lanyon&lt;/a&gt;. The Lanyon theme is pure CSS and a slightly modified version of the CSS is in the &lt;code&gt;/static/css&lt;/code&gt; directory of the example repository. If you are following along, you should grab the &lt;code&gt;static&lt;/code&gt; folder from the example repository and put it alongside the &lt;code&gt;content&lt;/code&gt; folder you just created.&lt;/p&gt;

&lt;p&gt;Because there are so many files needed to fully compose a complete website, I will not be able to go through each of them here. I will, however, show what the directory structure should look like when all is said and done:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ content/
        ▾ posts/
            &amp;lt;blog posts&amp;gt;.md
    ▾ static/
        ▾ css/
            lanyon.css
            poole.css
    ▾ layouts/
        ▾ partials/
            &amp;lt;templates to be used in other files&amp;gt;.html
        ▾ posts/
            li.html
            single.html
            summary.html
        ▾ indexes/
            category.html
            indexes.html
            posts.html
        index.html
    README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each of the files in the example repository is well commented with a description of what the file as a whole does as well as an explanation of all major components in the file. If you are new to web development and/or Hugo, I encourage you to search through these files to get a feel for how Hugo templates work and how the site is stitched together.&lt;/p&gt;

&lt;h3 id=&#34;add-some-content&#34;&gt;Add Some Content&lt;/h3&gt;

&lt;p&gt;The final step in creating the blog is to add some actual blog posts. To do this, simply create one Markdown file (with extension &lt;code&gt;.md&lt;/code&gt;) for each new blog post. At the top of each file you should include a metadata section that tells Hugo some things about the post (see &lt;a href=&#34;https://delphic-digital.github.io/Skeletor.docs/content/front-matter/&#34;&gt;docs&lt;/a&gt;). For example, consider the yaml metadata section from the top of the file &lt;code&gt;/content/posts/newest.md&lt;/code&gt; from the example repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;Just another sample post&amp;quot;
date: &amp;quot;2014-03-29&amp;quot;
description: &amp;quot;This should be a more useful description&amp;quot;
categories:
    - &amp;quot;hugo&amp;quot;
    - &amp;quot;fun&amp;quot;
    - &amp;quot;test&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The keys set in this section are the mandatory &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;date&lt;/code&gt; as well as the optional &lt;code&gt;description&lt;/code&gt; and &lt;code&gt;categories&lt;/code&gt;. Each of these items is used throughout the templates found in the &lt;code&gt;/layouts&lt;/code&gt; directory and gives Hugo information about the post from other pages in the website.&lt;/p&gt;

&lt;h2 id=&#34;configure-git-workflow&#34;&gt;Configure &lt;code&gt;git&lt;/code&gt; Workflow&lt;/h2&gt;

&lt;p&gt;Once the site is set up and working properly, we need to push it to the correct branch of a GitHub repository so the website can be served through GitHub Pages. There are many ways to do this. Here I will show the workflow I currently use to manage my websites that are hosted through GitHub Pages.&lt;/p&gt;

&lt;p&gt;GitHub Pages will serve up a website for any repository that has a branch called &lt;code&gt;gh-pages&lt;/code&gt; with a valid &lt;code&gt;index.html&lt;/code&gt; file at that branch&amp;rsquo;s root. A typical workflow might be to keep the content of a website on the &lt;code&gt;master&lt;/code&gt; branch of a repository and the generated website on the &lt;code&gt;gh-pages&lt;/code&gt; branch. This provides nice separation between input and output, but can be very tedious to work with. As a workaround, we will use the &lt;code&gt;git subtree&lt;/code&gt; family of commands to have the &lt;code&gt;public&lt;/code&gt; directory (or whatever &lt;code&gt;publishdir&lt;/code&gt; is set to in your &lt;code&gt;config.yaml&lt;/code&gt;) mirror the root of the &lt;code&gt;gh-pages&lt;/code&gt; branch of the repository. This will allow us to do all our work on the &lt;code&gt;master&lt;/code&gt; branch, run Hugo to have the site output into the &lt;code&gt;public&lt;/code&gt; directory, and then push that directory directly to the correct place for GitHub Pages to serve our site.&lt;/p&gt;

&lt;p&gt;To get this properly set up, we will execute a series of commands at the terminal. I will include all of them in one place here for easy copy and paste, and will explain what each line does via comments. Note that this is to be run from the &lt;code&gt;&amp;lt;root&amp;gt;&lt;/code&gt; directory (wherever the &lt;code&gt;content&lt;/code&gt; and &lt;code&gt;layout&lt;/code&gt; folders of your Hugo project live). Also note that you will need to change the commands that have the example repository GitHub address so that they point to your repo.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Create a new orphand branch (no commit history) named gh-pages
git checkout --orphan gh-pages

# Unstage all files
git rm --cached $(git ls-files)

# Grab one file from the master branch so we can make a commit
git checkout master README.md

# Add and commit that file
git add .
git commit -m &amp;quot;INIT: initial commit on gh-pages branch&amp;quot;

# Push to remote gh-pages branch
git push origin gh-pages

# Return to master branch
git checkout master

# Remove the public folder to make room for the gh-pages subtree
rm -rf public

# Add the gh-pages branch of the repository. It will look like a folder named public
git subtree add --prefix=public git@github.com:spencerlyon2/hugo_gh_blog.git gh-pages --squash

# Pull down the file we just committed. This helps avoid merge conflicts
git subtree pull --prefix=public git@github.com:spencerlyon2/hugo_gh_blog.git gh-pages

# Run hugo. Generated site will be placed in public directory (or omit -t ThemeName if you&#39;re not using a theme)
hugo -t ThemeName


# Add everything
git add -A

# Commit and push to master
git commit -m &amp;quot;Updating site&amp;quot; &amp;amp;&amp;amp; git push origin master

# Push the public subtree to the gh-pages branch
git subtree push --prefix=public git@github.com:spencerlyon2/hugo_gh_blog.git gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After executing these commands and waiting for the GitHub servers to update, the website we just created was live at &lt;a href=&#34;http://spencerlyon2.github.io/hugo_gh_blog&#34;&gt;http://spencerlyon2.github.io/hugo_gh_blog&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;deploy-sh&#34;&gt;&lt;code&gt;deploy.sh&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Now, as you add new posts to your blog, you will follow steps that look something like the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create the Markdown source for the new post within the &lt;code&gt;content/posts&lt;/code&gt; directory&lt;/li&gt;
&lt;li&gt;Preview your work by running Hugo in server mode with &lt;code&gt;hugo server&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run Hugo not in server mode so that the generated urls will be correct for the website&lt;/li&gt;
&lt;li&gt;Add and commit the new post in &lt;code&gt;master&lt;/code&gt; branch&lt;/li&gt;
&lt;li&gt;Push the &lt;code&gt;master&lt;/code&gt; branch&lt;/li&gt;
&lt;li&gt;Push the public subtree to the remote &lt;code&gt;gh-pages&lt;/code&gt; branch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first two items in the previous list are simply a way to conveniently preview your content as you write. This is a dynamic and fairly streamlined process. All the remaining items, however, are the same every time you want to add new content to the website. To make this repetitive process easier, I have adapted a script from the source repository for the &lt;a href=&#34;https://github.com/chimera/chimeraarts.org&#34;&gt;Chimer Arts &amp;amp; Maker Space&lt;/a&gt; website that is highlighted in the &lt;a href=&#34;https://delphic-digital.github.io/Skeletor.docs/showcase/&#34;&gt;Hugo Showcase&lt;/a&gt;. The script lives in a file called &lt;code&gt;deploy.sh&lt;/code&gt; and has the following contents:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first command &lt;code&gt;hugo&lt;/code&gt; assumes you are running with all the default settings.&lt;/p&gt;

&lt;p&gt;To use a theme, make sure to specify it with &lt;code&gt;-t ThemeName&lt;/code&gt; instead (or include the theme in the config file).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo -t ThemeName
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To build all draft posts &lt;em&gt;(If you only have drafts, no site will be generated)&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo --buildDrafts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Deploy.sh:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

# Build the project.
hugo

# Add changes to git.
git add -A

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin master
git subtree push --prefix=public git@github.com:spencerlyon2/hugo_gh_blog.git gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I can replace the last four items from our workflow list with a single command &lt;code&gt;bash deploy.sh&lt;/code&gt;. This script accepts as an optional argument the commit message that git should use when committing your changes. If you wish to include a custom commit message, do so by putting it quotes after calling bash on the script: &lt;code&gt;bash deploy.sh &amp;quot;&amp;lt;my commit msg&amp;gt;&amp;quot;&lt;/code&gt;. If you choose not to specify the commit message, one will be generated for you using the current time.&lt;/p&gt;

&lt;h2 id=&#34;configure-git-workflow-the-alternate-way&#34;&gt;Configure &lt;code&gt;git&lt;/code&gt; Workflow, the Alternate Way&lt;/h2&gt;

&lt;p&gt;The above uses a &lt;code&gt;git subtree&lt;/code&gt; to deploy to Gits &lt;code&gt;gh-pages&lt;/code&gt; branch. This works great, but with one drawback: It requires the generated content to be committed to the source branch.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s another approach:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Set up your Hugo-site on &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create an orphaned &lt;code&gt;gh-pages&lt;/code&gt; branch. (See &lt;a href=&#34;https://help.github.com/articles/creating-project-pages-manually/&#34;&gt;here&lt;/a&gt; for more information.)&lt;/li&gt;
&lt;li&gt;Follow the instructions below.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, assuming you have your &lt;code&gt;gh-pages&lt;/code&gt; set up, and &lt;code&gt;master&lt;/code&gt; has a commit with some content you want to publish:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Fetch the deployment script into the root of your source tree, make it executable.
wget https://github.com/X1011/git-directory-deploy/raw/master/deploy.sh &amp;amp;&amp;amp; chmod +x deploy.sh

# For setting it up to build to a folder other than &amp;quot;dist&amp;quot;, see the options in deploy.sh.
# Build the site to /dist.
hugo -d dist

# Run the deploy.sh script installed above.
./deploy.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will use the last commit as a base for the commit message to the &lt;code&gt;gh-pages&lt;/code&gt; branch.&lt;/p&gt;

&lt;p&gt;For more information about the deployment script, see this &lt;a href=&#34;https://github.com/X1011/git-directory-deploy&#34;&gt;README&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;hosting-personal-organization-pages&#34;&gt;Hosting Personal/Organization Pages&lt;/h2&gt;

&lt;p&gt;As mentioned &lt;a href=&#34;https://help.github.com/articles/user-organization-and-project-pages/&#34;&gt;in this GitHub&amp;rsquo;s article&lt;/a&gt;, besides project pages, you may also want to host a user/organization page. Here are the key differences:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;You must use the &lt;code&gt;username.github.io&lt;/code&gt; naming scheme.&lt;/li&gt;
&lt;li&gt;Content from the &lt;code&gt;master&lt;/code&gt; branch will be used to build and publish your GitHub Pages site.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;It becomes much simpler in that case: we&amp;rsquo;ll create two separate repos, one for Hugo&amp;rsquo;s content, and a git submodule with the &lt;code&gt;public&lt;/code&gt; folder&amp;rsquo;s content in it.&lt;/p&gt;

&lt;p&gt;Step by step:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create on GitHub &lt;code&gt;&amp;lt;your-project&amp;gt;-hugo&lt;/code&gt; repository (it will host Hugo&amp;rsquo;s content)&lt;/li&gt;
&lt;li&gt;Create on GitHub &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt; repository (it will host the &lt;code&gt;public&lt;/code&gt; folder: the static website)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone &amp;lt;&amp;lt;your-project&amp;gt;-hugo-url&amp;gt; &amp;amp;&amp;amp; cd &amp;lt;your-project&amp;gt;-hugo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make your website work locally (&lt;code&gt;hugo server -t &amp;lt;yourtheme&amp;gt;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Once you are happy with the results, &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;C&lt;/kbd&gt; (kill server) and &lt;code&gt;rm -rf public&lt;/code&gt; (don&amp;rsquo;t worry, it can always be regenerated with &lt;code&gt;hugo -t &amp;lt;yourtheme&amp;gt;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git submodule add -b master git@github.com:&amp;lt;username&amp;gt;/&amp;lt;username&amp;gt;.github.io.git public&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Almost done: add a &lt;code&gt;deploy.sh&lt;/code&gt; script to help you (and make it executable: &lt;code&gt;chmod +x deploy.sh&lt;/code&gt;):&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

# Build the project.
hugo # if using a theme, replace by `hugo -t &amp;lt;yourtheme&amp;gt;`

# Go To Public folder
cd public
# Add changes to git.
git add -A

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin master

# Come Back
cd ..
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;./deploy.sh &amp;quot;Your optional commit message&amp;quot;&lt;/code&gt; to send changes to &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt; (careful, you may also want to commit changes on the &lt;code&gt;&amp;lt;your-project&amp;gt;-hugo&lt;/code&gt; repo).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That&amp;rsquo;s it! Your personal page is running at &lt;a href=&#34;http://username.github.io/&#34;&gt;http://username.github.io/&lt;/a&gt; (after up to 10 minutes delay).&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Hopefully this tutorial helped you get your website off its feet and out into the open! If you have any further questions, feel free to contact the community through the &lt;a href=&#34;https://delphic-digital.github.io/Skeletor.docs/community/mailing-list/&#34;&gt;discussion forum&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MathJax Support</title>
      <link>https://delphic-digital.github.io/Skeletor.docs/tutorials/mathjax/</link>
      <pubDate>Thu, 20 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://delphic-digital.github.io/Skeletor.docs/tutorials/mathjax/</guid>
      <description>

&lt;h2 id=&#34;what-is-mathjax&#34;&gt;What is MathJax?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mathjax.org/&#34;&gt;MathJax&lt;/a&gt; is a JavaScript library that allows the display of mathematical expressions described via a LaTeX-style syntax in the HTML (or Markdown) source of a web page. As it is a pure a JavaScript library, getting it to work within Hugo is fairly straightforward, but does have some oddities that will be discussed here.&lt;/p&gt;

&lt;p&gt;This is not an introduction into actually using MathJax to render typeset mathematics on your website. Instead, this page is a collection of tips and hints for one way to get MathJax working on a website built with Hugo.&lt;/p&gt;

&lt;h2 id=&#34;enabling-mathjax&#34;&gt;Enabling MathJax&lt;/h2&gt;

&lt;p&gt;The first step is to enable MathJax on pages that you would like to have typeset math. There are multiple ways to do this (adventurous readers can consult the &lt;a href=&#34;http://docs.mathjax.org/en/latest/configuration.html&#34;&gt;Loading and Configuring&lt;/a&gt; section of the MathJax documentation for additional methods of including MathJax), but the easiest way is to use the secure MathJax CDN by including the following HTML snippet in the source of a page:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;
  src=&amp;quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;quot;&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One way to ensure that this code is included in all pages is to put it in one of the templates that live in the &lt;code&gt;layouts/partials/&lt;/code&gt; directory. For example, I have included this in the bottom of my template &lt;code&gt;footer.html&lt;/code&gt; because I know that the footer will be included in every page of my website.&lt;/p&gt;

&lt;h3 id=&#34;options-and-features&#34;&gt;Options and Features&lt;/h3&gt;

&lt;p&gt;MathJax is a stable open-source library with many features. I encourage the interested reader to view the &lt;a href=&#34;http://docs.mathjax.org/en/latest/index.html&#34;&gt;MathJax Documentation&lt;/a&gt;, specifically the sections on &lt;a href=&#34;http://docs.mathjax.org/en/latest/index.html#basic-usage&#34;&gt;Basic Usage&lt;/a&gt; and &lt;a href=&#34;http://docs.mathjax.org/en/latest/index.html#mathjax-configuration-options&#34;&gt;MathJax Configuration Options&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;issues-with-markdown&#34;&gt;Issues with Markdown&lt;/h2&gt;

&lt;p&gt;After enabling MathJax, any math entered in-between proper markers (see documentation) will be processed and typeset in the web page. One issue that comes up, however, with Markdown is that the underscore character (&lt;code&gt;_&lt;/code&gt;) is interpreted by Markdown as a way to wrap text in &lt;code&gt;emph&lt;/code&gt; blocks while LaTeX (MathJax) interprets the underscore as a way to create a subscript. This &amp;ldquo;double speak&amp;rdquo; of the underscore can result in some unexpected and unwanted behavior.&lt;/p&gt;

&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;

&lt;p&gt;There are multiple ways to remedy this problem. One solution is to simply escape each underscore in your math code by entering &lt;code&gt;\_&lt;/code&gt; instead of &lt;code&gt;_&lt;/code&gt;. This can become quite tedious if the equations you are entering are full of subscripts.&lt;/p&gt;

&lt;p&gt;Another option is to tell Markdown to treat the MathJax code as verbatim code and not process it. One way to do this is to wrap the math expression inside a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt; block. Markdown would ignore these sections and they would get passed directly on to MathJax and processed correctly. This works great for display style mathematics, but for inline math expressions the line break induced by the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; is not acceptable. The syntax for instructing Markdown to treat inline text as verbatim is by wrapping it in backticks (&lt;code&gt;`&lt;/code&gt;). You might have noticed, however, that the text included in between backticks is rendered differently than standard text (on this site these are items highlighted in red). To get around this problem, we could create a new CSS entry that would apply standard styling to all inline verbatim text that includes MathJax code. Below I will show the HTML and CSS source that would accomplish this (note this solution was adapted from &lt;a href=&#34;http://doswa.com/2011/07/20/mathjax-in-markdown.html&#34;&gt;this blog post&lt;/a&gt;&amp;mdash;all credit goes to the original author).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/x-mathjax-config&amp;quot;&amp;gt;
MathJax.Hub.Config({
  tex2jax: {
    inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],
    displayMath: [[&#39;$$&#39;,&#39;$$&#39;], [&#39;\[&#39;,&#39;\]&#39;]],
    processEscapes: true,
    processEnvironments: true,
    skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;],
    TeX: { equationNumbers: { autoNumber: &amp;quot;AMS&amp;quot; },
         extensions: [&amp;quot;AMSmath.js&amp;quot;, &amp;quot;AMSsymbols.js&amp;quot;] }
  }
});
&amp;lt;/script&amp;gt;

&amp;lt;script type=&amp;quot;text/x-mathjax-config&amp;quot;&amp;gt;
  MathJax.Hub.Queue(function() {
    // Fix &amp;lt;code&amp;gt; tags after MathJax finishes running. This is a
    // hack to overcome a shortcoming of Markdown. Discussion at
    // https://github.com/mojombo/jekyll/issues/199
    var all = MathJax.Hub.getAllJax(), i;
    for(i = 0; i &amp;lt; all.length; i += 1) {
        all[i].SourceElement().parentNode.className += &#39; has-jax&#39;;
    }
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As before, this content should be included in the HTML source of each page that will be using MathJax. The next code snippet contains the CSS that is used to have verbatim MathJax blocks render with the same font style as the body of the page.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;code.has-jax {font: inherit;
              font-size: 100%;
              background: inherit;
              border: inherit;
              color: #515151;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the CSS snippet, notice the line &lt;code&gt;color: #515151;&lt;/code&gt;. &lt;code&gt;#515151&lt;/code&gt; is the value assigned to the &lt;code&gt;color&lt;/code&gt; attribute of the &lt;code&gt;body&lt;/code&gt; class in my CSS. In order for the equations to fit in with the body of a web page, this value should be the same as the color of the body.&lt;/p&gt;

&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;With this setup, everything is in place for a natural usage of MathJax on pages generated using Hugo. In order to include inline mathematics, just put LaTeX code in between &lt;code&gt;`$ TeX Code $`&lt;/code&gt; or &lt;code&gt;`\( TeX Code \)`&lt;/code&gt;. To include display style mathematics, just put LaTeX code in between &lt;code&gt;&amp;lt;div&amp;gt;$$TeX Code$$&amp;lt;/div&amp;gt;&lt;/code&gt;. All the math will be properly typeset and displayed within your Hugo generated web page!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://delphic-digital.github.io/Skeletor.docs/tutorials/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://delphic-digital.github.io/Skeletor.docs/tutorials/migrate-from-jekyll/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Hugo 0.15 comes with a &lt;code&gt;hugo import jekyll&lt;/code&gt; command, see &lt;a href=&#34;https://delphic-digital.github.io/Skeletor.docs/commands/hugo_import_jekyll/&#34;&gt;import from Jekyll&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;move-static-content-to-static&#34;&gt;Move static content to &lt;code&gt;static&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Jekyll has a rule that any directory not starting with &lt;code&gt;_&lt;/code&gt; will be copied as-is to the &lt;code&gt;_site&lt;/code&gt; output. Hugo keeps all static content under &lt;code&gt;static&lt;/code&gt;. You should therefore move it all there.
With Jekyll, something that looked like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ images/
        logo.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;should become&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ static/
        ▾ images/
            logo.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as &lt;code&gt;CNAME&lt;/code&gt;) to be moved to &lt;code&gt;static&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-your-hugo-configuration-file&#34;&gt;Create your Hugo configuration file&lt;/h2&gt;

&lt;p&gt;Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the &lt;a href=&#34;https://delphic-digital.github.io/Skeletor.docs/overview/configuration/&#34;&gt;Hugo configuration documentation&lt;/a&gt; for details.&lt;/p&gt;

&lt;h2 id=&#34;set-your-configuration-publish-folder-to-site&#34;&gt;Set your configuration publish folder to &lt;code&gt;_site&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The default is for Jekyll to publish to &lt;code&gt;_site&lt;/code&gt; and for Hugo to publish to &lt;code&gt;public&lt;/code&gt;. If, like me, you have &lt;a href=&#34;http://blog.blindgaenger.net/generate_github_pages_in_a_submodule.html&#34;&gt;&lt;code&gt;_site&lt;/code&gt; mapped to a git submodule on the &lt;code&gt;gh-pages&lt;/code&gt; branch&lt;/a&gt;, you&amp;rsquo;ll want to do one of two alternatives:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Change your submodule to point to map &lt;code&gt;gh-pages&lt;/code&gt; to public instead of &lt;code&gt;_site&lt;/code&gt; (recommended).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule deinit _site
git rm _site
git submodule add -b gh-pages git@github.com:your-username/your-repo.git public
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Or, change the Hugo configuration to use &lt;code&gt;_site&lt;/code&gt; instead of &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    ..
    &amp;quot;publishdir&amp;quot;: &amp;quot;_site&amp;quot;,
    ..
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;convert-jekyll-templates-to-hugo-templates&#34;&gt;Convert Jekyll templates to Hugo templates&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to &lt;a href=&#34;http://jekyllrb.com/docs/templates/&#34;&gt;Jekyll&amp;rsquo;s template documentation&lt;/a&gt; if you need to refresh your memory on how you built your blog and &lt;a href=&#34;https://delphic-digital.github.io/Skeletor.docs/layout/templates/&#34;&gt;Hugo&amp;rsquo;s template&lt;/a&gt; to learn Hugo&amp;rsquo;s way.&lt;/p&gt;

&lt;p&gt;As a single reference data point, converting my templates for &lt;a href=&#34;http://heyitsalex.net/&#34;&gt;heyitsalex.net&lt;/a&gt; took me no more than a few hours.&lt;/p&gt;

&lt;h2 id=&#34;convert-jekyll-plugins-to-hugo-shortcodes&#34;&gt;Convert Jekyll plugins to Hugo shortcodes&lt;/h2&gt;

&lt;p&gt;Jekyll has &lt;a href=&#34;http://jekyllrb.com/docs/plugins/&#34;&gt;plugins&lt;/a&gt;; Hugo has &lt;a href=&#34;https://delphic-digital.github.io/Skeletor.docs/doc/shortcodes/&#34;&gt;shortcodes&lt;/a&gt;. It&amp;rsquo;s fairly trivial to do a port.&lt;/p&gt;

&lt;h3 id=&#34;implementation&#34;&gt;Implementation&lt;/h3&gt;

&lt;p&gt;As an example, I was using a custom &lt;a href=&#34;https://github.com/alexandre-normand/alexandre-normand/blob/74bb12036a71334fdb7dba84e073382fc06908ec/_plugins/image_tag.rb&#34;&gt;&lt;code&gt;image_tag&lt;/code&gt;&lt;/a&gt; plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.&lt;/p&gt;

&lt;p&gt;Jekyll&amp;rsquo;s plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module Jekyll
  class ImageTag &amp;lt; Liquid::Tag
    @url = nil
    @caption = nil
    @class = nil
    @link = nil
    // Patterns
    IMAGE_URL_WITH_CLASS_AND_CAPTION =
    IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\w+)(\s+)((https?:\/\/|\/)(\S+))(\s+)&amp;quot;(.*?)&amp;quot;(\s+)-&amp;gt;((https?:\/\/|\/)(\S+))(\s*)/i
    IMAGE_URL_WITH_CAPTION = /((https?:\/\/|\/)(\S+))(\s+)&amp;quot;(.*?)&amp;quot;/i
    IMAGE_URL_WITH_CLASS = /(\w+)(\s+)((https?:\/\/|\/)(\S+))/i
    IMAGE_URL = /((https?:\/\/|\/)(\S+))/i
    def initialize(tag_name, markup, tokens)
      super
      if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK
        @class   = $1
        @url     = $3
        @caption = $7
        @link = $9
      elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION
        @class   = $1
        @url     = $3
        @caption = $7
      elsif markup =~ IMAGE_URL_WITH_CAPTION
        @url     = $1
        @caption = $5
      elsif markup =~ IMAGE_URL_WITH_CLASS
        @class = $1
        @url   = $3
      elsif markup =~ IMAGE_URL
        @url = $1
      end
    end
    def render(context)
      if @class
        source = &amp;quot;&amp;lt;figure class=&#39;#{@class}&#39;&amp;gt;&amp;quot;
      else
        source = &amp;quot;&amp;lt;figure&amp;gt;&amp;quot;
      end
      if @link
        source += &amp;quot;&amp;lt;a href=\&amp;quot;#{@link}\&amp;quot;&amp;gt;&amp;quot;
      end
      source += &amp;quot;&amp;lt;img src=\&amp;quot;#{@url}\&amp;quot;&amp;gt;&amp;quot;
      if @link
        source += &amp;quot;&amp;lt;/a&amp;gt;&amp;quot;
      end
      source += &amp;quot;&amp;lt;figcaption&amp;gt;#{@caption}&amp;lt;/figcaption&amp;gt;&amp;quot; if @caption
      source += &amp;quot;&amp;lt;/figure&amp;gt;&amp;quot;
      source
    end
  end
end
Liquid::Template.register_tag(&#39;image&#39;, Jekyll::ImageTag)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is written as this Hugo shortcode:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- image --&amp;gt;
&amp;lt;figure {{ with .Get &amp;quot;class&amp;quot; }}class=&amp;quot;{{.}}&amp;quot;{{ end }}&amp;gt;
    {{ with .Get &amp;quot;link&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt;{{ end }}
        &amp;lt;img src=&amp;quot;{{ .Get &amp;quot;src&amp;quot; }}&amp;quot; {{ if or (.Get &amp;quot;alt&amp;quot;) (.Get &amp;quot;caption&amp;quot;) }}alt=&amp;quot;{{ with .Get &amp;quot;alt&amp;quot;}}{{.}}{{else}}{{ .Get &amp;quot;caption&amp;quot; }}{{ end }}&amp;quot;{{ end }} /&amp;gt;
    {{ if .Get &amp;quot;link&amp;quot;}}&amp;lt;/a&amp;gt;{{ end }}
    {{ if or (or (.Get &amp;quot;title&amp;quot;) (.Get &amp;quot;caption&amp;quot;)) (.Get &amp;quot;attr&amp;quot;)}}
    &amp;lt;figcaption&amp;gt;{{ if isset .Params &amp;quot;title&amp;quot; }}
        {{ .Get &amp;quot;title&amp;quot; }}{{ end }}
        {{ if or (.Get &amp;quot;caption&amp;quot;) (.Get &amp;quot;attr&amp;quot;)}}&amp;lt;p&amp;gt;
        {{ .Get &amp;quot;caption&amp;quot; }}
        {{ with .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt; {{ end }}
            {{ .Get &amp;quot;attr&amp;quot; }}
        {{ if .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;/a&amp;gt; {{ end }}
        &amp;lt;/p&amp;gt; {{ end }}
    &amp;lt;/figcaption&amp;gt;
    {{ end }}
&amp;lt;/figure&amp;gt;
&amp;lt;!-- image --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;I simply changed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg &amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were &amp;quot;having fun&amp;quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; -&amp;gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to this (this example uses a slightly extended version named &lt;code&gt;fig&lt;/code&gt;, different than the built-in &lt;code&gt;figure&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{% fig class=&amp;quot;full&amp;quot; src=&amp;quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg&amp;quot; title=&amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; link=&amp;quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/&amp;quot; %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a bonus, the shortcode named parameters are, arguably, more readable.&lt;/p&gt;

&lt;h2 id=&#34;finishing-touches&#34;&gt;Finishing touches&lt;/h2&gt;

&lt;h3 id=&#34;fix-content&#34;&gt;Fix content&lt;/h3&gt;

&lt;p&gt;Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that &lt;code&gt;hugo server&lt;/code&gt; is your friend. Test your changes and fix errors as needed.&lt;/p&gt;

&lt;h3 id=&#34;clean-up&#34;&gt;Clean up&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn&amp;rsquo;t used, delete it.&lt;/p&gt;

&lt;h2 id=&#34;a-practical-example-in-a-diff&#34;&gt;A practical example in a diff&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://heyitsalex.net/&#34;&gt;Hey, it&amp;rsquo;s Alex&lt;/a&gt; was migrated in less than a &lt;em&gt;father-with-kids day&lt;/em&gt; from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this &lt;a href=&#34;https://github.com/alexandre-normand/alexandre-normand/compare/869d69435bd2665c3fbf5b5c78d4c22759d7613a...b7f6605b1265e83b4b81495423294208cc74d610&#34;&gt;diff&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>