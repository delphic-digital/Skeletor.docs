<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Skeletor Project</title>
    <link>https://delphic-digital.github.io/Skeletor.docs/</link>
    <description>Recent content on The Skeletor Project</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 24 Jun 2016 08:45:46 -0400</lastBuildDate>
    <atom:link href="https://delphic-digital.github.io/Skeletor.docs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Skeletor Project test</title>
      <link>https://delphic-digital.github.io/Skeletor.docs/</link>
      <pubDate>Fri, 24 Jun 2016 08:45:46 -0400</pubDate>
      
      <guid>https://delphic-digital.github.io/Skeletor.docs/</guid>
      <description>

&lt;h3 id=&#34;extensible-front-end-html-css-and-javascript-framework-constantly-being-update-to-the-bleeding-edge-of-web-technologies&#34;&gt;Extensible front-end HTML, CSS, and JavaScript framework. Constantly being update to the bleeding edge of web technologies.&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Skeletor</title>
      <link>https://delphic-digital.github.io/Skeletor.docs/overview/introduction/</link>
      <pubDate>Thu, 30 Jun 2016 13:29:04 +0000</pubDate>
      
      <guid>https://delphic-digital.github.io/Skeletor.docs/overview/introduction/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Skeletor&lt;/em&gt; is a powerful framework designed as an easy starting point for front end development of projects. It was designed to give you a quick and organized way to start developing web sites with best practices and patterns in mind. It makes use of the latest and greatest web technology and performance.&lt;/p&gt;

&lt;p&gt;Skeletor tries to achieve a very minimalistic design to remain as flexible as possible. Everything included is very basic architectural and skeleton code to give you a headstart. There isn&amp;rsquo;t much templated code, but there are the tools in place to quickly prototype up something. This framework is meant for intermediate to advanced front end developers.&lt;/p&gt;

&lt;h3 id=&#34;what-s-included&#34;&gt;What&amp;rsquo;s included?&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Gulp&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Tasks for everything from compiling Sass to live browser reloading.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sass&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Folder stucture with predefined partials.&lt;/li&gt;
&lt;li&gt;Globbling to automatically include component partials.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;RequireJS module loading for easy dependency management.&lt;/li&gt;
&lt;li&gt;Extensible JavaScript framework like Zurb&amp;rsquo;s Foundation or Twitter Bootstrap.&lt;/li&gt;
&lt;li&gt;Compatible component plugins.&lt;/li&gt;
&lt;li&gt;Bower for vendor package management.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;disclaimer&#34;&gt;Disclaimer&lt;/h4&gt;

&lt;p&gt;This project and site gets updated as more best practices or discoveries are implemented.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setup</title>
      <link>https://delphic-digital.github.io/Skeletor.docs/overview/setup/</link>
      <pubDate>Thu, 30 Jun 2016 13:29:04 +0000</pubDate>
      
      <guid>https://delphic-digital.github.io/Skeletor.docs/overview/setup/</guid>
      <description>

&lt;p&gt;Skeletor uses open source tools for its workflow. If you haven&amp;rsquo;t installed these requirements please do so.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Install Gulp &lt;code&gt;npm install --g gulp-cli&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Install Bower &lt;code&gt;npm install -g bower&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;installing&#34;&gt;Installing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Fork/Clone/Download the &lt;a href=&#34;https://github.com/delphic-digital/Skeletor&#34;&gt;Skeletor&lt;/a&gt; repository into your machine.&lt;/li&gt;
&lt;li&gt;Open a terminal and install the Node.Js dependencies by running &lt;code&gt;npm install&lt;/code&gt; in your project directory.&lt;/li&gt;
&lt;li&gt;Install client side dependencies with bower by running &lt;code&gt;bower install&lt;/code&gt; in your project directory.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Several things happened happened when you can the commands. &lt;code&gt;npm&lt;/code&gt; installed all the nodejs dependencies needed for gulp to do its work. You only have to run this once. &lt;code&gt;bower&lt;/code&gt; installed some predefined javascript dependencies for use on your site. This is what was installed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;onMediaQuery&lt;/li&gt;
&lt;li&gt;picturefill&lt;/li&gt;
&lt;li&gt;svg4everybody&lt;/li&gt;
&lt;li&gt;normalize-css&lt;/li&gt;
&lt;li&gt;skeletor.browsehappy,&lt;/li&gt;
&lt;li&gt;skeletor.sass.utilities,&lt;/li&gt;
&lt;li&gt;skeletor.sass.helpers,&lt;/li&gt;
&lt;li&gt;skeletor.util.componentLoader&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can continue to use bower to install vendor plugins&lt;/p&gt;

&lt;h2 id=&#34;config&#34;&gt;Config&lt;/h2&gt;

&lt;p&gt;Before you get started, you will need to update some config options for gulp. Open the config file that is here:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;skeletor
|-- gulp
|   |-- config.js
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var localHostname = &#39;localhost.com&#39;, // Change to your local website that is running if you want to proxy it to browser-sync.
    siteShortname = &#39;skeletor&#39;, // Used for JavaScript optimaztion and should match your main.js namespace:  skeletor.main.js
    baseLayoutDir = &#39;./&#39;, // Where your index or base layout file is.
    baseLayoutFile = &#39;index.html&#39;, // The filename of your index or base layout. This is used to change the script included from src to dist.
    views = &#39;./*.html&#39;, // Where browser-sync should watch for HTML changes
    src = &#39;./Static/src&#39;, // Where the sass and js src are, probably don&#39;t need to change
    dist = &#39;./Static/dist&#39;, // Where everything gets compiled to, probably don&#39;t need to change
    assets = &#39;./Static/assets&#39; // Where fonts and images, and other static assets should go. Probably don&#39;t need to change.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;starting&#34;&gt;Starting&lt;/h2&gt;

&lt;p&gt;Run gulp to automatically open a new Skeletor project running on localhost:3000.&lt;/p&gt;

&lt;h2 id=&#34;file-structure&#34;&gt;File structure&lt;/h2&gt;

&lt;p&gt;Compiled and production-ready code can be found in the &lt;code&gt;dist&lt;/code&gt; directory. The &lt;code&gt;src&lt;/code&gt; directory contains development code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;skeletor
|-- Gulp
|   |-- # Lots of gulp stuff
|-- Static
|   |-- assets
|   |   |-- images
|   |   |   |-- # Your image files
|   |   |-- spritesheets
|   |       |-- # Your spritesheets get generated here
|   |-- dist
|   |   |-- css
|   |   |   |-- main.css # Your Sass gets compiled here
|   |   |-- js
|   |   |   |-- lib
|   |   |   |   |-- require.js
|   |-- src
|       |-- js
|       |   |-- skeletor.main.js
|       |   |-- components
|       |   |   |-- common.js
|       |   |   |-- common
|       |   |   |   |-- # Your common components here
|       |-- scss
|       |   |-- main.scss
|       |   |-- partials
|       |       |-- _settings.scss
|       |       |-- base
|       |       |   |-- _buttons.scss
|       |       |   |-- _fonts.scss
|       |       |   |-- _inputs.scss
|       |       |   |-- _scaffolding.scss
|       |       |   |-- _sprites.scss
|       |       |   |-- _svg.scss
|       |       |   |-- _typography.scss
|       |       |-- components
|       |       |   |-- # Your sites Sass components
|       |       |-- layout
|       |           |-- _footer.scss
|       |           |-- _forms.scss
|       |           |-- _header.scss
|       |           |-- _sidebar.scss
|       |-- sprites
|       |   |-- bitmap.example.handlebars
|       |   |-- inline.mustache
|       |   |-- vector.example.html
|       |   |-- bitmaps
|       |   |   |-- # Your bitmap (png/jpg) sprites
|       |   |-- inline
|       |   |   |-- # Your CSS sprites
|       |   |-- vectors
|       |       |-- # Your svg spritesheet sprites
|       |-- styleguide
|           |-- styleguide_overrides.css
|           |-- styleguide_variables.css
|-- .bowerrc
|-- .editorconfig
|-- .gitignore
|-- bower.json
|-- config.json
|-- gulpfile.js
|-- index.html
|-- package.json
|-- README.md

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Usage</title>
      <link>https://delphic-digital.github.io/Skeletor.docs/overview/usage/</link>
      <pubDate>Thu, 30 Jun 2016 13:29:04 +0000</pubDate>
      
      <guid>https://delphic-digital.github.io/Skeletor.docs/overview/usage/</guid>
      <description>

&lt;p&gt;Skeletor uses gulp as a task runner and several commands are available to use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# run Gulp in development mode (does not minify your JS for quicker response),
# start the server, open a new browser tab at localhost:3000 and start watching files.
# JS script include path is updated to src directory in base template.
# Sass is automatically compiled, and sprites are automatically generated.
$ gulp
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# run Gulp in production mode (runs your JS code through the requirejs optimizer),
# JS path is updated to dist directory in base template,
# will not start any server or watch.
$ gulp build
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installing-components&#34;&gt;Installing components&lt;/h2&gt;

&lt;p&gt;Skeletor integrates with bower package management very nicely for vendor components. See &lt;a href=&#34;http://bower.io&#34;&gt;http://bower.io&lt;/a&gt; for more info.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# install a vendor component with bower
# main component files are automatically wired up to Skeletor
# js main is added to requirejs paths config.
# css/scss is added to main.scss
$ bower install &amp;lt;package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is some automation that happens when you use bower. Please take care to understand these steps.
The files are determined by what&amp;rsquo;s declared as a &lt;strong&gt;main&lt;/strong&gt; file by the &lt;code&gt;bower.json&lt;/code&gt; spec.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript files are added to the requirejs paths config:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Automatically injected Bower JS dependencies via bowerRequireJS
require.config({
    paths: {
        &amp;quot;bower-example&amp;quot;: &amp;quot;../../../bower_components/bower-example&amp;quot;,
    },
    packages: [

    ],
    shim: {

    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;CSS/SASS files are added to the main.scss:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scss&#34;&gt;// Automatically injected Bower CSS dependencies via wiredep (never manually edit this block)
// bower:css
@import &amp;quot;../../../bower_components/bower-example.css&amp;quot;;
// endbower

// Automatically injected Bower SCSS dependencies via wiredep (never manually edit this block)
// bower:scss
@import &amp;quot;../../../bower_components/bower-example.scss&amp;quot;;
// endbower
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If something goes wrong (correct files aren&amp;rsquo;t wired up), check the components bower.json file to make sure the &lt;code&gt;&amp;quot;main&amp;quot;: []&lt;/code&gt; is declared correctly. If not, you can add an override for your project&amp;rsquo;s &lt;code&gt;bower.json&lt;/code&gt; file. See &lt;a href=&#34;https://github.com/ck86/main-bower-files#overrides-options&#34;&gt;https://github.com/ck86/main-bower-files#overrides-options&lt;/a&gt; for how to do this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sass</title>
      <link>https://delphic-digital.github.io/Skeletor.docs/overview/sass/</link>
      <pubDate>Thu, 30 Jun 2016 13:29:04 +0000</pubDate>
      
      <guid>https://delphic-digital.github.io/Skeletor.docs/overview/sass/</guid>
      <description>

&lt;p&gt;Skeletor comes with Sass and a structure setup. The following Sass helper libraries and plugins are preinstalled:
 * &lt;a href=&#34;http://susy.oddbird.net&#34;&gt;Susy&lt;/a&gt;, great for robust grids
 * &lt;a href=&#34;http://bourbon.io&#34;&gt;Bourbon&lt;/a&gt;, awesome set of mixins
 * &lt;a href=&#34;http://breakpoint-sass.com&#34;&gt;Breakpoint&lt;/a&gt;, used with a custom mixin to make breakpoints easy
 * &lt;a href=&#34;https://github.com/britco/node-sass-globbing&#34;&gt;Node Sass Globbing&lt;/a&gt;, so you don&amp;rsquo;t have to add custom partials to the main.scss. Be careful of casscading rules!!&lt;/p&gt;

&lt;h2 id=&#34;brief-overview-of-structure&#34;&gt;Brief overview of structure&lt;/h2&gt;

&lt;h3 id=&#34;main-scss&#34;&gt;&lt;code&gt;main.scss&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;main.scss&lt;/code&gt; file contains the entries points for the sites sass partials.&lt;/p&gt;

&lt;h4 id=&#34;partials&#34;&gt;&lt;code&gt;partials&lt;/code&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_settings.scss&lt;/code&gt; site settings defined here, it contains variables for all of the colors, font stacks, breakpoints, and sizing.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;base&lt;/code&gt; holds global and base styles.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;components&lt;/code&gt; holds site components styles. Any partial added here is automatically imported with the globbing plugin&lt;/li&gt;
&lt;li&gt;&lt;code&gt;layout&lt;/code&gt; holds global layout styles.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;utilites&lt;/code&gt; holds mixins and SASS utilites.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;overview-of-best-practices-for-writing-sass-css-with-skeletor&#34;&gt;Overview of best practices for writing SASS/CSS with Skeletor&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.zell-weekeat.com/how-to-write-mobile-first-css&#34;&gt;Mobile First&lt;/a&gt;, mobile first approach&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://smacss.com&#34;&gt;SMACSS&lt;/a&gt;, css design process&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://css-tricks.com/bem-101&#34;&gt;BEM&lt;/a&gt;, naming convention for CSS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Notes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We found using a traditional mobile first structure within each component partial is better for maintainability than inlining media queries into each class. This way, there is only one of each breakpoints defined in each component, instead of scattered throughout. This makes a big difference on large scale sites.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scss&#34;&gt;.main-nav {
    /* Mobile main nav styles */

    &amp;amp;__list {

    }

    &amp;amp;__item {

    }

    @include breakpoint($medium){

        &amp;amp;__list {

        }

        &amp;amp;__item {

        }
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;instead of&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scss&#34;&gt;.main-nav {

    @include breakpoint($medium){}

    &amp;amp;__list {
        @include breakpoint($medium){}
    }

    &amp;amp;__item {
        @include breakpoint($medium){}
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Javascript</title>
      <link>https://delphic-digital.github.io/Skeletor.docs/overview/javascript/</link>
      <pubDate>Thu, 30 Jun 2016 13:29:04 +0000</pubDate>
      
      <guid>https://delphic-digital.github.io/Skeletor.docs/overview/javascript/</guid>
      <description>

&lt;p&gt;Skeletor comes with JavaScript structure using &lt;a href=&#34;http://requirejs.org&#34;&gt;RequireJS&lt;/a&gt;. Some JS helper libraries and plugins are included automatically:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jquery.com&#34;&gt;jQuery&lt;/a&gt;, version 2 is automatically loaded for browers that support it, otherwise the 1.9 branch is used.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://browser-update.org&#34;&gt;Browser Update&lt;/a&gt;, tell your audience to use modern browsers!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/JoshBarr/on-media-query&#34;&gt;onMediaQuery&lt;/a&gt;, works great for triggering javascript for certain media queries.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/scottjehl/picturefill&#34;&gt;Picturefill&lt;/a&gt;, there is no reason to not use reponsive images.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;brief-overview-of-structure&#34;&gt;Brief overview of structure&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Inside &lt;code&gt;components&lt;/code&gt; will be your sites custom requirejs modules.

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;common&lt;/code&gt; folder contains components that are global and be concatenated to the main.js when built.&lt;/li&gt;
&lt;li&gt;other components will be standalone and won&amp;rsquo;t be concatenated with the main (common) JS. These can be loaded directly with the HTML.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data-component-and-data-component-context&#34;&gt;data-component and data-component-context&lt;/h3&gt;

&lt;p&gt;To load a JS component, use the sample syntax in &lt;code&gt;component-example.js&lt;/code&gt;, and add a data-component to the html element that should load the JS.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;!-- component-example.js will be loaded anytime this HTML is present on the page --&amp;gt;
&amp;lt;div class=&amp;quot;component-example&amp;quot; data-component=&amp;quot;component-example&amp;quot;&amp;gt;
    Lorem ipsum
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To load a JS component for only certain media queries, add a data-component-context to the html element. For multiple states, comma separate the values.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;!-- component-example.js will be loaded only in tablet and desktop --&amp;gt;
&amp;lt;div class=&amp;quot;component-example&amp;quot; data-component=&amp;quot;component-example&amp;quot; data-component-context=&amp;quot;tablet,desktop&amp;quot;&amp;gt;
    Lorem ipsum
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These components are aynced in after page load and will remain separate modules in the build process.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating a plugin</title>
      <link>https://delphic-digital.github.io/Skeletor.docs/contribute/writing-a-plugin/</link>
      <pubDate>Fri, 24 Jun 2016 16:37:49 -0400</pubDate>
      
      <guid>https://delphic-digital.github.io/Skeletor.docs/contribute/writing-a-plugin/</guid>
      <description>

&lt;p&gt;Creating a plugin for Skeletor is easy. There is a plugin factory included in &lt;code&gt;Skeletor.core&lt;/code&gt;,&lt;/p&gt;

&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Skeletor.core&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;The plugin factory requires a few things to be defined in your plugin prior to calling the plugin factory function.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Your plugin&amp;rsquo;s constructor, calling &lt;code&gt;__super__&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;DEFAULTS&lt;/code&gt; static property on your plugin&amp;rsquo;s constructor&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;VERSION&lt;/code&gt; static property on your plugin&amp;rsquo;s constructor&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;creating-your-plugin&#34;&gt;Creating your plugin&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s look at an example. In this example, we&amp;rsquo;re going to create a &lt;code&gt;button&lt;/code&gt; plugin. To do so, we will use the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;define(
	[
		&#39;$&#39;,
		&#39;plugin&#39;
	],
	function($, Plugin) {
		function Button(element, options) {
			Button.__super__.call(this, element, options, Button.DEFAULTS);
		}

		Button.VERSION = &#39;0.0.1&#39;;

		Button.DEFAULTS = {
			cssClass = &#39;button&#39;
		};

		Plugin.create(&#39;button&#39;, Button, {
			_init: function(element) {
			}
		});
	}
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First, we declare a &lt;code&gt;Button&lt;/code&gt; constructor, and VERSION and DEFAULTS properties. We then invoke the static &lt;code&gt;Plugin.create&lt;/code&gt; function. Through prototypal inheritance, this function extends the &lt;code&gt;Button&lt;/code&gt; prototype with the &lt;code&gt;Plugin&lt;/code&gt; prototype. Additionally, it creates our Zepto plugin interface.&lt;/p&gt;

&lt;p&gt;To create a button instance, you merely need to use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;&amp;lt;button /&amp;gt;&#39;).button();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-plugin-factory-method&#34;&gt;The Plugin factory method&lt;/h2&gt;

&lt;p&gt;Extends a plugin using the &lt;code&gt;Plugin&lt;/code&gt; prototype.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter&amp;nbsp;name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;name&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The name of the plugin, in lowercase.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ctor&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The constructor of the plugin we want to extend.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;prototype&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Additional methods we want to extend onto our plugin&amp;rsquo;s prototype. The prototype must declare an _init function, which is used for plugin construction.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;See the example above for usage.&lt;/p&gt;

&lt;h2 id=&#34;invoking-methods-on-a-plugin&#34;&gt;Invoking methods on a plugin.&lt;/h2&gt;

&lt;p&gt;The plugin factory facilitates invoking methods via the plugin interface. This means that once a plugin is initialized, public methods can be invoked by passing the name of the method as the first parameter to the plugin function.&lt;/p&gt;

&lt;p&gt;Public methods are methods defined on the object passed into the &lt;code&gt;Plugin.create&lt;/code&gt; factory method that aren&amp;rsquo;t preceded by an &lt;em&gt;underscore&lt;/em&gt; character. Methods preceded by an &lt;em&gt;underscore&lt;/em&gt; are considered private methods.&lt;/p&gt;

&lt;p&gt;Using our &lt;code&gt;button&lt;/code&gt; example above, here&amp;rsquo;s what public methods would look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;define(
	[
		&#39;$&#39;,
		&#39;plugin&#39;
	],
	function($, Plugin) {
		function Button(element, options) {
			Button.__super__.call(this, element, options, Button.DEFAULTS);
		}

		Button.VERSION = &#39;0.0.1&#39;;

		Button.DEFAULTS = {
			cssClass = &#39;button&#39;
		};

		Plugin.create(&#39;button&#39;, Button, {
			_init: function(element) {
				this.$element = $(element);
			},
			enable: function() {
				this.$element.removeAttr(&#39;disabled&#39;);
			},
			disable: function() {
				this.$element.attr(&#39;disabled&#39;, &#39;disabled&#39;);
			},
			isEnabled: function() {
				return !this.$element[0].hasAttribute(&#39;disabled&#39;);
			}
		});
	}
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example, the &lt;code&gt;enable&lt;/code&gt; and &lt;code&gt;disable&lt;/code&gt; functions are public. To invoke the method, simply pass the method name into the plugin function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var $button = $(&#39;&amp;lt;button /&amp;gt;&#39;).button();

$button.button(&#39;disable&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;method-return-values&#34;&gt;Method return values&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s important to note that there&amp;rsquo;s some specific behaviour around invoking methods that return a value when using a single element vs. a set of elements.&lt;/p&gt;

&lt;p&gt;When invoking a method against a single element, and when that method returns a value, the value will be returned as expected.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var $button = $(&#39;&amp;lt;button /&amp;gt;&#39;).button();

var enabled = $button.button(&#39;isEnabled&#39;); // returns true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When invoking a method against a set of elements, and when that method returns a value, the original set of elements will be returned.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var $buttons = $(&#39;.lots-of-buttons&#39;).button();

var enabled = $buttons.button(&#39;isEnabled&#39;); // returns original set of elements
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This behaviour is intentional, as it&amp;rsquo;s assumed that it&amp;rsquo;s unlikely to be calling methods against a set of elements when expecting primitive values in return.&lt;/p&gt;

&lt;h2 id=&#34;usage-with-skeletor-boilerplate&#34;&gt;Usage with Skeletor boilerplate&lt;/h2&gt;

&lt;p&gt;The plugin can be installed using bower:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bower install plugin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Skeletor will auto wire it up to your require.js config file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &#39;paths&#39;: {
    &#39;plugin&#39;: &#39;bower_components/plugin&#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Skeletor.flyouts</title>
      <link>https://delphic-digital.github.io/Skeletor.docs/plugins/flyouts/</link>
      <pubDate>Fri, 24 Jun 2016 09:30:03 -0400</pubDate>
      
      <guid>https://delphic-digital.github.io/Skeletor.docs/plugins/flyouts/</guid>
      <description>&lt;p&gt;Flyout menu system.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Skeletor.browsehappy</title>
      <link>https://delphic-digital.github.io/Skeletor.docs/plugins/browsehappy/</link>
      <pubDate>Fri, 24 Jun 2016 09:27:49 -0400</pubDate>
      
      <guid>https://delphic-digital.github.io/Skeletor.docs/plugins/browsehappy/</guid>
      <description>&lt;p&gt;Show an unobstrusive notification bar if your browser is out dated.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sprites</title>
      <link>https://delphic-digital.github.io/Skeletor.docs/overview/sprites/</link>
      <pubDate>Thu, 30 Jun 2016 13:29:04 +0000</pubDate>
      
      <guid>https://delphic-digital.github.io/Skeletor.docs/overview/sprites/</guid>
      <description>

&lt;p&gt;Skeletor comes with easy ways to create 3 different types of sprites.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Ensighten/grunt-spritesmith&#34;&gt;Spritesmith&lt;/a&gt; to create a bitmap spritesheet with retina support;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jkphl/svg-sprite&#34;&gt;svg-sprite&lt;/a&gt; to create a vector spritesheet made out of svgs.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.sgalinski.de/toolchain/gulp-inline-svg&#34;&gt;gulp-inline-svg&lt;/a&gt; to inline an svg directory in the CSS.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;bitmap&#34;&gt;Bitmap&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Drop a png and corresponding retina (image@2x.png naming convention) in &lt;code&gt;src/sprites/bitmaps&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Gulp will add your new image to the spritesheet at &lt;code&gt;Static/assets/spritesheets/bitmap.spritesheet.png&lt;/code&gt; and retina sheet at &lt;code&gt;/Static/assets/spritesheets/bitmap.spritesheet@2x.png&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use this mixin in your sass to include sprite with retina&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sass&#34;&gt;@include retina-sprite($nameOfImage-group); //The `-group` after the name is important.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;vector&#34;&gt;Vector&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Drop an svg in &lt;code&gt;src/sprites/vector&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Gulp will add your new image to the spritesheet at &lt;code&gt;Static/assets/spritesheets/vector.spritesheet.svg&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can now utilize the svg use tag in your html!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;svg&amp;gt;
    &amp;lt;use xlink:href=&amp;quot;/Static/assets/spritesheets/vector.spritesheet.svg#nameOfImage&amp;quot;&amp;gt;&amp;lt;/use&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;inline&#34;&gt;Inline&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Drop an svg in &lt;code&gt;src/sprites/inline&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Gulp will add your new image to the sass partial at &lt;code&gt;src/scss/partials/base/_svg.scss&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can now inline your svg into your sass with a mixin&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/**
@include inline-svg($nameOfImage, $fillColorString)
**/

@include inline-svg($plus, #CCC)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Styleguide</title>
      <link>https://delphic-digital.github.io/Skeletor.docs/overview/styleguide/</link>
      <pubDate>Thu, 30 Jun 2016 13:29:04 +0000</pubDate>
      
      <guid>https://delphic-digital.github.io/Skeletor.docs/overview/styleguide/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/SC5/sc5-styleguide&#34;&gt;sc5-styleguide&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Release Notes</title>
      <link>https://delphic-digital.github.io/Skeletor.docs/meta/release-notes/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://delphic-digital.github.io/Skeletor.docs/meta/release-notes/</guid>
      <description>

&lt;h2 id=&#34;2-0&#34;&gt;2.0&lt;/h2&gt;

&lt;p&gt;Skeletor 2.0 release has an all new JavaScript framework.&lt;/p&gt;

&lt;h3 id=&#34;new-features&#34;&gt;New features&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create extensible JavaScript plugins.&lt;/li&gt;
&lt;li&gt;Bower integration for 3rd party scripts&lt;/li&gt;
&lt;li&gt;Bower integration for your own scripts&lt;/li&gt;
&lt;li&gt;Current components converted over to new Skeletor framework&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1-0&#34;&gt;1.0&lt;/h2&gt;

&lt;p&gt;Skeletor 1.0 switched to gulp from grunt&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Skeletor Roadmap</title>
      <link>https://delphic-digital.github.io/Skeletor.docs/meta/roadmap/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://delphic-digital.github.io/Skeletor.docs/meta/roadmap/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Accordion component&lt;/li&gt;
&lt;li&gt;Tab component&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>License</title>
      <link>https://delphic-digital.github.io/Skeletor.docs/meta/license/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://delphic-digital.github.io/Skeletor.docs/meta/license/</guid>
      <description>

&lt;p&gt;Skeletor is relased under the BSD 3-Clause License.&lt;/p&gt;

&lt;h2 id=&#34;the-bsd-3-clause-license&#34;&gt;The BSD 3-Clause License&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/BSD-3-Clause&#34;&gt;https://opensource.org/licenses/BSD-3-Clause&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copyright &amp;copy; 2016, Jeff Mills
All rights reserved.&lt;/p&gt;

&lt;p&gt;Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &amp;ldquo;AS IS&amp;rdquo; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>