<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Skeletor Project</title>
    <link>http://skele.to/r/index.xml</link>
    <description>Recent content on The Skeletor Project</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 24 Jun 2016 08:45:46 -0400</lastBuildDate>
    <atom:link href="http://skele.to/r/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Skeletor Project test</title>
      <link>http://skele.to/r/</link>
      <pubDate>Fri, 24 Jun 2016 08:45:46 -0400</pubDate>
      
      <guid>http://skele.to/r/</guid>
      <description>

&lt;h2 id=&#34;extensible-front-end-framework&#34;&gt;Extensible front-end framework.&lt;/h2&gt;

&lt;p&gt;Skeletor is a powerful framework designed as a starting point for front end development of projects. It was designed to give you a quick and organized way to start developing web sites with best practices and patterns in mind. It makes use of the latest and greatest web technology and performance.&lt;/p&gt;

&lt;p&gt;Skeletor tries to achieve a very minimalistic design to remain as flexible as possible. Everything included is very basic skeleton code to give you a headstart. There isn&amp;rsquo;t much templated code, but there are the tools and patterns in place to quickly prototype anything. This framework is meant for intermediate to advanced front end developers.&lt;/p&gt;

&lt;h3 id=&#34;what-s-included&#34;&gt;What&amp;rsquo;s included?&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Gulp&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Tasks for everything from compiling Sass to live browser reloading.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sass&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Folder stucture with predefined partials.&lt;/li&gt;
&lt;li&gt;Globbling to automatically include component partials.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Context aware component loading for on demand/aync loading&lt;/li&gt;
&lt;li&gt;RequireJS module loading for easy dependency management.&lt;/li&gt;
&lt;li&gt;Extensible JavaScript framework like Zurb&amp;rsquo;s Foundation or Twitter Bootstrap.&lt;/li&gt;
&lt;li&gt;Compatible component plugins.&lt;/li&gt;
&lt;li&gt;Bower for vendor package management.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;get-started-overview-setup&#34;&gt;&lt;a href=&#34;http://skele.to/r/overview/setup/&#34;&gt;Get Started!&lt;/a&gt;&lt;/h2&gt;

&lt;h4 id=&#34;disclaimer&#34;&gt;Disclaimer&lt;/h4&gt;

&lt;p&gt;This project and site gets updated as more best practices or discoveries are implemented.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Javascript</title>
      <link>http://skele.to/r/development/javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://skele.to/r/development/javascript/</guid>
      <description>

&lt;p&gt;Skeletor comes with a JavaScript structure that utilizes &lt;a href=&#34;http://requirejs.org&#34;&gt;RequireJS&lt;/a&gt; for dependency and module loading. There are a couple reasons for this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: Skeletor uses best practices for loading JavaScript with a multi-page site. There is a &lt;em&gt;core&lt;/em&gt;, or commmon file that gets loading on everypage. After that, there are component level scripts that get loaded in after page load. These components are only loaded if that component exists on the page. It&amp;rsquo;s another way of doing page specific scripts, except this is refined down to the component level.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dependency managment&lt;/strong&gt; can become a big problem with JavaScript, AMD solves this.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;brief-overview-of-structure&#34;&gt;Brief overview of structure&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;skeletor
|-- Static
    |-- dist
    |   |-- js
    |       |-- # Your custom javascript is compiled here
    |       |-- lib
    |           |-- require.js
    |-- src
        |-- js
            |-- skeletor.main.js
            |-- components
            |-- common.js
            |-- common
                |-- # Your common components here

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;main&#34;&gt;Main&lt;/h4&gt;

&lt;p&gt;This is the &lt;code&gt;core&lt;/code&gt; and gets loaded on every page. It takes care of global utilities, global components, polyfills, and including the component loader.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Automatically injected Bower JS dependencies via bowerRequireJS
require.config({
    paths: {
    },
    packages: [

    ],
    shim: {

    }
});
// endbower

//Need a second config so the optimizer doesn&#39;t try and evaluate the browser only jquery conditional.

require.config({
    paths: {
        &#39;jquery&#39;: (document.addEventListener) ?
            [&#39;//code.jquery.com/jquery-3.0.0.min&#39;]
            :
            [&#39;//code.jquery.com/jquery-1.12.4.min&#39;] // https://github.com/rnsloan/requirejs-conditionally-load-jquery2
    }
})

define(function (require){

    var componentLoader   = require(&#39;skeletor.util.componentLoader&#39;),
        browsehappy       = require(&#39;skeletor.browsehappy&#39;),
        svg4everybody     = require(&#39;svg4everybody&#39;),
        picturefill       = require(&#39;picturefill&#39;),
        commonComponents  = require(&#39;./components/common&#39;);

    svg4everybody();
    commonComponents.init();

});
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;admonition note&#34;&gt;
	&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
	&lt;p class=&#34;admonition-desc&#34;&gt;Be sure to rename &lt;code&gt;skeletor.main.js&lt;/code&gt; with your siteShortName config setting, so it&amp;rsquo;s &lt;code&gt;nameofsite.main.js&lt;/code&gt;. Also update this name in your base template.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Here is a breakdown of all the parts:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/*---------------------------------------------------------------

    Here is where bower packages get automatically wired up.
    You should never edit anything in here manually, unless
    you need to delete a path.

-----------------------------------------------------------------*/


// Automatically injected Bower JS dependencies via bowerRequireJS
require.config({
    paths: {
    },
    packages: [

    ],
    shim: {

    }
});
// endbower
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;/*---------------------------------------------------------------

    This is some logic to load different verisons of jquery based
    on browser support. jQuery 3.x supports IE 9+ only.

-----------------------------------------------------------------*/


//Need a second config so the optimizer doesn&#39;t try and evaluate the browser only jquery conditional.

require.config({
    paths: {
        &#39;jquery&#39;: (document.addEventListener) ?
            [&#39;//code.jquery.com/jquery-3.0.0.min&#39;]
            :
            [&#39;//code.jquery.com/jquery-1.12.4.min&#39;] // https://github.com/rnsloan/requirejs-conditionally-load-jquery2
    }
})

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;/*---------------------------------------------------------------

    Here is where some predownloaded components are already
    required. These are loaded and initiliazed on page load.

-----------------------------------------------------------------*/

define(function (require){

    var componentLoader   = require(&#39;skeletor.util.componentLoader&#39;),
        browsehappy       = require(&#39;skeletor.browsehappy&#39;),
        svg4everybody     = require(&#39;svg4everybody&#39;),
        picturefill       = require(&#39;picturefill&#39;),
        commonComponents  = require(&#39;./components/common&#39;);

    svg4everybody();
    commonComponents.init();

});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is a breakdown on the preloaded components:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var componentLoader   = require(&#39;skeletor.util.componentLoader&#39;),
/*
    This is a Skeletor utility that handles component loading
    through data attributes on elements in your html. By loading
    javascript this way, the component is essitianly loaded
    &amp;quot;on demand&amp;quot; and loaded only when it&#39;s needed. It also supports
    context, so components can be loaded only on mobile, tablet, or desktop.
    See below for example&#39;s on how to use this.
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;browsehappy       = require(&#39;skeletor.browsehappy&#39;)
/*
    Detects old versions of browsers and shows a prompt bar for
    the user to upgrade.
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;svg4everybody     = require(&#39;svg4everybody&#39;),
/*
    External SVG spritesheets polyfill. One of Skeletors key features.
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;picturefill       = require(&#39;picturefill&#39;),
/*
    Picture element pollyfill. Use picture element and srset without
    crossbrowser worry.
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;commonComponents  = require(&#39;./components/common&#39;);
/*
    For your sites custom common (global) components. This is where
    code lives that you want loaded on every page and will be
    concatenated to the main.js when built.
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dynamic-components&#34;&gt;Dynamic components&lt;/h3&gt;

&lt;p&gt;Create requirejs components in the &lt;code&gt;./components&lt;/code&gt; folder. These won&amp;rsquo;t be concatenated with the main (common) JS and these can be loaded directly with the HTML.&lt;/p&gt;

&lt;h4 id=&#34;example-component&#34;&gt;Example component&lt;/h4&gt;

&lt;p&gt;Components are standard requirejs modules, and it&amp;rsquo;s syntax should be used. For components that rely on the &lt;code&gt;data-component&lt;/code&gt; loading, they require a couple functions.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;An init function for encapsulating code that should run with the component is fully loaded into the page.&lt;/li&gt;
&lt;li&gt;A destroy function to run when the component is unloaded on the page. For instance, when it leaves a mobile context and enters tablet.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here&amp;rsquo;s an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;define([&#39;jquery&#39;],function($) {

    return {
        settings: {
            $elm : $(&#39;.js-skeletor-guy&#39;)
        },

        init: function() {

            console.log(&#39;Init skeletor guy.&#39;);

            this.settings.$elm.click(function(){
                $(this).toggleClass(&#39;flipped&#39;)
            })
        },

        destroy: function() {
            console.log(&#39;Destroy skeletor guy.&#39;)
        }

    };

});
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;component-loading&#34;&gt;Component loading&lt;/h4&gt;

&lt;p&gt;Add a data-component to the html element that the component will be attached to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;!-- component-example.js will be loaded anytime this HTML is present on the page --&amp;gt;
&amp;lt;div class=&amp;quot;component-example&amp;quot; data-component=&amp;quot;component-example&amp;quot;&amp;gt;
    Lorem ipsum
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To load a JS component for only certain media queries, add a data-component-context to the html element. For multiple states, comma separate the values.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;!-- component-example.js will be loaded only in tablet and desktop --&amp;gt;
&amp;lt;div class=&amp;quot;component-example&amp;quot; data-component=&amp;quot;component-example&amp;quot; data-component-context=&amp;quot;tablet,desktop&amp;quot;&amp;gt;
    Lorem ipsum
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These components are aynced in after page load and will remain separate modules in the build process.&lt;/p&gt;

&lt;h2 id=&#34;bower&#34;&gt;Bower&lt;/h2&gt;

&lt;p&gt;Skeletor uses &lt;a href=&#34;http://bower.io&#34;&gt;bower&lt;/a&gt; for front end package management.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Install a component with bower.
$ bower install &amp;lt;package&amp;gt;
# or with an individual file.
$ bower install https://code.jquery.com/jquery-3.1.0.min.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is some automation specific to Skeletor that happens when you use bower. Please take care to understand these steps.
Files that are determined by what&amp;rsquo;s declared in the components &lt;code&gt;bower.json&lt;/code&gt; as a &lt;strong&gt;main&lt;/strong&gt; file are automatically wired up.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Main JavaScript files are added to the requirejs paths config:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Automatically injected Bower JS dependencies via bowerRequireJS
require.config({
    paths: {
        &amp;quot;bower-example&amp;quot;: &amp;quot;../../../bower_components/bower-example&amp;quot;,
    },
    packages: [

    ],
    shim: {

    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Main CSS/SASS files are added to the main.scss:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scss&#34;&gt;// Automatically injected Bower CSS dependencies via wiredep (never manually edit this block)
// bower:css
@import &amp;quot;../../../bower_components/bower-example.css&amp;quot;;
// endbower

// Automatically injected Bower SCSS dependencies via wiredep (never manually edit this block)
// bower:scss
@import &amp;quot;../../../bower_components/bower-example.scss&amp;quot;;
// endbower
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If something goes wrong (correct files aren&amp;rsquo;t wired up), check the components bower.json file to make sure the &lt;code&gt;&amp;quot;main&amp;quot;: []&lt;/code&gt; is declared correctly. If not, you can add an override for your project&amp;rsquo;s &lt;code&gt;bower.json&lt;/code&gt; file. See &lt;a href=&#34;https://github.com/ck86/main-bower-files#overrides-options&#34;&gt;https://github.com/ck86/main-bower-files#overrides-options&lt;/a&gt; for how to do this.&lt;/p&gt;

&lt;h2 id=&#34;using-skeletor-plugins&#34;&gt;Using Skeletor plugins&lt;/h2&gt;

&lt;p&gt;Skeletor has a library of plugins you can use easily for your website. These plugins integrate into the Skeletor namespace and add nice organization to your code.&lt;/p&gt;

&lt;p&gt;Using Skeletor plugins is simple. If you&amp;rsquo;re familiar with jQuery plugins, it works almost the same. Skeletor plugins are registered with bower and can be found by using bower on the command line: &lt;code&gt;bower search skeletor&lt;/code&gt; or by viewing the &lt;a href=&#34;http://bowerregistry-delphic.rhcloud.com&#34;&gt;private bower repo&lt;/a&gt; through the browser. These skeletor plugins will automatically be wired up like any other bower component. To use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;require([&#39;skeletor.accordion&#39;], function(){

  //attach to multiple elements
  $(&#39;.js-accordion&#39;).each(function(){
    new Skeletor.Accordion($(this));
  })

  //Or attach to single element
  new Skeletor.Accordion($(&#39;.js-accordion-another&#39;),{singleOpen: false});

})
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;calling-methods&#34;&gt;Calling methods&lt;/h4&gt;

&lt;p&gt;To access methods or properties on a plugin, the plugin instance will need to be retrieved. This can be achieved through the skeletor() method. You can pass public methods to the plugin this way.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(&#39;.js-accordion:eq(1)&#39;).skeletor(&#39;open&#39;,1)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;skeletor-object&#34;&gt;Skeletor Object&lt;/h2&gt;

&lt;p&gt;The global &lt;code&gt;Skeletor&lt;/code&gt; object is used extensively by and created for the plugin system. It defines global options, localized messages, feature detection, and device support. It also acts as a namespace for plugins by housing a top level name to avoid global conflicts. Each plugin class definition can be found on the &lt;code&gt;Skeletor&lt;/code&gt; object, for example, the accordion class is found under &lt;code&gt;Skeletor.Accordion&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sass</title>
      <link>http://skele.to/r/development/sass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://skele.to/r/development/sass/</guid>
      <description>

&lt;p&gt;Skeletor comes with Sass and a structure setup. The following Sass helper libraries and plugins are preinstalled:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://susy.oddbird.net&#34;&gt;Susy&lt;/a&gt;, great for robust grids&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bourbon.io&#34;&gt;Bourbon&lt;/a&gt;, awesome set of mixins&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://breakpoint-sass.com&#34;&gt;Breakpoint&lt;/a&gt;, used with a custom mixin to make breakpoints easy&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/britco/node-sass-globbing&#34;&gt;Node Sass Globbing&lt;/a&gt;, so you don&amp;rsquo;t have to add custom partials to the main.scss. Be careful of casscading rules!!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;structure&#34;&gt;Structure&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;skeletor
|-- Static
    |-- dist
    |   |-- css
    |   |   |-- main.css # Your Sass gets compiled here
    |-- src
        |-- scss
            |-- main.scss
            |-- partials
                |-- _settings.scss
                |-- base
                |   |-- _buttons.scss
                |   |-- _fonts.scss
                |   |-- _inputs.scss
                |   |-- _scaffolding.scss
                |   |-- _sprites.scss
                |   |-- _svg.scss
                |   |-- _typography.scss
                |-- components
                |   |-- # Your sites Sass components
                |-- layout
                    |-- _footer.scss
                    |-- _forms.scss
                    |-- _header.scss
                    |-- _sidebar.scss
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;&lt;code&gt;main.scss&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;main.scss&lt;/code&gt; file contains the entries points for the sites sass partials.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code&gt;partials&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_settings.scss&lt;/code&gt; site settings defined here, it contains variables for all of the colors, font stacks, breakpoints, and sizing.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;base&lt;/code&gt; holds global and base styles.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;components&lt;/code&gt; holds site components styles. Any partial added here is automatically imported with the globbing plugin.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;layout&lt;/code&gt; holds global layout styles.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;philosophies&#34;&gt;Philosophies&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.zell-weekeat.com/how-to-write-mobile-first-css&#34;&gt;Mobile First&lt;/a&gt;, mobile first approach&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://smacss.com&#34;&gt;SMACSS&lt;/a&gt;, css design process&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://css-tricks.com/bem-101&#34;&gt;BEM&lt;/a&gt;, naming convention for CSS.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Setup</title>
      <link>http://skele.to/r/overview/setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://skele.to/r/overview/setup/</guid>
      <description>

&lt;p&gt;Skeletor uses open source tools for its workflow. If you haven&amp;rsquo;t installed these requirements please do so.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Install Gulp &lt;code&gt;npm install --g gulp-cli&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Install Bower &lt;code&gt;npm install -g bower&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;installing&#34;&gt;Installing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Fork/Clone/Download the &lt;a href=&#34;https://github.com/delphic-digital/Skeletor&#34;&gt;Skeletor&lt;/a&gt; repository into your machine.&lt;/li&gt;
&lt;li&gt;Open a terminal and install the Node.Js dependencies by running &lt;code&gt;npm install&lt;/code&gt; in your project directory.&lt;/li&gt;
&lt;li&gt;Install client side dependencies with bower by running &lt;code&gt;bower install&lt;/code&gt; in your project directory.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Several things happened happened when you can the commands. &lt;code&gt;npm&lt;/code&gt; installed all the nodejs dependencies needed for gulp to do its work. You only have to run this once. &lt;code&gt;bower&lt;/code&gt; installed client side dependencies.&lt;/p&gt;

&lt;h2 id=&#34;config&#34;&gt;Config&lt;/h2&gt;

&lt;p&gt;Before you get started, you will need to update some config options for gulp. Open the config file that is here:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;skeletor
|-- gulp
    |-- config.js
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var localHostname = &#39;localhost.com&#39;, // Change to your local website that is running if you want to proxy it to browser-sync.
    siteShortname = &#39;skeletor&#39;, // Used for JavaScript optimaztion and should match your main.js namespace:  skeletor.main.js
    baseLayoutDir = &#39;./&#39;, // Where your index or base layout file is.
    baseLayoutFile = &#39;index.html&#39;, // The filename of your index or base layout. This is used to change the script included from src to dist.
    views = &#39;./*.html&#39;, // Where browser-sync should watch for HTML changes
    src = &#39;./Static/src&#39;, // Where the sass and js src are, probably don&#39;t need to change
    dist = &#39;./Static/dist&#39;, // Where everything gets compiled to, probably don&#39;t need to change
    assets = &#39;./Static/assets&#39; // Where fonts and images, and other static assets should go. Probably don&#39;t need to change.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;starting&#34;&gt;Starting&lt;/h2&gt;

&lt;p&gt;Run gulp to automatically open a new Skeletor project running on localhost:3000.&lt;/p&gt;

&lt;h2 id=&#34;file-structure&#34;&gt;File structure&lt;/h2&gt;

&lt;p&gt;Compiled and production-ready code can be found in the &lt;code&gt;dist&lt;/code&gt; directory. The &lt;code&gt;src&lt;/code&gt; directory contains development code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;skeletor
|-- Gulp
|   |-- # Lots of gulp stuff
|-- Static
|   |-- assets
|   |   |-- images
|   |   |   |-- # Your image files
|   |   |-- spritesheets
|   |       |-- # Your spritesheets get generated here
|   |-- dist
|   |   |-- css
|   |   |   |-- main.css # Your Sass gets compiled here
|   |   |-- js
|   |   |   |-- lib
|   |   |   |   |-- require.js
|   |-- src
|       |-- js
|       |   |-- skeletor.main.js
|       |   |-- components
|       |   |   |-- common.js
|       |   |   |-- common
|       |   |   |   |-- # Your common components here
|       |-- scss
|       |   |-- main.scss
|       |   |-- partials
|       |       |-- _settings.scss
|       |       |-- base
|       |       |   |-- _buttons.scss
|       |       |   |-- _fonts.scss
|       |       |   |-- _inputs.scss
|       |       |   |-- _scaffolding.scss
|       |       |   |-- _sprites.scss
|       |       |   |-- _svg.scss
|       |       |   |-- _typography.scss
|       |       |-- components
|       |       |   |-- # Your sites Sass components
|       |       |-- layout
|       |           |-- _footer.scss
|       |           |-- _forms.scss
|       |           |-- _header.scss
|       |           |-- _sidebar.scss
|       |-- sprites
|       |   |-- bitmap.example.handlebars
|       |   |-- inline.mustache
|       |   |-- vector.example.html
|       |   |-- bitmaps
|       |   |   |-- # Your bitmap (png/jpg) sprites
|       |   |-- inline
|       |   |   |-- # Your CSS sprites
|       |   |-- vectors
|       |       |-- # Your svg spritesheet sprites
|       |-- styleguide
|           |-- styleguide_overrides.css
|           |-- styleguide_variables.css
|-- .bowerrc
|-- .editorconfig
|-- .gitignore
|-- bower.json
|-- config.json
|-- gulpfile.js
|-- index.html
|-- package.json
|-- README.md

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>http://skele.to/r/contribute/get-started/</link>
      <pubDate>Fri, 24 Jun 2016 16:37:49 -0400</pubDate>
      
      <guid>http://skele.to/r/contribute/get-started/</guid>
      <description>

&lt;p&gt;So you would like to contribute to the Skeletor code?? See below for the code repos and how to set that up. To contribute to this site, see: &lt;a href=&#34;http://skele.to/r/contribute/writing-docs/&#34;&gt;Writing Documentation&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;delphic-digital-skeletor-https-github-com-delphic-digital-skeletor&#34;&gt;&lt;a href=&#34;https://github.com/delphic-digital/Skeletor&#34;&gt;delphic-digital/Skeletor&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This is the main Skeletor boilerplate code and contains all the base files, structure and gulp tasks.&lt;/p&gt;

&lt;h2 id=&#34;delphic-digital-skeletor-framework-delphic-digital-skeletor-framework&#34;&gt;&lt;a href=&#34;delphic-digital/Skeletor.framework&#34;&gt;delphic-digital/Skeletor.framework&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This is the parent repo for Skeletor&amp;rsquo;s javascript framework and contains sub repos of all the javascript components.&lt;/p&gt;

&lt;h3 id=&#34;to-get-started&#34;&gt;To get started&amp;hellip;&lt;/h3&gt;

&lt;p&gt;Clone the Skeletor.framework. This should fetch all the sub repositories also. You should end up with a repo structured like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Skeletor.framework
|-- Skeletor.core
|   |-- # This is the main Skeletor JavaScript file that contains the namespace,
|       # and other utility functions to create plugins
|-- Skeletor.plugins
|   |-- # These are plugins such as accordions and modals
|-- Skeletor.sass
|   |-- # These are specifically sass plugins
|-- Skeletor.util
|   |-- # These are utilities such as feature detects and the component loader
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next: &lt;a href=&#34;http://skele.to/r/contribute/writing-a-plugin/&#34;&gt;Writing a plugin&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sprites</title>
      <link>http://skele.to/r/development/sprites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://skele.to/r/development/sprites/</guid>
      <description>

&lt;p&gt;Skeletor comes with easy ways to create 3 different types of sprites.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Ensighten/grunt-spritesmith&#34;&gt;Spritesmith&lt;/a&gt; to create a bitmap spritesheet with retina support;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jkphl/svg-sprite&#34;&gt;svg-sprite&lt;/a&gt; to create a vector spritesheet made out of svgs.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.sgalinski.de/toolchain/gulp-inline-svg&#34;&gt;gulp-inline-svg&lt;/a&gt; to inline an svg directory in the CSS.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;bitmap&#34;&gt;Bitmap&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Drop a png and corresponding retina (image@2x.png naming convention) in &lt;code&gt;src/sprites/bitmaps&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Gulp will add your new image to the spritesheet at &lt;code&gt;Static/assets/spritesheets/bitmap.spritesheet.png&lt;/code&gt; and retina sheet at &lt;code&gt;/Static/assets/spritesheets/bitmap.spritesheet@2x.png&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use this mixin in your sass to include sprite with retina&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sass&#34;&gt;@include retina-sprite($nameOfImage-group); //The `-group` after the name is important.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;vector&#34;&gt;Vector&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Drop an svg in &lt;code&gt;src/sprites/vector&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Gulp will add your new image to the spritesheet at &lt;code&gt;Static/assets/spritesheets/vector.spritesheet.svg&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can now utilize the svg use tag in your html!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;svg&amp;gt;
    &amp;lt;use xlink:href=&amp;quot;/Static/assets/spritesheets/vector.spritesheet.svg#nameOfImage&amp;quot;&amp;gt;&amp;lt;/use&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;inline&#34;&gt;Inline&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Drop an svg in &lt;code&gt;src/sprites/inline&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Gulp will add your new image to the sass partial at &lt;code&gt;src/scss/partials/base/_svg.scss&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can now inline your svg into your sass with a mixin&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/**
@include inline-svg($nameOfImage, $fillColorString)
**/

@include inline-svg($plus, #CCC)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Usage</title>
      <link>http://skele.to/r/overview/usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://skele.to/r/overview/usage/</guid>
      <description>&lt;p&gt;Skeletor uses gulp as a task runner and several commands are available to use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# run Gulp in development mode (does not minify your JS for quicker response),
# start the server, open a new browser tab at localhost:3000 and start watching files.
# JS script include path is updated to src directory in base template.
# Sass is automatically compiled, and sprites are automatically generated.
$ gulp
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# run Gulp in production mode (runs your JS code through the requirejs optimizer),
# JS path is updated to dist directory in base template,
# will not start any server or watch.
$ gulp build
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>External svgs</title>
      <link>http://skele.to/r/troubleshooting/external-svgs/</link>
      <pubDate>Fri, 15 Jul 2016 11:33:43 -0400</pubDate>
      
      <guid>http://skele.to/r/troubleshooting/external-svgs/</guid>
      <description>

&lt;h2 id=&#34;external-svgs-don-t-work-across-domains&#34;&gt;External svgs don&amp;rsquo;t work across domains.&lt;/h2&gt;

&lt;p&gt;They have to be on the same domain.&lt;/p&gt;

&lt;h3 id=&#34;workarounds&#34;&gt;Workarounds&lt;/h3&gt;

&lt;p&gt;Embed the sprite at the top of the page.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mobile first sass</title>
      <link>http://skele.to/r/tutorials/mobile-first-sass/</link>
      <pubDate>Fri, 01 Jul 2016 09:39:50 -0400</pubDate>
      
      <guid>http://skele.to/r/tutorials/mobile-first-sass/</guid>
      <description>&lt;p&gt;We found using a traditional mobile first structure within each component partial is better for maintainability, than inlining media queries into each class. This way, there is only one of each breakpoints defined in each component, instead of scattered throughout. This makes a big difference on large scale sites.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scss&#34;&gt;.main-nav {

  &amp;amp;__list {}
  &amp;amp;__item {}

  @include breakpoint($medium){
    &amp;amp;__list {}
    &amp;amp;__item {}
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;instead of&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scss&#34;&gt;.main-nav {

  @include breakpoint($medium){}

  &amp;amp;__list {
    @include breakpoint($medium){}
  }

  &amp;amp;__item {
    @include breakpoint($medium){}
  }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Creating a plugin</title>
      <link>http://skele.to/r/contribute/writing-a-plugin/</link>
      <pubDate>Fri, 24 Jun 2016 16:37:49 -0400</pubDate>
      
      <guid>http://skele.to/r/contribute/writing-a-plugin/</guid>
      <description>

&lt;p&gt;Creating a plugin for Skeletor is easy. There is a plugin factory included in &lt;code&gt;Skeletor.core&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You have cloned the Skeletor.framework repo. If you have not see &lt;a href=&#34;../get-started&#34;&gt;Get Started&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;creating-the-repository&#34;&gt;Creating the repository&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;re going to want to create a submodule of the Skeletor.framework. This is really just for organization purposes, and to easily include &lt;code&gt;Skeletor.core&lt;/code&gt; as a dependency.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start off with creating a new repo for your plugin in github, for instance named &lt;code&gt;delphic-digital/Skeletor.breadcrumb&lt;/code&gt;. Make sure you initiliaze it with readme file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd&lt;/code&gt; into the working directory of &lt;code&gt;Skeletore.framework&lt;/code&gt; and add your new repo as
a submodule: &lt;code&gt;git submodule https://github.com/delphic-digital/Skeletor.breadcrumb.git Skeletor.plugins/Skeletor.breadcrumb&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;rsquo;s it! Your new repo should be cloned into the &lt;code&gt;Skeletor.plugins&lt;/code&gt; directory ready for development. You can check in your changes to that sub module like a normal git commit, but you will also have to commit the sub module update to the parent &lt;code&gt;skeletor.framework&lt;/code&gt; repo.&lt;/p&gt;

&lt;p&gt;There is a sample plugin repo at &lt;a href=&#34;https://github.com/delphic-digital/Skeletor.pluginTemplate&#34;&gt;delphic-digital/Skeletor.pluginTemplate&lt;/a&gt; with files to get you started.&lt;/p&gt;

&lt;h2 id=&#34;creating-your-plugin&#34;&gt;Creating your plugin&lt;/h2&gt;

&lt;p&gt;Skeletor.core includes a plugin factory. The plugin factory requires a few things to be defined in your plugin prior to calling the plugin factory function.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Your plugin&amp;rsquo;s constructor, calling &lt;code&gt;__super__&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;DEFAULTS&lt;/code&gt; static property on your plugin&amp;rsquo;s constructor&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;VERSION&lt;/code&gt; static property on your plugin&amp;rsquo;s constructor&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is an example of creating a &lt;code&gt;breadcrumb&lt;/code&gt; plugin.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//skeletor.breadcrumb.js

define([&#39;jquery&#39;, &#39;skeletor.core&#39;],function ($, Skeletor){
    function Breadcrumb(element, options) {
        Breadcrumb.__super__.call(this, element, options, Breadcrumb.DEFAULTS);

        Breadcrumb.VERSION = &#39;0.0.1&#39;;

        Breadcrumb.DEFAULTS = {
          cssClass = &#39;breadcrumb&#39;
        };

        Skeletor.Plugin.create(&#39;breadcrumb&#39;, Breadcrumb, {
            _init: function(element) {
            	this.$element = $(element);
            }
        });
    }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First, we declare a &lt;code&gt;Breadcrumb&lt;/code&gt; constructor, and VERSION and DEFAULTS properties. We then invoke the static &lt;code&gt;Skeletor.Plugin.create&lt;/code&gt; function for Skeletor&amp;rsquo;s core. Through prototypal inheritance, this function extends the &lt;code&gt;Breadcrumb&lt;/code&gt; prototype with the &lt;code&gt;Plugin&lt;/code&gt; prototype. Additionally, it creates our jQuery plugin interface.&lt;/p&gt;

&lt;p&gt;To create a breadcrumb instance, you merely need to use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var $breadcrumb = new Skeletor.Breadcrumb($(&#39;.breadcrumb__list&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;passing-options-to-a-plugin&#34;&gt;Passing options to a plugin.&lt;/h2&gt;

&lt;p&gt;You can extend the default options on plugin in typical jQuery format. Pass your options as the second argument.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var $breadcrumb = new Skeletor.Breadcrumb($(&#39;.breadcrumb__list&#39;), {
   size: &#39;large&#39;,
   spacer: &#39;|&#39;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your options are passed through to the &lt;code&gt;options&lt;/code&gt; object inside your plugin and extend the defaults. you can also overwrite the defaults.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//skeletor.breadcrumb.js

define([&#39;jquery&#39;, &#39;skeletor.core&#39;],function ($, Skeletor){
    function Breadcrumb(element, options) {
        Breadcrumb.__super__.call(this, element, options, Breadcrumb.DEFAULTS);

        Breadcrumb.VERSION = &#39;0.0.1&#39;;

        Breadcrumb.DEFAULTS = {
          cssClass = &#39;breadcrumb&#39;
        };

        Skeletor.Plugin.create(&#39;breadcrumb&#39;, Breadcrumb, {
            _init: function(element) {
            	this.$element = $(element);
            	console.log(this.options.cssClass)
            	console.log(this.options.spacer)
            	console.log(this.options.large)
            }
        });
    }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;invoking-methods-on-a-plugin&#34;&gt;Invoking methods on a plugin.&lt;/h2&gt;

&lt;p&gt;The plugin factory facilitates invoking methods via the plugin interface. This means that once a plugin is initialized, public methods can be invoked by passing the name of the method as the first parameter to the plugin function.&lt;/p&gt;

&lt;p&gt;Public methods are methods defined on the object passed into the &lt;code&gt;Skeletor.Plugin.create&lt;/code&gt; factory method that aren&amp;rsquo;t preceded by an &lt;em&gt;underscore&lt;/em&gt; character. Methods preceded by an &lt;em&gt;underscore&lt;/em&gt; are considered private methods.&lt;/p&gt;

&lt;p&gt;Using our &lt;code&gt;breadcrumb&lt;/code&gt; example above, here&amp;rsquo;s what public methods would look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//skeletor.breadcrumb.js

define([&#39;jquery&#39;, &#39;skeletor.core&#39;],function ($, Skeletor){
    function Breadcrumb(element, options) {
        Breadcrumb.__super__.call(this, element, options, Breadcrumb.DEFAULTS);

        Breadcrumb.VERSION = &#39;0.0.1&#39;;

        Breadcrumb.DEFAULTS = {
          cssClass = &#39;breadcrumb&#39;
        };

        Skeletor.Plugin.create(&#39;breadcrumb&#39;, Breadcrumb, {
            _init: function(element) {
                this.$element = $(element);
            },
            enable: function() {
                this.$element.removeAttr(&#39;disabled&#39;);
            },
            disable: function() {
                this.$element.attr(&#39;disabled&#39;, &#39;disabled&#39;);
            },
            isEnabled: function() {
                return !this.$element[0].hasAttribute(&#39;disabled&#39;);
            }
        });
    }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example, the &lt;code&gt;enable&lt;/code&gt; and &lt;code&gt;disable&lt;/code&gt; functions are public. To invoke the method, simply call it on the saved instance:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var $breadcrumb = new Skeletor.Breadcrumb($(&#39;.breadcrumb__list&#39;));

$breadcrumb.disable();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next: &lt;a href=&#34;http://skele.to/r/contribute/registering-a-plugin/&#34;&gt;Registering a plugin&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Skeletor.accordion</title>
      <link>http://skele.to/r/plugins/accordion/</link>
      <pubDate>Fri, 24 Jun 2016 09:27:49 -0400</pubDate>
      
      <guid>http://skele.to/r/plugins/accordion/</guid>
      <description>

&lt;p&gt;Allows collapsing and expanding of multiple sections of content.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Requires:&lt;/strong&gt; &lt;code&gt;skeletor.core&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;installing&#34;&gt;Installing&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;bower install skeletor.accordion&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;An accordion must be structured using the example markup. Every item should have an accompanying header and section. The header will be bound with a click event that toggles the display of its sibling section, while also closing other sections (can be changed through options).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;accordion js-accordion&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;accordion__item&amp;quot;&amp;gt;
    &amp;lt;header class=&amp;quot;accordion__header&amp;quot;&amp;gt;
      Lorem ipsum dolor sit amet
    &amp;lt;/header&amp;gt;
    &amp;lt;section class=&amp;quot;accordion__section&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;accordion__body&amp;quot;&amp;gt;
        Qui offendit convenire ea. Vis eirmod graecis mentitum in. Scripta delectus an quo. Equidem elaboraret nam et,
      &amp;lt;/div&amp;gt;
    &amp;lt;/section&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can require and initialize the accordion.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;require([&#39;skeletor.accordion&#39;], function(){

  //attach to multiple elements
  $(&#39;.js-accordion&#39;).each(function(){
    new Skeletor.Accordion($(this));
  })

  //Or attach to single element with options
  new Skeletor.Accordion($(&#39;.js-accordion-another&#39;),{singleOpen: false});

})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;options&#34;&gt;Options&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Option&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;singleOpen&lt;/td&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;Allow only one item open at a time&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;duration&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;Animation length between transitions&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;easing&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;&amp;lsquo;swing&amp;rsquo;&lt;/td&gt;
&lt;td&gt;Animation easing supports Velocty: &lt;a href=&#34;http://velocityjs.org/#easing&#34;&gt;http://velocityjs.org/#easing&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;active&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Animation length between transitions&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;methods&#34;&gt;Methods&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;open(int:index)&lt;/td&gt;
&lt;td&gt;Open accordion item at specified index. 0 based.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;close(int:index)&lt;/td&gt;
&lt;td&gt;Close accordion item at specified index. 0 based.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;closeall()&lt;/td&gt;
&lt;td&gt;Close all items&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;keyboard&#34;&gt;Keyboard&lt;/h2&gt;

&lt;p&gt;Keyboard navigation is supported:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you focus in the accordion &amp;ldquo;buttons&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;use Up/Left to put focus on previous accordion button,&lt;/li&gt;
&lt;li&gt;use Down/Right to put focus on next accordion button&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And hit return on an accordion button to open/close it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Skeletor.browsehappy</title>
      <link>http://skele.to/r/plugins/browsehappy/</link>
      <pubDate>Fri, 24 Jun 2016 09:27:49 -0400</pubDate>
      
      <guid>http://skele.to/r/plugins/browsehappy/</guid>
      <description>

&lt;p&gt;Show an unobstrusive notification bar if your browser is out dated.&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;This plugin is included by default in Skeletor. There isn&amp;rsquo;t anything extra you need to do unless you want to change options. The relevant initialization code is in the &lt;code&gt;skeletor.main.js&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;require([&#39;skeletor.browsehappy&#39;], function(){
  new Skeletor.BrowseHappy()
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With optional options object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;require([&#39;skeletor.browsehappy&#39;], function(){
  new Skeletor.BrowseHappy($(document),{
    min: { ie:9, firefox:25, opera:15, safari:6, chrome:40 }
  })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;admonition note&#34;&gt;
	&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
	&lt;p class=&#34;admonition-desc&#34;&gt;The first parameter is always the element the plugin is attached too. In the above, &lt;code&gt;$(document)&lt;/code&gt; is used. It&amp;rsquo;s also the default if it&amp;rsquo;s left blank.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&#34;options&#34;&gt;Options&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Option&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;min&lt;/td&gt;
&lt;td&gt;object&lt;/td&gt;
&lt;td&gt;{ie:9,firefox:25,opera:15,safari:6,chrome:40}&lt;/td&gt;
&lt;td&gt;Browser versions to notify&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Flexbox</title>
      <link>http://skele.to/r/troubleshooting/flexbox/</link>
      <pubDate>Thu, 01 Sep 2016 11:49:49 -0400</pubDate>
      
      <guid>http://skele.to/r/troubleshooting/flexbox/</guid>
      <description>&lt;p&gt;There are 3 different versions of flexbox. Skeletor can detect and adds a body class if flexbox is supported.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;display: -webkit-box;      /* OLD - iOS 6-, Safari 3.1-6 */
display: -moz-box;         /* OLD - Firefox 19- (buggy but mostly works) */
display: -ms-flexbox;      /* TWEENER - IE 10 */
display: -webkit-flex;     /* NEW - Chrome */
display: flex;             /* NEW, Spec - Opera 12.1, Firefox 20+ */
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Registering a plugin</title>
      <link>http://skele.to/r/contribute/registering-a-plugin/</link>
      <pubDate>Fri, 24 Jun 2016 16:37:49 -0400</pubDate>
      
      <guid>http://skele.to/r/contribute/registering-a-plugin/</guid>
      <description>

&lt;p&gt;Skeletor has a private bower repo to host all it&amp;rsquo;s components using &lt;a href=&#34;https://www.npmjs.com/package/private-bower&#34;&gt;private-bower&lt;/a&gt; hosted here: &lt;a href=&#34;http://bowerregistry-delphic.rhcloud.com/&#34;&gt;http://bowerregistry-delphic.rhcloud.com/&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;register&#34;&gt;Register&lt;/h2&gt;

&lt;p&gt;To register your plugin for Skeletor, you need to point bower to the private bower repo. Create a bower config file, &lt;code&gt;.bowerrc&lt;/code&gt;, at the root of your plugin directory with the following settings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
    &amp;quot;registry&amp;quot;: &amp;quot;http://bowerregistry-delphic.rhcloud.com&amp;quot;,
    &amp;quot;timeout&amp;quot;: 300000,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a &lt;code&gt;bower.json&lt;/code&gt; at the root of your project with &lt;code&gt;bower init&lt;/code&gt;.
Then use &lt;code&gt;bower register&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bower register &amp;lt;my-package-name&amp;gt; &amp;lt;git-endpoint&amp;gt;
# for example
$ bower register example git://github.com/user/example.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;usage-in-skeletor&#34;&gt;Usage in Skeletor&lt;/h2&gt;

&lt;p&gt;Skeletor includes a &lt;code&gt;.bowerrc&lt;/code&gt; file that points to the private bower registery already. Installing a Skeletor component is a simple as running bower commands.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bower install plugin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Skeletor will auto wire it up to your require.js config file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &#39;paths&#39;: {
    &#39;skeletor.plugin&#39;: &#39;bower_components/skeletor.plugin&#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can load it with requirejs in a component:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require([&#39;skeletor.plugin&#39;], function(){
    var $plugin = new Skeletor.plugin($(&#39;.plugin__list&#39;));
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next you should write documentation for your plugin.&lt;/p&gt;

&lt;p&gt;Next: &lt;a href=&#34;http://skele.to/r/contribute/writing-docs/&#34;&gt;Writing documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing docs</title>
      <link>http://skele.to/r/contribute/writing-docs/</link>
      <pubDate>Fri, 24 Jun 2016 16:37:49 -0400</pubDate>
      
      <guid>http://skele.to/r/contribute/writing-docs/</guid>
      <description>&lt;p&gt;This documentation site is coded with &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; static site generator. It&amp;rsquo;s easy to contribute to by following these steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/overview/installing/&#34;&gt;Install Hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clone the &lt;a href=&#34;https://github.com/delphic-digital/Skeletor.docs&#34;&gt;Skeletor.docs&lt;/a&gt; repo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From the command line, &lt;code&gt;cd&lt;/code&gt; into your cloned directory and run &lt;code&gt;hugo server&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Browse to localhost:1313 and the Skeletor documentation site should be up and running! The content directory contains all the markdown files that make up the pages. There is a special meta at the top for defining nav structure and page title.&lt;/p&gt;

&lt;p&gt;After you commit, a script will auto deploy the changes to github pages for live website updates!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>