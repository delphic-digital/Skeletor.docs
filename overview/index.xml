<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Overview on The Skeletor Project</title>
    <link>localhost/overview/</link>
    <description>Recent content in Overview on The Skeletor Project</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 01 Jul 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="localhost/overview/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Introduction to Skeletor</title>
      <link>/localhost/overview/introduction/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>/localhost/overview/introduction/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Skeletor&lt;/em&gt; is a directory structure and Gulpfile designed as an easy starting point for front end development of projects. Mainly it was developed for projects at Delphic Digital, but it was designed to be agnostic, so any project is capable of using it. It is designed to give you a quick and organized way to start developing web sites with best practices in mind.&lt;/p&gt;

&lt;h3 id=&#34;features&#34;&gt;Features&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Command Line Interface (CLI)&lt;/li&gt;
&lt;li&gt;Scaffold new projects&lt;/li&gt;
&lt;li&gt;Image and SVG optimization&lt;/li&gt;
&lt;li&gt;Sass compilation and minification

&lt;ul&gt;
&lt;li&gt;Built in support for:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://susy.oddbird.net/&#34;&gt;Susy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bourbon.io/&#34;&gt;Bourbon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://breakpoint-sass.com/&#34;&gt;Breakpoint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Javascript AMD modules and optimization with requirejs&lt;/li&gt;
&lt;li&gt;Bower for client side package management&lt;/li&gt;
&lt;li&gt;Static file serving with automated reloading&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;get-started&#34;&gt;Get started&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;setup&#34;&gt;Setup&lt;/a&gt; &amp;mdash; Project setup&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;usage&#34;&gt;Usage&lt;/a&gt; &amp;mdash; How to use Skeletor&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;css&#34;&gt;CSS&lt;/a&gt; &amp;mdash; How to use CSS in Skeletor&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;javascript&#34;&gt;JavaScript&lt;/a&gt; &amp;mdash; How to use JavaScript in Skeletor&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;sprites&#34;&gt;Sprites&lt;/a&gt; &amp;mdash; How to create Sprites in Skeletor&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;styleguide&#34;&gt;Styleguide&lt;/a&gt; &amp;mdash; How to create a styleguide in Skeletor&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;disclaimer&#34;&gt;Disclaimer&lt;/h4&gt;

&lt;p&gt;This repository gets updated as more best practices or discoveries are implemented.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Quickstart Guide</title>
      <link>/localhost/overview/quickstart/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>/localhost/overview/quickstart/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Installing Skeletor</title>
      <link>/localhost/overview/installing/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>/localhost/overview/installing/</guid>
      <description>

&lt;p&gt;Skeletor uses open source tools for its workflow. If you haven&amp;rsquo;t installed these requirements please do so.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Install Gulp &lt;code&gt;npm install --g gulp-cli&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Install Bower &lt;code&gt;npm install -g bower&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;quick-start&#34;&gt;Quick Start&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Fork/Clone/Download the &lt;a href=&#34;https://github.com/delphic-digital/Skeletor&#34;&gt;Skeletor&lt;/a&gt; repository into your machine.&lt;/li&gt;
&lt;li&gt;Open a terminal and install the Node.Js dependencies by running &lt;code&gt;npm install&lt;/code&gt; in your project directory.&lt;/li&gt;
&lt;li&gt;Install client side dependencies with bower by running &lt;code&gt;bower install&lt;/code&gt; in your project directory.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;gulp&lt;/code&gt; to automatically open a new Skeletor project running on &lt;code&gt;localhost:3000&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;file-structure&#34;&gt;File structure&lt;/h2&gt;

&lt;p&gt;Compiled and production-ready code can be found in the &lt;code&gt;dist&lt;/code&gt; directory. The &lt;code&gt;src&lt;/code&gt; directory contains development code.&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
	&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
	&lt;p class=&#34;admonition-desc&#34;&gt;Nothing to see here, move along.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;A sentence&lt;/p&gt;

&lt;div class=&#34;admonition warning&#34;&gt;
	&lt;p class=&#34;admonition-title&#34;&gt;Don&amp;#39;t try this at home&lt;/p&gt;
	&lt;p class=&#34;admonition-desc&#34;&gt;Nothing to see here, move along.&lt;/p&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;hljs nohighlight&#34;&gt;skeletor
|-- Static
|   |-- assets
|   |   |-- images
|   |   |   |-- # Your image files
|   |   |-- spritesheets
|   |       |-- # Your spritesheets get generated here
|   |-- dist
|   |   |-- css
|   |   |   |-- main.css # Your Sass gets compiled here
|   |   |-- js
|   |   |   |-- lib
|   |   |   |   |-- require.js
|   |-- src
|       |-- js
|       |   |-- skeletor.main.js
|       |   |-- components
|       |   |   |-- common.js
|       |   |   |-- common
|       |   |   |   |-- # Your common components here
|       |-- scss
|       |   |-- main.scss
|       |   |-- partials
|       |       |-- _settings.scss
|       |       |-- base
|       |       |   |-- _buttons.scss
|       |       |   |-- _fonts.scss
|       |       |   |-- _inputs.scss
|       |       |   |-- _scaffolding.scss
|       |       |   |-- _sprites.scss
|       |       |   |-- _svg.scss
|       |       |   |-- _typography.scss
|       |       |-- components
|       |       |   |-- # Your sites Sass components
|       |       |-- layout
|       |           |-- _footer.scss
|       |           |-- _forms.scss
|       |           |-- _header.scss
|       |           |-- _sidebar.scss
|       |-- sprites
|       |   |-- bitmap.example.handlebars
|       |   |-- inline.mustache
|       |   |-- vector.example.html
|       |   |-- bitmaps
|       |   |   |-- # Your bitmap (png/jpg) sprites
|       |   |-- inline
|       |   |   |-- # Your CSS sprites
|       |   |-- vectors
|       |       |-- # Your svg spritesheet sprites
|       |-- styleguide
|           |-- styleguide_overrides.css
|           |-- styleguide_variables.css
|-- .bowerrc
|-- .editorconfig
|-- .gitignore
|-- bower.json
|-- config.json
|-- gulpfile.js
|-- index.html
|-- package.json
|-- README.md&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Next: see &lt;a href=&#34;usage&#34;&gt;Usage&lt;/a&gt; for explanation of &lt;code&gt;gulp&lt;/code&gt; command&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Skeletor</title>
      <link>/localhost/overview/usage/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>/localhost/overview/usage/</guid>
      <description>

&lt;p&gt;Skeletor uses gulp as a task runner and several commands are available to use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# run Gulp in development mode (does not minify your JS for quicker response),
# start the server, open a new browser tab at localhost:3000 and start watching files.
# JS script include path is updated to src directory in base template.
# Sass is automatically compiled, and sprites are automatically generated.
$ gulp
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# run Gulp in production mode (runs your JS code through the requirejs optimizer),
# JS path is updated to dist directory in base template,
# will not start any server or watch.
$ gulp build
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installing-components&#34;&gt;Installing components&lt;/h2&gt;

&lt;p&gt;Skeletor integrates with bower package management very nicely for vendor components. See &lt;a href=&#34;http://bower.io&#34;&gt;http://bower.io&lt;/a&gt; for more info.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# install a vendor component with bower
# main component files are automatically wired up to Skeletor
# js main is added to requirejs paths config.
# css/scss is added to main.scss
$ bower install &amp;lt;package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is some automation that happens when you use bower. Please take care to understand these steps.
The files are determined by what&amp;rsquo;s declared as a &lt;strong&gt;main&lt;/strong&gt; file by the &lt;code&gt;bower.json&lt;/code&gt; spec.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript files are added to the requirejs paths config:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Automatically injected Bower JS dependencies via bowerRequireJS
require.config({
  paths: {
    &amp;quot;bower-example&amp;quot;: &amp;quot;../../../bower_components/bower-example&amp;quot;,
  },
  packages: [

  ],
  shim: {

  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;CSS/SASS files are added to the main.scss:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scss&#34;&gt;// Automatically injected Bower CSS dependencies via wiredep (never manually edit this block)
// bower:css
@import &amp;quot;../../../bower_components/bower-example.css&amp;quot;;
// endbower

// Automatically injected Bower SCSS dependencies via wiredep (never manually edit this block)
// bower:scss
@import &amp;quot;../../../bower_components/bower-example.scss&amp;quot;;
// endbower
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If something goes wrong (correct files aren&amp;rsquo;t wired up), check the components bower.json file to make sure the &lt;code&gt;&amp;quot;main&amp;quot;: []&lt;/code&gt; is declared correctly. If not, you can add an override for your project&amp;rsquo;s &lt;code&gt;bower.json&lt;/code&gt; file. See &lt;a href=&#34;https://github.com/ck86/main-bower-files#overrides-options&#34;&gt;https://github.com/ck86/main-bower-files#overrides-options&lt;/a&gt; for how to do this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configuring Hugo</title>
      <link>/localhost/overview/configuration/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>/localhost/overview/configuration/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Source Organization</title>
      <link>/localhost/overview/source-directory/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>/localhost/overview/source-directory/</guid>
      <description>

&lt;p&gt;Hugo takes a single directory and uses it as the input for creating a complete
website.&lt;/p&gt;

&lt;p&gt;The top level of a source directory will typically have the following elements:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▸ archetypes/
▸ content/
▸ data/
▸ layouts/
▸ static/
▸ themes/
  config.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Learn more about the different directories and what their purpose is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;localhost/overview/configuration/&#34;&gt;config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/extras/datafiles/&#34;&gt;data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/content/archetypes/&#34;&gt;archetypes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/content/organization/&#34;&gt;content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/layout/overview/&#34;&gt;layouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/themes/creation#static&#34;&gt;static&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/themes/overview/&#34;&gt;themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;An example directory may look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── config.toml
├── archetypes
|   └── default.md
├── content
|   ├── post
|   |   ├── firstpost.md
|   |   └── secondpost.md
|   └── quote
|   |   ├── first.md
|   |   └── second.md
├── data
├── layouts
|   ├── _default
|   |   ├── single.html
|   |   └── list.html
|   ├── partials
|   |   ├── header.html
|   |   └── footer.html
|   ├── taxonomies
|   |   ├── category.html
|   |   ├── post.html
|   |   ├── quote.html
|   |   └── tag.html
|   ├── post
|   |   ├── li.html
|   |   ├── single.html
|   |   └── summary.html
|   ├── quote
|   |   ├── li.html
|   |   ├── single.html
|   |   └── summary.html
|   ├── shortcodes
|   |   ├── img.html
|   |   ├── vimeo.html
|   |   └── youtube.html
|   ├── index.html
|   └── sitemap.xml
├── themes
|   ├── hyde
|   └── doc
└── static
    ├── css
    └── js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This directory structure tells us a lot about this site:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The website intends to have two different types of content: &lt;em&gt;posts&lt;/em&gt; and &lt;em&gt;quotes&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;It will also apply two different taxonomies to that content: &lt;em&gt;categories&lt;/em&gt; and &lt;em&gt;tags&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;It will be displaying content in 3 different views: a list, a summary and a full page view.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>